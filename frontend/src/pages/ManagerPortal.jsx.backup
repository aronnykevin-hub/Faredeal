import React, { useState, useEffect, useMemo, useCallback, lazy, Suspense } from 'react';
import { 
  FiTrendingUp, FiUsers, FiDollarSign, FiPackage, FiBarChart, 
  FiPieChart, FiTarget, FiAward, FiClock, FiAlertTriangle,
  FiCalendar, FiMail, FiBell, FiSettings, FiLogOut, FiSearch,
  FiFilter, FiDownload, FiRefreshCw, FiEye, FiEdit, FiTrash2,
  FiPlus, FiMinus, FiChevronRight, FiChevronDown, FiStar,
  FiHeart, FiZap, FiShield, FiGift, FiNavigation, FiMapPin,
  FiSmartphone, FiHeadphones, FiCamera, FiWatch, FiHome,
  FiCreditCard, FiMessageCircle, FiShare2, FiThumbsUp,
  FiBookmark, FiGrid, FiList, FiInfo, FiHelpCircle,
  FiMaximize, FiMinimize, FiRotateCw, FiUpload, FiPrinter,
  FiTag, FiHash, FiImage, FiCheckCircle, FiXCircle, FiTruck,
  FiX, FiSend, FiFileText, FiCopy, FiExternalLink, FiCheck,
  FiPlay, FiCpu, FiMonitor
} from 'react-icons/fi';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  BarChart, Bar, PieChart, Pie, Cell, AreaChart, Area, ComposedChart
} from 'recharts';
import InventoryManagement from '../components/InventoryManagement';
import SupplierManagement from '../components/SupplierManagement';
import ProductInventoryInterface from '../components/ProductInventoryInterface';
import { toast } from 'react-toastify';

// Lazy load the new components for better performance
const ManagerHeader = lazy(() => import('../components/ManagerHeader'));
const ManagerNavigation = lazy(() => import('../components/ManagerNavigation'));
const UgandaOverviewDashboard = lazy(() => import('../components/UgandaOverviewDashboard'));

// üá∫üá¨ UGANDA CULTURAL ELEMENTS
const UGANDA_GREETINGS = {
  morning: { en: 'Good Morning', luganda: 'Wasuze otya nno', swahili: 'Habari za asubuhi' },
  afternoon: { en: 'Good Afternoon', luganda: 'Osiibye otya', swahili: 'Habari za mchana' },
  evening: { en: 'Good Evening', luganda: 'Oraire otya', swahili: 'Habari za jioni' }
};

const UGANDA_CURRENCY = {
  code: 'UGX',
  symbol: 'UGX',
  locale: 'en-UG'
};

const UGANDA_BUSINESS_HOURS = {
  weekdays: '8:00 AM - 8:00 PM',
  weekends: '9:00 AM - 6:00 PM',
  timezone: 'EAT (UTC+3)'
};

// üöÄ REAL CONNECTIVITY APIs FOR WHATSAPP AND EMAIL
// WhatsApp Business API Integration
const sendWhatsAppMessage = async (phoneNumber, message, mediaUrl = null) => {
  try {
    // WhatsApp Business API Configuration
    const WHATSAPP_API_URL = 'https://graph.facebook.com/v18.0/YOUR_PHONE_NUMBER_ID/messages';
    const ACCESS_TOKEN = import.meta.env?.VITE_WHATSAPP_ACCESS_TOKEN || 'YOUR_ACCESS_TOKEN';
    
    const payload = {
      messaging_product: "whatsapp",
      to: phoneNumber,
      type: mediaUrl ? "document" : "text",
      ...(mediaUrl ? {
        document: {
          link: mediaUrl,
          caption: message,
          filename: `FAREDEAL_Report_${Date.now()}.pdf`
        }
      } : {
        text: { body: message }
      })
    };

    const response = await fetch(WHATSAPP_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    const result = await response.json();
    
    if (response.ok) {
      return { success: true, messageId: result.messages[0].id };
    } else {
      throw new Error(result.error?.message || 'Failed to send message');
    }
  } catch (error) {
    console.error('WhatsApp API Error:', error);
    // Fallback to web WhatsApp
    return { success: false, error: error.message, fallback: true };
  }
};

// Real Email API Integration
const sendEmailReport = async (recipients, subject, htmlContent, attachments = []) => {
  try {
    // EmailJS or custom email service configuration
    const EMAIL_SERVICE_URL = 'https://api.emailjs.com/api/v1.0/email/send';
    const SERVICE_ID = import.meta.env?.VITE_EMAILJS_SERVICE_ID || 'service_faredeal';
    const TEMPLATE_ID = import.meta.env?.VITE_EMAILJS_TEMPLATE_ID || 'template_business_report';
    const PUBLIC_KEY = import.meta.env?.VITE_EMAILJS_PUBLIC_KEY || 'YOUR_PUBLIC_KEY';

    const emailData = {
      service_id: SERVICE_ID,
      template_id: TEMPLATE_ID,
      user_id: PUBLIC_KEY,
      template_params: {
        to_email: recipients.join(','),
        subject: subject,
        html_content: htmlContent,
        from_name: 'FAREDEAL Uganda Business Intelligence',
        from_email: 'reports@faredeal.ug',
        reply_to: 'manager@faredeal.ug'
      }
    };

    // Add attachments if supported
    if (attachments.length > 0) {
      emailData.template_params.attachments = attachments;
    }

    const response = await fetch(EMAIL_SERVICE_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(emailData)
    });

    if (response.ok) {
      return { success: true, messageId: `email_${Date.now()}` };
    } else {
      throw new Error('Email service unavailable');
    }
  } catch (error) {
    console.error('Email API Error:', error);
    // Fallback to mailto
    return { success: false, error: error.message, fallback: true };
  }
};

// Native device sharing (for mobile/PWA)
const shareViaNativeAPI = async (data) => {
  if (navigator.share) {
    try {
      await navigator.share({
        title: `FAREDEAL ${data.reportName}`,
        text: data.content,
        url: data.url || window.location.href
      });
      return { success: true, method: 'native' };
    } catch (error) {
      console.error('Native sharing error:', error);
      return { success: false, error: error.message };
    }
  }
  return { success: false, error: 'Native sharing not supported' };
};

// WhatsApp Web Integration with real connectivity
const shareViaWhatsAppWeb = (phoneNumber, message, file = null) => {
  // Clean phone number (remove non-digits)
  const cleanPhone = phoneNumber.replace(/\D/g, '');
  
  if (file) {
    // Create shareable file URL
    const fileUrl = URL.createObjectURL(file);
    const downloadLink = document.createElement('a');
    downloadLink.href = fileUrl;
    downloadLink.download = file.name;
    downloadLink.click();
    
    // Enhanced message with file reference
    const fileMessage = `${message}\n\nüìé File: ${file.name}\nüíæ Size: ${(file.size / 1024).toFixed(1)} KB\n\n*Please attach the downloaded file to complete sharing*`;
    
    setTimeout(() => {
      window.open(`https://wa.me/${cleanPhone}?text=${encodeURIComponent(fileMessage)}`, '_blank');
    }, 1000);
  } else {
    window.open(`https://wa.me/${cleanPhone}?text=${encodeURIComponent(message)}`, '_blank');
  }
};

// Email client integration with real attachments
const composeEmailWithAttachment = (recipients, subject, body, attachment = null) => {
  if (attachment) {
    // Create downloadable attachment
    const attachmentUrl = URL.createObjectURL(attachment);
    const downloadLink = document.createElement('a');
    downloadLink.href = attachmentUrl;
    downloadLink.download = attachment.name;
    downloadLink.click();
    
    // Enhanced email body with attachment reference
    const attachmentBody = `${body}\n\nüìé ATTACHMENT INCLUDED\nFile: ${attachment.name}\nSize: ${(attachment.size / 1024).toFixed(1)} KB\n\n*The file has been downloaded to your device. Please attach it to this email.*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
    
    setTimeout(() => {
      window.open(`mailto:${recipients.join(',')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(attachmentBody)}`, '_blank');
    }, 1000);
  } else {
    window.open(`mailto:${recipients.join(',')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`, '_blank');
  }
};

// Performance optimized color palette
const CHART_COLORS = {
  primary: '#3B82F6',
  secondary: '#8B5CF6', 
  success: '#10B981',
  warning: '#F59E0B',
  danger: '#EF4444',
  info: '#06B6D4',
  uganda: ['#FCCC04', '#000000', '#CE1126'] // Uganda flag colors
};

const ManagerPortal = () => {
  // Core State Management
  const [activeTab, setActiveTab] = useState('overview');
  const [timeRange, setTimeRange] = useState('7d');
  const [currentTime, setCurrentTime] = useState(new Date());
  
  // Modal and UI States
  const [showInventoryModal, setShowInventoryModal] = useState(false);
  const [showSupplierManagementModal, setShowSupplierManagementModal] = useState(false);
  const [editModal, setEditModal] = useState({
    isOpen: false,
    type: '',
    data: null,
    mode: 'edit'
  });

  // Order Verification States
  const [orderFilter, setOrderFilter] = useState('all');
  const [selectedSupplier, setSelectedSupplier] = useState('');
  const [dateRange, setDateRange] = useState('this_week');
  const [selectedOrders, setSelectedOrders] = useState([]);
  const [showOrderDetails, setShowOrderDetails] = useState(null);
  const [showApprovalModal, setShowApprovalModal] = useState(null);
  const [showRejectModal, setShowRejectModal] = useState(null);
  const [bulkAction, setBulkAction] = useState('');
  const [sortBy, setSortBy] = useState('orderDate');
  const [viewMode, setViewMode] = useState('grid');
  const [searchTerm, setSearchTerm] = useState('');

  // Mobile-specific states
  const [isMobile, setIsMobile] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  // Manager Profile - moved up to avoid initialization order issues
  const [managerProfile, setManagerProfile] = useState({
    name: 'Nakiyonga Catherine',
    role: 'Store Manager',
    department: 'Operations Management',
    employeeId: 'MGR-UG001',
    joinDate: '2021-01-15',
    avatar: 'üë©‚Äçüíº',
    location: 'Kampala, Uganda',
    status: 'Online',
    languages: ['English', 'Luganda', 'Swahili'],
    phoneNumber: '+256 700 123 456',
    email: 'catherine.nakiyonga@faredeal.ug',
    permissions: {
      analytics: true,
      teamManagement: true,
      inventory: true,
      suppliers: true,
      reports: true,
      financials: true,
      customers: true,
      mobileMoneyTransactions: true,
      foreignCurrency: true,
      exportImportPermits: true
    }
  });
  
  // Enhanced Notifications System
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: 'urgent',
      title: 'Critical Stock Alert',
      message: 'iPhone 15 Pro Max inventory critically low - Only 2 units remaining',
      time: '2 minutes ago',
      timestamp: new Date(Date.now() - 2 * 60 * 1000),
      icon: '‚ö†Ô∏è',
      color: 'bg-red-100 text-red-800 border-red-200',
      unread: true,
      category: 'inventory',
      action: 'reorder',
      priority: 'high',
      ugandaContext: 'Kampala store'
    },
    {
      id: 2,
      type: 'success',
      title: 'Mobile Money Payment Received',
      message: 'MTN Mobile Money payment of UGX 450,000 processed successfully from customer Nakato Grace',
      time: '8 minutes ago',
      timestamp: new Date(Date.now() - 8 * 60 * 1000),
      icon: 'üí∞',
      color: 'bg-green-100 text-green-800 border-green-200',
      unread: true,
      category: 'payment',
      action: 'view_receipt',
      priority: 'medium',
      ugandaContext: 'MTN MoMo'
    },
    {
      id: 3,
      type: 'info',
      title: 'New Supplier Order',
      message: 'Order #PO-2024-087 received from Tech Solutions Ltd - Requires manager approval',
      time: '15 minutes ago',
      timestamp: new Date(Date.now() - 15 * 60 * 1000),
      icon: 'üì¶',
      color: 'bg-blue-100 text-blue-800 border-blue-200',
      unread: true,
      category: 'orders',
      action: 'approve_order',
      priority: 'medium',
      ugandaContext: 'Kampala supplier'
    },
    {
      id: 4,
      type: 'achievement',
      title: 'Team Performance Milestone',
      message: 'Sarah Nakiyonga completed "Customer Excellence Training" with 98% score',
      time: '1 hour ago',
      timestamp: new Date(Date.now() - 60 * 60 * 1000),
      icon: 'üèÜ',
      color: 'bg-purple-100 text-purple-800 border-purple-200',
      unread: false,
      category: 'team',
      action: 'view_certificate',
      priority: 'low',
      ugandaContext: 'Uganda team'
    },
    {
      id: 5,
      type: 'warning',
      title: 'Delivery Delay Notice',
      message: 'Fresh vegetables delivery from Wakiso farmers delayed by 45 minutes due to Kampala traffic',
      time: '2 hours ago',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
      icon: 'üöõ',
      color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      unread: false,
      category: 'logistics',
      action: 'update_schedule',
      priority: 'medium',
      ugandaContext: 'Wakiso-Kampala route'
    }
  ]);
  
  const [notificationCount, setNotificationCount] = useState(
    notifications.filter(n => n.unread).length
  );
  const [showNotifications, setShowNotifications] = useState(false);
  const [notificationFilter, setNotificationFilter] = useState('all');
  const [showMobileDropdown, setShowMobileDropdown] = useState(false);
  const [showMainDropdown, setShowMainDropdown] = useState(false);
  
  // Reports system state
  const [selectedReportCategory, setSelectedReportCategory] = useState('general');
  const [selectedExportFormat, setSelectedExportFormat] = useState('pdf');
  const [reportDateRange, setReportDateRange] = useState('this_month');
  const [showReportModal, setShowReportModal] = useState(false);
  const [selectedReport, setSelectedReport] = useState(null);
  const [generatedReportData, setGeneratedReportData] = useState(null);
  const [exportingFormat, setExportingFormat] = useState(null);
  
  // Real-time data state
  const [realTimeData, setRealTimeData] = useState({
    sales: {
      totalSales: 0,
      todaySales: 0,
      monthlySales: 0,
      growthRate: 0,
      topProducts: [],
      customerMetrics: {},
      regionalPerformance: {},
      lastUpdated: null
    },
    inventory: {
      totalProducts: 0,
      lowStockItems: 0,
      outOfStock: 0,
      stockValue: 0,
      turnoverRate: 0,
      topMovingProducts: [],
      supplierMetrics: {},
      lastUpdated: null
    },
    financial: {
      totalRevenue: 0,
      monthlyRevenue: 0,
      expenses: 0,
      profit: 0,
      profitMargin: 0,
      cashFlow: 0,
      revenueStreams: {},
      lastUpdated: null
    }
  });
  const [dataLoading, setDataLoading] = useState(false);

  // üöÄ REAL-TIME PORTAL CONTROL SYSTEM
  const [portalControlSystem, setPortalControlSystem] = useState({
    activePortals: {
      manager: { activeUsers: 1, status: 'online', lastActivity: new Date() },
      employee: { activeUsers: 0, status: 'offline', lastActivity: null },
      customer: { activeUsers: 0, status: 'offline', lastActivity: null },
      supplier: { activeUsers: 0, status: 'offline', lastActivity: null }
    },
    wsConnections: {},
    isConnected: false,
    messageQueue: [],
    controlledMetrics: {
      totalActiveUsers: 1,
      totalTransactions: 0,
      realTimeRevenue: 0,
      systemHealth: 'excellent'
    }
  });

  // üî¨ ADVANCED PORTAL ANALYTICS SYSTEM
  const [portalAnalytics, setPortalAnalytics] = useState({
    realTimeCharts: {
      userActivityHeatmap: [],
      transactionFlowChart: [],
      performanceMetrics: [],
      securityAlerts: [],
      loadBalancingData: []
    },
    predictiveInsights: {
      peakUsageForecasts: [],
      maintenanceRecommendations: [],
      capacityPlanningData: [],
      userBehaviorPredictions: []
    },
    compareAnalytics: {
      hourlyComparisons: [],
      dailyTrends: [],
      weeklyPatterns: [],
      monthlyGrowth: []
    },
    geographicDistribution: {
      kampala: { users: 0, transactions: 0, performance: 'excellent' },
      entebbe: { users: 0, transactions: 0, performance: 'good' },
      jinja: { users: 0, transactions: 0, performance: 'average' },
      mbale: { users: 0, transactions: 0, performance: 'good' }
    }
  });

  // ü§ñ AI-POWERED PORTAL AUTO-PILOT SYSTEM
  const [portalAutoPilot, setPortalAutoPilot] = useState({
    isEnabled: true,
    intelligence: {
      loadBalancing: { enabled: true, threshold: 80, strategy: 'round-robin' },
      autoScaling: { enabled: true, minInstances: 1, maxInstances: 10 },
      selfHealing: { enabled: true, restartAttempts: 3, cooldownPeriod: 300 },
      predictiveMaintenance: { enabled: true, alertThreshold: 75 },
      intelligentRouting: { enabled: true, algorithm: 'geographic-proximity' }
    },
    aiDecisions: [],
    automatedActions: [],
    learningModel: {
      accuracy: 94.5,
      trainingData: 15420,
      lastTraining: new Date(),
      improvements: []
    }
  });

  // üõ°Ô∏è PORTAL SECURITY COMMAND CENTER
  const [portalSecurity, setPortalSecurity] = useState({
    threatDetection: {
      activeThreats: 0,
      blockedAttempts: 247,
      suspiciousActivities: [],
      securityScore: 98.5
    },
    accessControl: {
      activeSessions: new Map(),
      permissionMatrix: {},
      twoFactorEnabled: true,
      passwordPolicy: 'strict'
    },
    emergencyProtocols: {
      lockdownMode: false,
      emergencyContacts: [],
      incidentResponse: 'automated',
      backupSystems: 'standby'
    },
    auditTrail: [],
    complianceStatus: {
      gdpr: 'compliant',
      ugandaDataProtection: 'compliant',
      iso27001: 'compliant'
    }
  });

  // ‚ö° PORTAL PERFORMANCE OPTIMIZER
  const [portalPerformance, setPortalPerformance] = useState({
    realTimeMetrics: {
      responseTime: { manager: 120, employee: 95, customer: 110, supplier: 105 },
      throughput: { manager: 450, employee: 680, customer: 320, supplier: 280 },
      errorRate: { manager: 0.02, employee: 0.01, customer: 0.03, supplier: 0.02 },
      uptime: { manager: 99.9, employee: 99.8, customer: 99.7, supplier: 99.6 }
    },
    optimizations: {
      cacheHitRatio: 94.2,
      databaseConnections: 15,
      memoryUsage: 68.3,
      cpuUtilization: 42.1
    },
    recommendations: [
      { type: 'cache', priority: 'high', description: 'Implement Redis caching for customer portal' },
      { type: 'database', priority: 'medium', description: 'Optimize inventory queries' },
      { type: 'cdn', priority: 'low', description: 'Add CDN for static assets' }
    ],
    alerts: []
  });

  // üí¨ PORTAL COMMUNICATION HUB
  const [portalCommunication, setPortalCommunication] = useState({
    activeConversations: [],
    videoCallSessions: [],
    screenSharingSessions: [],
    collaborativeWhiteboards: [],
    announcements: [],
    emergencyBroadcasts: [],
    chatRooms: {
      management: { participants: 3, status: 'active' },
      employees: { participants: 12, status: 'active' },
      suppliers: { participants: 8, status: 'active' },
      customerSupport: { participants: 5, status: 'active' }
    },
    messageQueue: [],
    translationService: { enabled: true, languages: ['en', 'luganda', 'swahili'] }
  });

  // üíæ PORTAL BACKUP & RECOVERY SYSTEM
  const [portalBackupSystem, setPortalBackupSystem] = useState({
    backupSchedule: {
      frequency: 'hourly',
      retention: '30-days',
      compression: true,
      encryption: true
    },
    backupStatus: {
      lastBackup: new Date(),
      nextScheduled: new Date(Date.now() + 60 * 60 * 1000),
      totalBackups: 756,
      storageUsed: '2.4TB'
    },
    disasterRecovery: {
      recoveryTime: '15-minutes',
      backupLocations: ['kampala-dc1', 'entebbe-dc2', 'cloud-aws'],
      autoFailover: true,
      testResults: 'successful'
    },
    dataSync: {
      crossPortalSync: true,
      conflictResolution: 'timestamp-based',
      syncStatus: 'healthy',
      lastSync: new Date()
    }
  });

  // WebSocket connection for real-time portal control
  const [webSocketManager, setWebSocketManager] = useState(null);

  // Portal activity monitoring
  const [portalActivities, setPortalActivities] = useState([
    {
      id: 1,
      portal: 'manager',
      user: 'Catherine Nakiyonga',
      action: 'Logged in to Manager Portal',
      timestamp: new Date(),
      status: 'active',
      location: 'Kampala, Uganda',
      device: 'Desktop Chrome'
    }
  ]);

  // Portal configuration control
  const [portalConfigs, setPortalConfigs] = useState({
    employee: {
      permissions: ['pos', 'inventory_view', 'customer_service'],
      theme: 'light',
      features: ['barcode_scanner', 'mobile_payments', 'receipt_printing'],
      restrictions: ['financial_reports', 'user_management'],
      workingHours: { start: '08:00', end: '18:00' },
      lastConfigUpdate: new Date()
    },
    customer: {
      features: ['product_catalog', 'order_tracking', 'payments', 'wishlist'],
      theme: 'modern',
      paymentMethods: ['mobile_money', 'card', 'cash'],
      promotions: ['loyalty_points', 'seasonal_discounts'],
      restrictions: ['bulk_orders'],
      lastConfigUpdate: new Date()
    },
    supplier: {
      permissions: ['inventory_management', 'order_fulfillment', 'analytics_basic'],
      features: ['bulk_upload', 'order_management', 'delivery_tracking'],
      restrictions: ['financial_data', 'customer_data'],
      approvalRequired: true,
      lastConfigUpdate: new Date()
    }
  });

  // Real-time portal metrics
  const [portalMetrics, setPortalMetrics] = useState({
    manager: {
      sessionsToday: 3,
      averageSessionTime: '2h 15m',
      actionsPerformed: 47,
      reportsGenerated: 5,
      performance: 'excellent'
    },
    employee: {
      sessionsToday: 0,
      averageSessionTime: '0m',
      transactionsProcessed: 0,
      customersServed: 0,
      performance: 'not_active'
    },
    customer: {
      sessionsToday: 0,
      averageSessionTime: '0m',
      ordersPlaced: 0,
      pagesViewed: 0,
      performance: 'not_active'
    },
    supplier: {
      sessionsToday: 0,
      averageSessionTime: '0m',
      ordersProcessed: 0,
      inventoryUpdates: 0,
      performance: 'not_active'
    }
  });

  // Portal control commands
  const [availableCommands, setAvailableCommands] = useState([
    {
      id: 'broadcast_message',
      name: 'Broadcast Message',
      description: 'Send message to all active portals',
      icon: 'üì¢',
      category: 'communication'
    },
    {
      id: 'update_portal_config',
      name: 'Update Portal Configuration',
      description: 'Modify portal settings and features',
      icon: '‚öôÔ∏è',
      category: 'configuration'
    },
    {
      id: 'force_logout',
      name: 'Force User Logout',
      description: 'Remotely logout users from portals',
      icon: 'üö™',
      category: 'security'
    },
    {
      id: 'push_notification',
      name: 'Push Notification',
      description: 'Send real-time notifications',
      icon: 'üîî',
      category: 'communication'
    },
    {
      id: 'emergency_shutdown',
      name: 'Emergency Shutdown',
      description: 'Immediately disable portal access',
      icon: 'üö®',
      category: 'security'
    },
    {
      id: 'sync_data',
      name: 'Force Data Sync',
      description: 'Synchronize data across all portals',
      icon: 'üîÑ',
      category: 'data'
    },
    // üöÄ NEW ADVANCED COMMANDS
    {
      id: 'ai_optimization',
      name: 'AI Performance Optimization',
      description: 'Trigger AI-powered performance optimization',
      icon: 'ü§ñ',
      category: 'ai'
    },
    {
      id: 'security_scan',
      name: 'Security Vulnerability Scan',
      description: 'Run comprehensive security assessment',
      icon: 'üõ°Ô∏è',
      category: 'security'
    },
    {
      id: 'load_balancing',
      name: 'Dynamic Load Balancing',
      description: 'Redistribute traffic for optimal performance',
      icon: '‚öñÔ∏è',
      category: 'performance'
    },
    {
      id: 'backup_snapshot',
      name: 'Instant Backup Snapshot',
      description: 'Create immediate backup of all portal data',
      icon: 'üíæ',
      category: 'backup'
    },
    {
      id: 'predictive_analytics',
      name: 'Generate Predictive Analytics',
      description: 'Analyze trends and predict future portal usage',
      icon: 'üîÆ',
      category: 'analytics'
    },
    {
      id: 'video_conference',
      name: 'Start Emergency Conference',
      description: 'Initiate video call with all portal managers',
      icon: 'üìπ',
      category: 'communication'
    },
    {
      id: 'health_check',
      name: 'Comprehensive Health Check',
      description: 'Deep system diagnostics across all portals',
      icon: 'ü©∫',
      category: 'monitoring'
    },
    {
      id: 'auto_pilot_toggle',
      name: 'Toggle Auto-Pilot Mode',
      description: 'Enable/disable AI-powered automated management',
      icon: 'üöÅ',
      category: 'ai'
    },
    {
      id: 'geographic_routing',
      name: 'Optimize Geographic Routing',
      description: 'Route users to nearest servers based on location',
      icon: 'üåç',
      category: 'performance'
    },
    {
      id: 'disaster_recovery',
      name: 'Test Disaster Recovery',
      description: 'Simulate failure and test recovery protocols',
      icon: 'üÜò',
      category: 'backup'
    }
  ]);

  // Enhanced notifications functions
  const markNotificationAsRead = (id) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === id 
          ? { ...notification, unread: false }
          : notification
      )
    );
    setNotificationCount(prev => Math.max(0, prev - 1));
  };

  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, unread: false }))
    );
    setNotificationCount(0);
  };

  const deleteNotification = (id) => {
    setNotifications(prev => {
      const notification = prev.find(n => n.id === id);
      const newNotifications = prev.filter(n => n.id !== id);
      if (notification && notification.unread) {
        setNotificationCount(count => Math.max(0, count - 1));
      }
      return newNotifications;
    });
  };

  const handleNotificationAction = (notification) => {
    switch (notification.action) {
      case 'reorder':
        toast.success(`üîÑ Reorder request sent for ${notification.title.includes('iPhone') ? 'iPhone 15 Pro Max' : 'product'}`);
        break;
      case 'view_receipt':
        toast.info('üìß Receipt details opened');
        break;
      case 'approve_order':
        toast.success('‚úÖ Order approved successfully');
        break;
      case 'view_certificate':
        toast.info('üéì Certificate viewed');
        break;
      case 'update_schedule':
        toast.info('üìÖ Delivery schedule updated');
        break;
      default:
        toast.info('Action processed');
    }
    markNotificationAsRead(notification.id);
  };

  const getFilteredNotifications = () => {
    switch (notificationFilter) {
      case 'unread':
        return notifications.filter(n => n.unread);
      case 'urgent':
        return notifications.filter(n => n.priority === 'high');
      case 'recent':
        return notifications.filter(n => {
          const hourAgo = new Date(Date.now() - 60 * 60 * 1000);
          return n.timestamp > hourAgo;
        });
      default:
        return notifications;
    }
  };

  const addNewNotification = (type, title, message, category = 'general') => {
    const newNotification = {
      id: Date.now(),
      type,
      title,
      message,
      time: 'Just now',
      timestamp: new Date(),
      icon: type === 'urgent' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : 'üì¢',
      color: type === 'urgent' ? 'bg-red-100 text-red-800 border-red-200' : 
             type === 'success' ? 'bg-green-100 text-green-800 border-green-200' : 
             'bg-blue-100 text-blue-800 border-blue-200',
      unread: true,
      category,
      action: 'view_details',
      priority: type === 'urgent' ? 'high' : 'medium',
      ugandaContext: 'FAREDEAL Uganda'
    };
    
    setNotifications(prev => [newNotification, ...prev]);
    setNotificationCount(prev => prev + 1);
    toast.info(`üì¢ New notification: ${title}`);
  };

  // üöÄ REAL-TIME PORTAL CONTROL FUNCTIONS

  // Initialize WebSocket connections for portal control
  const initializePortalControl = useCallback(() => {
    try {
      // Simulate WebSocket connection (replace with actual WebSocket server)
      const wsUrl = import.meta.env?.VITE_WS_URL || 'ws://localhost:8080/portal-control';
      
      // Create WebSocket connection
      const ws = new WebSocket(wsUrl);
      
      ws.onopen = () => {
        console.log('üîó Portal Control WebSocket Connected');
        setPortalControlSystem(prev => ({
          ...prev,
          isConnected: true,
          wsConnections: { ...prev.wsConnections, manager: ws }
        }));
        
        // Send authentication and role information
        ws.send(JSON.stringify({
          type: 'auth',
          portal: 'manager',
          user: managerProfile.name,
          permissions: managerProfile.permissions,
          timestamp: new Date().toISOString()
        }));
        
        toast.success('üîó Portal Control System Connected');
      };
      
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          handlePortalMessage(data);
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error);
        }
      };
      
      ws.onclose = () => {
        console.log('üîå Portal Control WebSocket Disconnected');
        setPortalControlSystem(prev => ({
          ...prev,
          isConnected: false
        }));
        
        // Attempt reconnection after 5 seconds
        setTimeout(() => {
          console.log('üîÑ Attempting to reconnect Portal Control...');
          initializePortalControl();
        }, 5000);
      };
      
      ws.onerror = (error) => {
        console.error('‚ùå Portal Control WebSocket Error:', error);
        // Fallback to simulation mode
        initializeSimulatedPortalControl();
      };
      
      setWebSocketManager(ws);
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Portal Control:', error);
      // Fallback to simulation mode
      initializeSimulatedPortalControl();
    }
  }, [managerProfile]);

  // Fallback simulation mode for development
  const initializeSimulatedPortalControl = useCallback(() => {
    console.log('üîÑ Using Simulated Portal Control Mode');
    
    setPortalControlSystem(prev => ({
      ...prev,
      isConnected: true // Simulate connection
    }));
    
    // Simulate portal activities every 30 seconds
    const simulationInterval = setInterval(() => {
      simulatePortalActivity();
    }, 30000);
    
    // Simulate real-time updates every 10 seconds
    const updateInterval = setInterval(() => {
      updatePortalMetrics();
    }, 10000);
    
    // Cleanup function
    return () => {
      clearInterval(simulationInterval);
      clearInterval(updateInterval);
    };
  }, []);

  // Handle incoming portal messages
  const handlePortalMessage = useCallback((data) => {
    switch (data.type) {
      case 'portal_activity':
        updatePortalActivity(data);
        break;
      case 'user_login':
        handleUserLogin(data);
        break;
      case 'user_logout':
        handleUserLogout(data);
        break;
      case 'portal_status_update':
        updatePortalStatus(data);
        break;
      case 'transaction_alert':
        handleTransactionAlert(data);
        break;
      case 'system_alert':
        handleSystemAlert(data);
        break;
      default:
        console.log('üì• Unknown portal message type:', data.type);
    }
  }, []);

  // Update portal activity
  const updatePortalActivity = useCallback((data) => {
    const newActivity = {
      id: Date.now(),
      portal: data.portal,
      user: data.user,
      action: data.action,
      timestamp: new Date(data.timestamp),
      status: data.status || 'active',
      location: data.location || 'Unknown',
      device: data.device || 'Unknown'
    };
    
    setPortalActivities(prev => [newActivity, ...prev.slice(0, 49)]); // Keep last 50 activities
    
    // Update active portals
    setPortalControlSystem(prev => ({
      ...prev,
      activePortals: {
        ...prev.activePortals,
        [data.portal]: {
          ...prev.activePortals[data.portal],
          lastActivity: new Date(data.timestamp),
          status: 'online'
        }
      }
    }));
  }, []);

  // Handle user login to portals
  const handleUserLogin = useCallback((data) => {
    setPortalControlSystem(prev => ({
      ...prev,
      activePortals: {
        ...prev.activePortals,
        [data.portal]: {
          ...prev.activePortals[data.portal],
          activeUsers: (prev.activePortals[data.portal]?.activeUsers || 0) + 1,
          status: 'online',
          lastActivity: new Date()
        }
      },
      controlledMetrics: {
        ...prev.controlledMetrics,
        totalActiveUsers: prev.controlledMetrics.totalActiveUsers + 1
      }
    }));
    
    addNewNotification(
      'info',
      `User Login - ${data.portal.charAt(0).toUpperCase() + data.portal.slice(1)} Portal`,
      `${data.user} logged in from ${data.location || 'Unknown location'}`,
      'portal_activity'
    );
    
    toast.info(`üë§ ${data.user} logged into ${data.portal} portal`);
  }, []);

  // Handle user logout from portals
  const handleUserLogout = useCallback((data) => {
    setPortalControlSystem(prev => ({
      ...prev,
      activePortals: {
        ...prev.activePortals,
        [data.portal]: {
          ...prev.activePortals[data.portal],
          activeUsers: Math.max(0, (prev.activePortals[data.portal]?.activeUsers || 0) - 1),
          status: (prev.activePortals[data.portal]?.activeUsers || 0) <= 1 ? 'offline' : 'online',
          lastActivity: new Date()
        }
      },
      controlledMetrics: {
        ...prev.controlledMetrics,
        totalActiveUsers: Math.max(0, prev.controlledMetrics.totalActiveUsers - 1)
      }
    }));
    
    toast.info(`üëã ${data.user} logged out of ${data.portal} portal`);
  }, []);

  // Update portal status
  const updatePortalStatus = useCallback((data) => {
    setPortalControlSystem(prev => ({
      ...prev,
      activePortals: {
        ...prev.activePortals,
        [data.portal]: {
          ...prev.activePortals[data.portal],
          status: data.status,
          lastActivity: new Date()
        }
      }
    }));
  }, []);

  // Handle transaction alerts from portals
  const handleTransactionAlert = useCallback((data) => {
    setPortalControlSystem(prev => ({
      ...prev,
      controlledMetrics: {
        ...prev.controlledMetrics,
        totalTransactions: prev.controlledMetrics.totalTransactions + 1,
        realTimeRevenue: prev.controlledMetrics.realTimeRevenue + (data.amount || 0)
      }
    }));
    
    if (data.amount && data.amount > 100000) { // Alert for transactions above UGX 100k
      addNewNotification(
        'success',
        'Large Transaction Alert',
        `Transaction of UGX ${(data.amount / 1000).toFixed(0)}k processed in ${data.portal} portal`,
        'transaction'
      );
    }
  }, []);

  // Handle system alerts
  const handleSystemAlert = useCallback((data) => {
    addNewNotification(
      data.level || 'warning',
      `System Alert - ${data.portal.charAt(0).toUpperCase() + data.portal.slice(1)} Portal`,
      data.message,
      'system'
    );
  }, []);

  // Simulate portal activity for development
  const simulatePortalActivity = useCallback(() => {
    const portals = ['employee', 'customer', 'supplier'];
    const actions = [
      'Processed payment', 'Updated inventory', 'Served customer', 
      'Generated report', 'Placed order', 'Updated profile'
    ];
    const users = [
      'Sarah Nakato', 'John Mukasa', 'Grace Namukasa', 'Peter Kato',
      'Mary Nabirye', 'David Ssali', 'Ruth Namatovu', 'James Okello'
    ];
    
    const randomPortal = portals[Math.floor(Math.random() * portals.length)];
    const randomAction = actions[Math.floor(Math.random() * actions.length)];
    const randomUser = users[Math.floor(Math.random() * users.length)];
    
    // Simulate activity 30% of the time
    if (Math.random() < 0.3) {
      updatePortalActivity({
        portal: randomPortal,
        user: randomUser,
        action: randomAction,
        timestamp: new Date().toISOString(),
        location: 'Kampala, Uganda',
        device: 'Mobile Safari'
      });
    }
  }, [updatePortalActivity]);

  // Update portal metrics
  const updatePortalMetrics = useCallback(() => {
    setPortalMetrics(prev => {
      const newMetrics = { ...prev };
      
      // Simulate metric updates
      Object.keys(newMetrics).forEach(portal => {
        if (portalControlSystem.activePortals[portal]?.status === 'online') {
          newMetrics[portal] = {
            ...newMetrics[portal],
            sessionsToday: newMetrics[portal].sessionsToday + Math.floor(Math.random() * 2),
            actionsPerformed: (newMetrics[portal].actionsPerformed || 0) + Math.floor(Math.random() * 5),
            performance: Math.random() > 0.8 ? 'excellent' : Math.random() > 0.5 ? 'good' : 'average'
          };
        }
      });
      
      return newMetrics;
    });
  }, [portalControlSystem.activePortals]);

  // Send command to portal
  const sendPortalCommand = useCallback(async (command, targetPortal = 'all', params = {}) => {
    try {
      const message = {
        type: 'command',
        command: command.id,
        targetPortal,
        params,
        from: 'manager',
        user: managerProfile.name,
        timestamp: new Date().toISOString()
      };
      
      if (webSocketManager && webSocketManager.readyState === WebSocket.OPEN) {
        webSocketManager.send(JSON.stringify(message));
        toast.success(`üì° Command "${command.name}" sent to ${targetPortal} portal(s)`);
      } else {
        // Simulate command execution
        simulateCommandExecution(command, targetPortal, params);
        toast.success(`üîÑ Command "${command.name}" executed (simulated mode)`);
      }
      
      // Log the command
      updatePortalActivity({
        portal: 'manager',
        user: managerProfile.name,
        action: `Executed command: ${command.name}`,
        timestamp: new Date().toISOString(),
        location: 'Kampala, Uganda',
        device: 'Desktop Chrome'
      });
      
    } catch (error) {
      console.error('‚ùå Failed to send portal command:', error);
      toast.error(`‚ùå Failed to execute command: ${command.name}`);
    }
  }, [webSocketManager, managerProfile.name, updatePortalActivity]);

  // Simulate command execution for development
  const simulateCommandExecution = useCallback((command, targetPortal, params) => {
    switch (command.id) {
      case 'broadcast_message':
        addNewNotification('info', 'Broadcast Message Sent', `Message sent to ${targetPortal} portal(s): ${params.message}`, 'communication');
        break;
      case 'update_portal_config':
        addNewNotification('success', 'Portal Configuration Updated', `${targetPortal} portal configuration updated successfully`, 'configuration');
        break;
      case 'force_logout':
        addNewNotification('warning', 'Force Logout Executed', `Users in ${targetPortal} portal have been logged out`, 'security');
        break;
      case 'push_notification':
        addNewNotification('info', 'Push Notification Sent', `Notification pushed to ${targetPortal} portal(s)`, 'communication');
        break;
      case 'emergency_shutdown':
        addNewNotification('urgent', 'Emergency Shutdown Executed', `${targetPortal} portal access has been disabled`, 'security');
        break;
      case 'sync_data':
        addNewNotification('success', 'Data Synchronization Complete', `Data synced across ${targetPortal} portal(s)`, 'data');
        break;
      // üöÄ NEW ADVANCED COMMANDS
      case 'ai_optimization':
        toast.loading('ü§ñ AI optimizing system performance...');
        setTimeout(() => {
          toast.dismiss();
          toast.success('ü§ñ AI optimization complete! 23% performance improvement achieved');
          addNewNotification('success', 'AI Optimization Complete', `Performance improved by 23% across ${targetPortal} portal(s)`, 'ai');
        }, 3000);
        break;
      case 'security_scan':
        runSecurityScan();
        break;
      case 'load_balancing':
        optimizeLoadBalancing();
        break;
      case 'backup_snapshot':
        toast.loading('üíæ Creating instant backup snapshot...');
        setTimeout(() => {
          toast.dismiss();
          const backupId = `backup_${Date.now()}`;
          toast.success(`üíæ Backup snapshot created! ID: ${backupId}`);
          addNewNotification('success', 'Backup Snapshot Created', `Instant backup ${backupId} created for ${targetPortal} portal(s)`, 'backup');
          
          setPortalBackupSystem(prev => ({
            ...prev,
            backupStatus: {
              ...prev.backupStatus,
              lastBackup: new Date(),
              totalBackups: prev.backupStatus.totalBackups + 1
            }
          }));
        }, 2000);
        break;
      case 'predictive_analytics':
        generatePredictiveAnalytics();
        break;
      case 'video_conference':
        startEmergencyConference();
        break;
      case 'health_check':
        runHealthCheck();
        break;
      case 'auto_pilot_toggle':
        toggleAutoPilot();
        break;
      case 'geographic_routing':
        optimizeGeographicRouting();
        break;
      case 'disaster_recovery':
        testDisasterRecovery();
        break;
      default:
        addNewNotification('info', 'Command Executed', `${command.name} executed on ${targetPortal} portal(s)`, 'system');
    }
  }, []); // Removed dependencies that are defined later

  // Broadcast message to all portals
  const broadcastMessage = useCallback((message, priority = 'normal') => {
    const command = availableCommands.find(cmd => cmd.id === 'broadcast_message');
    sendPortalCommand(command, 'all', { message, priority });
  }, [availableCommands, sendPortalCommand]);

  // Initialize portal control on component mount
  useEffect(() => {
    const cleanup = initializePortalControl();
    
    return () => {
      if (webSocketManager) {
        webSocketManager.close();
      }
      if (cleanup && typeof cleanup === 'function') {
        cleanup();
      }
    };
  }, [initializePortalControl]);

  // ÔøΩ ADVANCED PORTAL CONTROL FUNCTIONS

  // AI-Powered Auto-Pilot System
  const toggleAutoPilot = useCallback(() => {
    setPortalAutoPilot(prev => {
      const newState = { ...prev, isEnabled: !prev.isEnabled };
      
      if (newState.isEnabled) {
        toast.success('ü§ñ AI Auto-Pilot System ACTIVATED');
        // Simulate AI taking control
        setTimeout(() => {
          addNewNotification(
            'success',
            'AI Auto-Pilot Active',
            'AI system is now monitoring and optimizing all portals automatically',
            'ai'
          );
        }, 1000);
      } else {
        toast.info('üë§ Manual Control Mode ACTIVATED');
        addNewNotification(
          'info',
          'Manual Control Active',
          'Portal management returned to manual control',
          'system'
        );
      }
      
      return newState;
    });
  }, []);

  // Advanced Security Monitoring
  const runSecurityScan = useCallback(async () => {
    toast.loading('üõ°Ô∏è Running comprehensive security scan...');
    
    // Simulate security scan
    setTimeout(() => {
      toast.dismiss();
      const scanResults = {
        vulnerabilities: Math.floor(Math.random() * 3),
        blockedThreats: Math.floor(Math.random() * 10 + 5),
        securityScore: 95 + Math.floor(Math.random() * 5),
        recommendations: [
          'Update SSL certificates',
          'Enable 2FA for all users',
          'Review access permissions'
        ]
      };
      
      setPortalSecurity(prev => ({
        ...prev,
        threatDetection: {
          ...prev.threatDetection,
          securityScore: scanResults.securityScore,
          blockedAttempts: prev.threatDetection.blockedAttempts + scanResults.blockedThreats
        },
        auditTrail: [...prev.auditTrail, {
          id: Date.now(),
          action: 'Security Scan Completed',
          timestamp: new Date(),
          results: scanResults
        }]
      }));
      
      toast.success(`üõ°Ô∏è Security scan complete! Score: ${scanResults.securityScore}/100`);
      
      if (scanResults.vulnerabilities > 0) {
        toast.warning(`‚ö†Ô∏è Found ${scanResults.vulnerabilities} potential vulnerabilities`);
      }
    }, 3000);
  }, []);

  // Dynamic Load Balancing
  const optimizeLoadBalancing = useCallback(() => {
    toast.info('‚öñÔ∏è Optimizing load distribution...');
    
    setTimeout(() => {
      const optimizationResults = {
        before: { cpu: 78, memory: 85, responseTime: 450 },
        after: { cpu: 52, memory: 67, responseTime: 320 },
        improvement: '28% performance increase'
      };
      
      setPortalPerformance(prev => ({
        ...prev,
        realTimeMetrics: {
          ...prev.realTimeMetrics,
          responseTime: {
            manager: prev.realTimeMetrics.responseTime.manager * 0.72,
            employee: prev.realTimeMetrics.responseTime.employee * 0.72,
            customer: prev.realTimeMetrics.responseTime.customer * 0.72,
            supplier: prev.realTimeMetrics.responseTime.supplier * 0.72
          }
        },
        optimizations: {
          ...prev.optimizations,
          cpuUtilization: optimizationResults.after.cpu,
          memoryUsage: optimizationResults.after.memory
        }
      }));
      
      toast.success(`‚öñÔ∏è Load balancing optimized! ${optimizationResults.improvement}`);
    }, 2000);
  }, []);

  // Predictive Analytics Generation
  const generatePredictiveAnalytics = useCallback(() => {
    toast.loading('üîÆ Generating predictive analytics...');
    
    setTimeout(() => {
      toast.dismiss();
      
      const predictions = {
        peakUsageForecasts: [
          { time: '2:00 PM', expectedUsers: 450, confidence: 92 },
          { time: '4:30 PM', expectedUsers: 380, confidence: 87 },
          { time: '7:00 PM', expectedUsers: 290, confidence: 94 }
        ],
        maintenanceRecommendations: [
          { portal: 'customer', action: 'Database cleanup', urgency: 'medium', impact: 'high' },
          { portal: 'employee', action: 'Cache refresh', urgency: 'low', impact: 'medium' }
        ],
        userBehaviorPredictions: {
          customerPortal: 'Increased mobile usage expected (+25%)',
          employeePortal: 'Peak transactions during lunch hours',
          supplierPortal: 'Morning inventory updates trend continuing'
        }
      };
      
      setPortalAnalytics(prev => ({
        ...prev,
        predictiveInsights: {
          ...prev.predictiveInsights,
          peakUsageForecasts: predictions.peakUsageForecasts,
          maintenanceRecommendations: predictions.maintenanceRecommendations,
          userBehaviorPredictions: predictions.userBehaviorPredictions
        }
      }));
      
      toast.success('üîÆ Predictive analytics generated successfully!');
      
      // Show key insights
      setTimeout(() => {
        toast.info(`üìä Key Insight: Next peak usage at ${predictions.peakUsageForecasts[0].time} with ${predictions.peakUsageForecasts[0].expectedUsers} users`);
      }, 1000);
    }, 4000);
  }, []);

  // Advanced Video Conference System
  const startEmergencyConference = useCallback(() => {
    toast.info('üìπ Starting emergency video conference...');
    
    const conferenceData = {
      id: `emergency-${Date.now()}`,
      participants: [
        'Catherine Nakiyonga (Manager)',
        'Sarah Nakato (Team Lead)',
        'John Mukasa (IT Support)',
        'Grace Namukasa (Customer Service)',
        'Peter Kato (Supplier Relations)'
      ],
      startTime: new Date(),
      urgency: 'high'
    };
    
    setPortalCommunication(prev => ({
      ...prev,
      videoCallSessions: [...prev.videoCallSessions, conferenceData],
      emergencyBroadcasts: [...prev.emergencyBroadcasts, {
        id: Date.now(),
        message: 'Emergency video conference initiated - All managers please join immediately',
        timestamp: new Date(),
        priority: 'critical'
      }]
    }));
    
    // Simulate opening video conference interface
    setTimeout(() => {
      const confirmed = confirm(`üìπ Emergency Conference Started!\n\nParticipants invited:\n${conferenceData.participants.join('\n')}\n\nJoin conference now?`);
      
      if (confirmed) {
        toast.success('üìπ Joining emergency conference...');
        // In a real app, this would open the video conference interface
        window.open('https://meet.faredeal.ug/emergency', '_blank');
      }
    }, 1500);
  }, []);

  // Comprehensive Health Check
  const runHealthCheck = useCallback(() => {
    toast.loading('ü©∫ Running comprehensive health check...');
    
    setTimeout(() => {
      toast.dismiss();
      
      const healthResults = {
        portals: {
          manager: { status: 'excellent', score: 98, issues: [] },
          employee: { status: 'good', score: 94, issues: ['Minor cache optimization needed'] },
          customer: { status: 'good', score: 91, issues: ['Database query optimization recommended'] },
          supplier: { status: 'excellent', score: 97, issues: [] }
        },
        infrastructure: {
          servers: 'healthy',
          database: 'optimal',
          network: 'excellent',
          storage: 'good'
        },
        overall: 95
      };
      
      toast.success(`ü©∫ Health check complete! Overall score: ${healthResults.overall}/100`);
      
      // Update performance metrics
      setPortalPerformance(prev => ({
        ...prev,
        recommendations: [
          ...prev.recommendations,
          { type: 'health', priority: 'info', description: `System health: ${healthResults.overall}/100` }
        ]
      }));
      
      // Show detailed results
      setTimeout(() => {
        const detailedReport = Object.entries(healthResults.portals)
          .map(([portal, data]) => `${portal}: ${data.score}/100 (${data.status})`)
          .join('\n');
        
        alert(`ü©∫ DETAILED HEALTH REPORT:\n\n${detailedReport}\n\nInfrastructure Status:\n‚Ä¢ Servers: ${healthResults.infrastructure.servers}\n‚Ä¢ Database: ${healthResults.infrastructure.database}\n‚Ä¢ Network: ${healthResults.infrastructure.network}\n‚Ä¢ Storage: ${healthResults.infrastructure.storage}`);
      }, 1000);
    }, 3500);
  }, []);

  // Geographic Routing Optimization
  const optimizeGeographicRouting = useCallback(() => {
    toast.info('üåç Optimizing geographic routing...');
    
    setTimeout(() => {
      const routingResults = {
        kampala: { latency: '12ms', improvement: '35%' },
        entebbe: { latency: '18ms', improvement: '42%' },
        jinja: { latency: '25ms', improvement: '28%' },
        mbale: { latency: '31ms', improvement: '38%' }
      };
      
      setPortalAnalytics(prev => ({
        ...prev,
        geographicDistribution: {
          kampala: { ...prev.geographicDistribution.kampala, performance: 'excellent' },
          entebbe: { ...prev.geographicDistribution.entebbe, performance: 'excellent' },
          jinja: { ...prev.geographicDistribution.jinja, performance: 'good' },
          mbale: { ...prev.geographicDistribution.mbale, performance: 'excellent' }
        }
      }));
      
      toast.success('üåç Geographic routing optimized! Average latency improved by 36%');
      
      setTimeout(() => {
        const regionDetails = Object.entries(routingResults)
          .map(([region, data]) => `${region.charAt(0).toUpperCase() + region.slice(1)}: ${data.latency} (${data.improvement} faster)`)
          .join('\n');
        
        toast.info(`üåç Regional Performance:\n${regionDetails}`);
      }, 1000);
    }, 2500);
  }, []);

  // Disaster Recovery Test
  const testDisasterRecovery = useCallback(() => {
    const confirmed = confirm('üÜò This will simulate a system failure and test recovery protocols.\n\nProceed with disaster recovery test?');
    
    if (!confirmed) return;
    
    toast.loading('üÜò Simulating system failure...');
    
    // Phase 1: Simulate failure
    setTimeout(() => {
      toast.dismiss();
      toast.error('‚ö†Ô∏è SIMULATED FAILURE: Primary data center offline');
      
      // Phase 2: Initiate recovery
      setTimeout(() => {
        toast.loading('üîÑ Initiating automatic failover...');
        
        setTimeout(() => {
          toast.dismiss();
          toast.success('‚úÖ Failover complete! Secondary systems online');
          
          const recoveryResults = {
            failoverTime: '47 seconds',
            dataLoss: '0 records',
            affectedUsers: '23 users (0.3%)',
            systemsRecovered: ['database', 'authentication', 'file storage'],
            backupLocation: 'Entebbe Data Center'
          };
          
          setPortalBackupSystem(prev => ({
            ...prev,
            disasterRecovery: {
              ...prev.disasterRecovery,
              testResults: 'successful',
              lastTest: new Date()
            }
          }));
          
          // Phase 3: Show results
          setTimeout(() => {
            const report = `üÜò DISASTER RECOVERY TEST RESULTS:\n\n‚úÖ Test Status: SUCCESSFUL\n‚è±Ô∏è Failover Time: ${recoveryResults.failoverTime}\nüíæ Data Loss: ${recoveryResults.dataLoss}\nüë• Affected Users: ${recoveryResults.affectedUsers}\nüè¢ Backup Location: ${recoveryResults.backupLocation}\n\nüîÑ Systems Recovered:\n${recoveryResults.systemsRecovered.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n‚úÖ All systems are now operating normally.`;
            
            alert(report);
            toast.success('üÜò Disaster recovery test completed successfully!');
          }, 1500);
        }, 3000);
      }, 2000);
    }, 1500);
  }, []);
  useEffect(() => {
    // Monitor portal health every 30 seconds
    const healthCheck = setInterval(() => {
      monitorPortalHealth();
    }, 30000);

    // Update metrics every 10 seconds
    const metricsUpdate = setInterval(() => {
      updateRealTimeMetrics();
    }, 10000);

    // Clean up intervals
    return () => {
      clearInterval(healthCheck);
      clearInterval(metricsUpdate);
    };
  }, []);

  // Monitor portal health and connectivity
  const monitorPortalHealth = useCallback(() => {
    // Simulate health checks for each portal
    Object.keys(portalControlSystem.activePortals).forEach(portalName => {
      const portal = portalControlSystem.activePortals[portalName];
      
      // Check if portal has been inactive for too long
      if (portal.lastActivity) {
        const timeSinceActivity = Date.now() - new Date(portal.lastActivity).getTime();
        const inactiveThreshold = 5 * 60 * 1000; // 5 minutes
        
        if (timeSinceActivity > inactiveThreshold && portal.status === 'online') {
          // Mark portal as potentially offline
          setPortalControlSystem(prev => ({
            ...prev,
            activePortals: {
              ...prev.activePortals,
              [portalName]: {
                ...prev.activePortals[portalName],
                status: 'idle'
              }
            }
          }));
          
          // Add health warning notification
          addNewNotification(
            'warning',
            `Portal Health Warning`,
            `${portalName.charAt(0).toUpperCase() + portalName.slice(1)} portal has been inactive for ${Math.round(timeSinceActivity / 60000)} minutes`,
            'health_check'
          );
        }
      }
    });

    // Update system health based on portal statuses
    const activePortalCount = Object.values(portalControlSystem.activePortals)
      .filter(portal => portal.status === 'online').length;
    
    let systemHealth = 'excellent';
    if (activePortalCount < 2) systemHealth = 'poor';
    else if (activePortalCount < 3) systemHealth = 'fair';
    else if (activePortalCount < 4) systemHealth = 'good';

    setPortalControlSystem(prev => ({
      ...prev,
      controlledMetrics: {
        ...prev.controlledMetrics,
        systemHealth
      }
    }));
  }, [portalControlSystem.activePortals, addNewNotification]);

  // Update real-time metrics across all portals
  const updateRealTimeMetrics = useCallback(() => {
    // Simulate real-time data updates
    const currentHour = new Date().getHours();
    const isBusinessHours = currentHour >= 8 && currentHour <= 18;
    
    // Generate realistic activity based on time
    const activityMultiplier = isBusinessHours ? 1.5 : 0.3;
    
    setPortalControlSystem(prev => ({
      ...prev,
      controlledMetrics: {
        ...prev.controlledMetrics,
        totalTransactions: prev.controlledMetrics.totalTransactions + Math.floor(Math.random() * 3 * activityMultiplier),
        realTimeRevenue: prev.controlledMetrics.realTimeRevenue + Math.floor(Math.random() * 50000 * activityMultiplier)
      }
    }));

    // Update individual portal metrics
    setPortalMetrics(prev => {
      const updated = { ...prev };
      
      Object.keys(updated).forEach(portalName => {
        if (portalControlSystem.activePortals[portalName]?.status === 'online') {
          // Simulate metric updates based on portal type
          const baseActivity = Math.floor(Math.random() * 5 * activityMultiplier);
          
          if (portalName === 'employee') {
            updated[portalName] = {
              ...updated[portalName],
              transactionsProcessed: updated[portalName].transactionsProcessed + baseActivity,
              customersServed: updated[portalName].customersServed + Math.floor(baseActivity * 1.2)
            };
          } else if (portalName === 'customer') {
            updated[portalName] = {
              ...updated[portalName],
              ordersPlaced: updated[portalName].ordersPlaced + Math.floor(baseActivity * 0.8),
              pagesViewed: updated[portalName].pagesViewed + Math.floor(baseActivity * 3)
            };
          } else if (portalName === 'supplier') {
            updated[portalName] = {
              ...updated[portalName],
              ordersProcessed: updated[portalName].ordersProcessed + Math.floor(baseActivity * 0.5),
              inventoryUpdates: updated[portalName].inventoryUpdates + Math.floor(baseActivity * 0.7)
            };
          } else if (portalName === 'manager') {
            updated[portalName] = {
              ...updated[portalName],
              actionsPerformed: updated[portalName].actionsPerformed + baseActivity,
              reportsGenerated: updated[portalName].reportsGenerated + (Math.random() > 0.8 ? 1 : 0)
            };
          }
        }
      });
      
      return updated;
    });
  }, [portalControlSystem.activePortals]);

  // üì° PORTAL COMMUNICATION SYSTEM

  // Send targeted notifications to specific portals
  const sendPortalNotification = useCallback((targetPortal, notification) => {
    const message = {
      type: 'notification',
      targetPortal,
      notification: {
        id: Date.now(),
        title: notification.title,
        message: notification.message,
        priority: notification.priority || 'normal',
        category: notification.category || 'general',
        timestamp: new Date().toISOString(),
        from: 'manager',
        sender: managerProfile.name
      }
    };

    if (webSocketManager && webSocketManager.readyState === WebSocket.OPEN) {
      webSocketManager.send(JSON.stringify(message));
      toast.success(`üì¨ Notification sent to ${targetPortal} portal`);
    } else {
      // Simulate notification delivery
      addNewNotification(
        'info',
        'Notification Sent',
        `Notification "${notification.title}" sent to ${targetPortal} portal`,
        'communication'
      );
      toast.success(`üì¨ Notification sent to ${targetPortal} portal (simulated)`);
    }

    // Log the notification in portal activities
    updatePortalActivity({
      portal: 'manager',
      user: managerProfile.name,
      action: `Sent notification to ${targetPortal}: ${notification.title}`,
      timestamp: new Date().toISOString(),
      location: 'Kampala, Uganda',
      device: 'Desktop Chrome'
    });
  }, [webSocketManager, managerProfile.name, updatePortalActivity, addNewNotification]);

  // Broadcast emergency alerts to all portals
  const broadcastEmergencyAlert = useCallback((alert) => {
    const emergencyMessage = {
      type: 'emergency_alert',
      targetPortal: 'all',
      alert: {
        id: Date.now(),
        title: alert.title,
        message: alert.message,
        level: 'critical',
        timestamp: new Date().toISOString(),
        from: 'manager',
        sender: managerProfile.name,
        requiresAcknowledgment: true
      }
    };

    if (webSocketManager && webSocketManager.readyState === WebSocket.OPEN) {
      webSocketManager.send(JSON.stringify(emergencyMessage));
      toast.error(`üö® Emergency alert broadcasted to all portals`);
    } else {
      // Simulate emergency alert
      addNewNotification(
        'urgent',
        'Emergency Alert Sent',
        `Emergency alert "${alert.title}" broadcasted to all portals`,
        'emergency'
      );
      toast.error(`üö® Emergency alert broadcasted (simulated)`);
    }

    // Log emergency action
    updatePortalActivity({
      portal: 'manager',
      user: managerProfile.name,
      action: `üö® EMERGENCY ALERT: ${alert.title}`,
      timestamp: new Date().toISOString(),
      location: 'Kampala, Uganda',
      device: 'Desktop Chrome'
    });
  }, [webSocketManager, managerProfile.name, updatePortalActivity, addNewNotification]);

  // Real-time configuration updates
  const updatePortalConfiguration = useCallback((portalName, configUpdates) => {
    const configMessage = {
      type: 'config_update',
      targetPortal: portalName,
      updates: {
        ...configUpdates,
        timestamp: new Date().toISOString(),
        updatedBy: managerProfile.name
      }
    };

    if (webSocketManager && webSocketManager.readyState === WebSocket.OPEN) {
      webSocketManager.send(JSON.stringify(configMessage));
      toast.success(`‚öôÔ∏è Configuration updated for ${portalName} portal`);
    } else {
      // Simulate configuration update
      setPortalConfigs(prev => ({
        ...prev,
        [portalName]: {
          ...prev[portalName],
          ...configUpdates,
          lastConfigUpdate: new Date()
        }
      }));
      
      addNewNotification(
        'success',
        'Portal Configuration Updated',
        `${portalName.charAt(0).toUpperCase() + portalName.slice(1)} portal configuration updated successfully`,
        'configuration'
      );
      toast.success(`‚öôÔ∏è Configuration updated for ${portalName} portal (simulated)`);
    }

    // Log configuration change
    updatePortalActivity({
      portal: 'manager',
      user: managerProfile.name,
      action: `Updated ${portalName} portal configuration: ${Object.keys(configUpdates).join(', ')}`,
      timestamp: new Date().toISOString(),
      location: 'Kampala, Uganda',
      device: 'Desktop Chrome'
    });
  }, [webSocketManager, managerProfile.name, updatePortalActivity, addNewNotification]);

  // Portal analytics and control features
  const generatePortalAnalytics = useCallback((portalName = 'all', timeRange = '24h') => {
    const analytics = {
      portalName,
      timeRange,
      generatedAt: new Date().toISOString(),
      metrics: {},
      insights: [],
      recommendations: []
    };

    if (portalName === 'all') {
      // Generate analytics for all portals
      analytics.metrics = {
        totalActiveUsers: portalControlSystem.controlledMetrics.totalActiveUsers,
        totalTransactions: portalControlSystem.controlledMetrics.totalTransactions,
        systemHealth: portalControlSystem.controlledMetrics.systemHealth,
        portalsOnline: Object.values(portalControlSystem.activePortals)
          .filter(portal => portal.status === 'online').length,
        averageResponseTime: '1.2s',
        errorRate: '0.03%'
      };

      analytics.insights = [
        'Customer portal shows highest engagement during business hours',
        'Employee portal transactions peak between 2-4 PM',
        'Supplier portal most active during morning hours',
        'System performance excellent across all portals'
      ];

      analytics.recommendations = [
        'Consider increasing server capacity during peak hours',
        'Implement automated customer service features',
        'Add more payment options for customers',
        'Optimize supplier portal for mobile devices'
      ];
    } else {
      // Generate analytics for specific portal
      const portalData = portalMetrics[portalName];
      analytics.metrics = { ...portalData };
      
      analytics.insights = [
        `${portalName} portal handled ${portalData.sessionsToday} sessions today`,
        `Average session duration: ${portalData.averageSessionTime}`,
        `Performance rating: ${portalData.performance}`
      ];

      analytics.recommendations = [
        `Optimize ${portalName} portal for better performance`,
        'Consider adding more features based on user behavior',
        'Implement better user onboarding'
      ];
    }

    // Save analytics (in real app, this would go to database)
    localStorage.setItem(`portal_analytics_${portalName}_${Date.now()}`, JSON.stringify(analytics));
    
    toast.success(`üìä Analytics generated for ${portalName} portal(s)`);
    return analytics;
  }, [portalControlSystem, portalMetrics]);

  // Portal control dashboard helper functions
  const getPortalStatusColor = (status) => {
    switch (status) {
      case 'online': return 'text-green-600';
      case 'offline': return 'text-red-600';
      case 'idle': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  const getPortalStatusIcon = (status) => {
    switch (status) {
      case 'online': return 'üü¢';
      case 'offline': return 'üî¥';
      case 'idle': return 'üü°';
      default: return '‚ö™';
    }
  };

  const formatPortalMetric = (value, type) => {
    if (typeof value === 'number') {
      if (type === 'currency') {
        return `UGX ${(value / 1000).toFixed(0)}k`;
      } else if (type === 'percentage') {
        return `${value.toFixed(1)}%`;
      } else {
        return value.toLocaleString();
      }
    }
    return value;
  };

  // Enhanced Export Report Function with Real File Generation
  const handleExportReport = async (report, format) => {
    // Set exporting state
    setExportingFormat(format);
    
    const formatMessages = {
      pdf: `üìÑ Generating PDF for ${report.name}...`,
      excel: `üìä Preparing Excel file for ${report.name}...`,
      csv: `üìã Creating CSV file for ${report.name}...`,
      word: `üìù Generating Word document for ${report.name}...`,
      email: `üìß Sending ${report.name} via email...`,
      sms: `üí¨ Sending SMS summary of ${report.name}...`,
      whatsapp: `üì± Sharing ${report.name} via WhatsApp...`,
      print: `üñ®Ô∏è Preparing ${report.name} for printing...`
    };

    toast.loading(formatMessages[format]);
    
    // Real WhatsApp API Integration
  const sendWhatsAppMessage = async (phoneNumber, message, mediaUrl = null) => {
    try {
      // WhatsApp Business API Configuration
      const WHATSAPP_API_URL = 'https://graph.facebook.com/v18.0/YOUR_PHONE_NUMBER_ID/messages';
      const ACCESS_TOKEN = import.meta.env?.VITE_WHATSAPP_ACCESS_TOKEN || 'YOUR_ACCESS_TOKEN';
      
      const payload = {
        messaging_product: "whatsapp",
        to: phoneNumber,
        type: mediaUrl ? "document" : "text",
        ...(mediaUrl ? {
          document: {
            link: mediaUrl,
            caption: message,
            filename: `FAREDEAL_Report_${Date.now()}.pdf`
          }
        } : {
          text: { body: message }
        })
      };

      const response = await fetch(WHATSAPP_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${ACCESS_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      const result = await response.json();
      
      if (response.ok) {
        return { success: true, messageId: result.messages[0].id };
      } else {
        throw new Error(result.error?.message || 'Failed to send message');
      }
    } catch (error) {
      console.error('WhatsApp API Error:', error);
      // Fallback to web WhatsApp
      return { success: false, error: error.message, fallback: true };
    }
  };

  // Real Email API Integration
  const sendEmailReport = async (recipients, subject, htmlContent, attachments = []) => {
    try {
      // EmailJS or custom email service configuration
      const EMAIL_SERVICE_URL = 'https://api.emailjs.com/api/v1.0/email/send';
      const SERVICE_ID = import.meta.env?.VITE_EMAILJS_SERVICE_ID || 'YOUR_SERVICE_ID';
      const TEMPLATE_ID = import.meta.env?.VITE_EMAILJS_TEMPLATE_ID || 'YOUR_TEMPLATE_ID';
      const PUBLIC_KEY = import.meta.env?.VITE_EMAILJS_PUBLIC_KEY || 'YOUR_PUBLIC_KEY';

      // Alternative: SMTP.js or custom backend API
      const emailData = {
        service_id: SERVICE_ID,
        template_id: TEMPLATE_ID,
        user_id: PUBLIC_KEY,
        template_params: {
          to_email: recipients.join(','),
          subject: subject,
          html_content: htmlContent,
          from_name: 'FAREDEAL Uganda Business Intelligence',
          from_email: 'reports@faredeal.ug',
          reply_to: 'manager@faredeal.ug'
        }
      };

      // Add attachments if supported
      if (attachments.length > 0) {
        emailData.template_params.attachments = attachments;
      }

      const response = await fetch(EMAIL_SERVICE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(emailData)
      });

      if (response.ok) {
        return { success: true, messageId: `email_${Date.now()}` };
      } else {
        throw new Error('Email service unavailable');
      }
    } catch (error) {
      console.error('Email API Error:', error);
      // Fallback to mailto
      return { success: false, error: error.message, fallback: true };
    }
  };

  // Native device sharing (for mobile/PWA)
  const shareViaNativeAPI = async (data) => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `FAREDEAL ${data.reportName}`,
          text: data.content,
          url: data.url || window.location.href
        });
        return { success: true, method: 'native' };
      } catch (error) {
        console.error('Native sharing error:', error);
        return { success: false, error: error.message };
      }
    }
    return { success: false, error: 'Native sharing not supported' };
  };

  // WhatsApp Web Integration with real connectivity
  const shareViaWhatsAppWeb = (phoneNumber, message, file = null) => {
    // Clean phone number (remove non-digits)
    const cleanPhone = phoneNumber.replace(/\D/g, '');
    
    if (file) {
      // Create shareable file URL
      const fileUrl = URL.createObjectURL(file);
      const downloadLink = document.createElement('a');
      downloadLink.href = fileUrl;
      downloadLink.download = file.name;
      downloadLink.click();
      
      // Enhanced message with file reference
      const fileMessage = `${message}\n\nüìé File: ${file.name}\nüíæ Size: ${(file.size / 1024).toFixed(1)} KB\n\n*Please attach the downloaded file to complete sharing*`;
      
      setTimeout(() => {
        window.open(`https://wa.me/${cleanPhone}?text=${encodeURIComponent(fileMessage)}`, '_blank');
      }, 1000);
    } else {
      window.open(`https://wa.me/${cleanPhone}?text=${encodeURIComponent(message)}`, '_blank');
    }
  };

  // Email client integration with real attachments
  const composeEmailWithAttachment = (recipients, subject, body, attachment = null) => {
    if (attachment) {
      // Create downloadable attachment
      const attachmentUrl = URL.createObjectURL(attachment);
      const downloadLink = document.createElement('a');
      downloadLink.href = attachmentUrl;
      downloadLink.download = attachment.name;
      downloadLink.click();
      
      // Enhanced email body with attachment reference
      const attachmentBody = `${body}\n\nüìé ATTACHMENT INCLUDED\nFile: ${attachment.name}\nSize: ${(attachment.size / 1024).toFixed(1)} KB\n\n*The file has been downloaded to your device. Please attach it to this email.*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
      
      setTimeout(() => {
        window.open(`mailto:${recipients.join(',')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(attachmentBody)}`, '_blank');
      }, 1000);
    } else {
      window.open(`mailto:${recipients.join(',')}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`, '_blank');
    }
  };

  // Create downloadable file blob for sharing
    const createReportFile = (fileFormat = 'txt') => {
      const reportData = {
        timestamp: new Date().toISOString(),
        reportName: report.name,
        metadata: {
          totalRevenue: realTimeData.financial.totalRevenue,
          totalCustomers: realTimeData.sales.customerMetrics.totalCustomers,
          generatedBy: user?.name || 'System Manager',
          regions: ['Kampala', 'Entebbe', 'Jinja', 'Mbale']
        },
        realTimeData: realTimeData
      };

      let fileContent, mimeType, fileName;
      
      switch (fileFormat) {
        case 'json':
          fileContent = JSON.stringify(reportData, null, 2);
          mimeType = 'application/json';
          fileName = `FAREDEAL_Report_${report.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.json`;
          break;
        case 'csv':
          const csvData = [
            ['Metric', 'Value', 'Category', 'Region'],
            ['Total Revenue', `UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M`, 'Financial', 'Uganda'],
            ['Monthly Revenue', `UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M`, 'Financial', 'Uganda'],
            ['Profit Margin', `${realTimeData.financial.profitMargin}%`, 'Financial', 'Uganda'],
            ['Kampala Sales', `UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M`, 'Sales', 'Kampala'],
            ['Entebbe Sales', `UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M`, 'Sales', 'Entebbe'],
            ['Total Customers', realTimeData.sales.customerMetrics.totalCustomers, 'Customer', 'Uganda'],
            ...realTimeData.sales.topProducts.slice(0, 5).map((product, index) => 
              [`Top Product ${index + 1}`, `${product.name} - UGX ${(product.sales / 1000000).toFixed(1)}M`, 'Product', 'Uganda']
            )
          ];
          fileContent = csvData.map(row => row.join(',')).join('\n');
          mimeType = 'text/csv';
          fileName = `FAREDEAL_Report_${report.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`;
          break;
        default:
          fileContent = `FAREDEAL UGANDA BUSINESS REPORT
${'='.repeat(50)}
Report: ${report.name}
Generated: ${new Date().toLocaleString('en-UG')}
Manager: ${user?.name || 'System Manager'}

REAL-TIME METRICS (Uganda Operations)
Financial Performance:
‚Ä¢ Total Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
‚Ä¢ Monthly Revenue: UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M
‚Ä¢ Profit Margin: ${realTimeData.financial.profitMargin}%

Regional Performance:
‚Ä¢ Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.kampala?.growth}%)
‚Ä¢ Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.entebbe?.growth}%)

Top Products:
${realTimeData.sales.topProducts.slice(0, 3).map((product, index) => 
  `${index + 1}. ${product.name}: UGX ${(product.sales / 1000000).toFixed(1)}M`).join('\n')}

Generated by FAREDEAL Uganda Manager Portal
Contact: support@faredeal.ug | +256-700-123456`;
          mimeType = 'text/plain';
          fileName = `FAREDEAL_Report_${report.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
      }

      const blob = new Blob([fileContent], { type: mimeType });
      return { blob, fileName, fileContent, url: URL.createObjectURL(blob) };
    };

    // Generate shareable link with temporary file hosting simulation
    const generateShareableLink = () => {
      const reportId = Date.now().toString(36) + Math.random().toString(36).substr(2);
      const shareableData = {
        id: reportId,
        reportName: report.name,
        timestamp: new Date().toISOString(),
        data: {
          financial: realTimeData.financial,
          sales: realTimeData.sales,
          inventory: realTimeData.inventory
        },
        metadata: {
          generatedBy: user?.name || 'System Manager',
          region: 'Uganda',
          businessUnit: 'FAREDEAL'
        }
      };
      
      // Store report data locally (simulate cloud storage)
      localStorage.setItem(`faredeal_report_${reportId}`, JSON.stringify(shareableData));
      
      // Create shareable URL
      const shareableUrl = `https://portal.faredeal.ug/shared-reports/${reportId}`;
      
      return { url: shareableUrl, id: reportId, data: shareableData };
    };
    
    // Generate actual file content based on format
    const generateFileContent = () => {
      const reportData = generatedReportData || {
        generatedAt: new Date().toLocaleString('en-UG'),
        summary: {
          totalRevenue: 'UGX 2,450,000,000',
          totalCustomers: '15,847',
          totalOrders: '42,156',
          growthRate: '+23.5%'
        }
      };

      switch(format) {
        case 'pdf':
          return generatePDFContent(report, reportData);
        case 'excel':
          return generateExcelContent(report, reportData);
        case 'csv':
          return generateCSVContent(report, reportData);
        case 'word':
          return generateWordContent(report, reportData);
        default:
          return generateTextContent(report, reportData);
      }
    };

    // File generation functions
    const generatePDFContent = (report, data) => {
      // Create a simplified PDF-like text content
      return `
FAREDEAL UGANDA - ${report.name.toUpperCase()}
Generated: ${data.generatedAt}
================================================

EXECUTIVE SUMMARY
- Total Revenue: ${data.summary?.totalRevenue || 'N/A'}
- Total Customers: ${data.summary?.totalCustomers || 'N/A'}
- Total Orders: ${data.summary?.totalOrders || 'N/A'}
- Growth Rate: ${data.summary?.growthRate || 'N/A'}

${data.regionalData ? `
REGIONAL PERFORMANCE
${Object.entries(data.regionalData).map(([region, regionData]) => 
  `${region.toUpperCase()}: Revenue: ${regionData.revenue}, Customers: ${regionData.customers}`
).join('\n')}
` : ''}

${data.topProducts ? `
TOP PRODUCTS
${data.topProducts.map(product => 
  `- ${product.name}: ${product.sales} (${product.units} units)`
).join('\n')}
` : ''}

Report generated by FAREDEAL Manager Portal
Contact: support@faredeal.ug | +256-700-123456
      `;
    };

    const generateExcelContent = (report, data) => {
      // Create CSV format that can be opened in Excel
      let content = `FAREDEAL UGANDA,${report.name}\n`;
      content += `Generated,${data.generatedAt}\n\n`;
      content += `SUMMARY\n`;
      content += `Metric,Value\n`;
      if (data.summary) {
        content += `Total Revenue,${data.summary.totalRevenue}\n`;
        content += `Total Customers,${data.summary.totalCustomers}\n`;
        content += `Total Orders,${data.summary.totalOrders}\n`;
        content += `Growth Rate,${data.summary.growthRate}\n`;
      }
      
      if (data.regionalData) {
        content += `\nREGIONAL DATA\n`;
        content += `Region,Revenue,Customers,Orders\n`;
        Object.entries(data.regionalData).forEach(([region, regionData]) => {
          content += `${region},${regionData.revenue},${regionData.customers},${regionData.orders}\n`;
        });
      }
      
      return content;
    };

    const generateCSVContent = (report, data) => {
      return generateExcelContent(report, data); // Same format as Excel
    };

    const generateWordContent = (report, data) => {
      return generatePDFContent(report, data); // Same content as PDF
    };

    const generateTextContent = (report, data) => {
      return generatePDFContent(report, data); // Same content as PDF
    };

    // Download file function
    const downloadFile = (content, filename, mimeType) => {
      const blob = new Blob([content], { type: mimeType });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    };

    // Process export after delay
    setTimeout(() => {
      toast.dismiss();
      setExportingFormat(null); // Clear exporting state
      
      const timestamp = new Date().toISOString().slice(0, 10);
      const sanitizedReportName = report.name.replace(/[^a-zA-Z0-9]/g, '_');
      
      switch(format) {
        case 'pdf':
          const pdfContent = generateFileContent();
          downloadFile(pdfContent, `${sanitizedReportName}_${timestamp}.txt`, 'text/plain');
          toast.success(`üìÑ ${report.name} PDF downloaded successfully!`);
          break;
          
        case 'excel':
          const excelContent = generateFileContent();
          downloadFile(excelContent, `${sanitizedReportName}_${timestamp}.csv`, 'text/csv');
          toast.success(`ÔøΩ ${report.name} Excel file downloaded!`);
          break;
          
        case 'csv':
          const csvContent = generateFileContent();
          downloadFile(csvContent, `${sanitizedReportName}_${timestamp}.csv`, 'text/csv');
          toast.success(`üìã ${report.name} CSV file downloaded!`);
          break;
          
        case 'word':
          const wordContent = generateFileContent();
          downloadFile(wordContent, `${sanitizedReportName}_${timestamp}.txt`, 'text/plain');
          toast.success(`üìù ${report.name} Word document downloaded!`);
          break;
          
        case 'email':
          // Enhanced email functionality with file attachments and real connectivity
          const emailOptions = [
            {
              name: 'Professional Report Email',
              description: 'Complete report with file attachment',
              icon: 'üìä'
            },
            {
              name: 'Executive Summary',
              description: 'Brief summary for management',
              icon: 'üìã'
            },
            {
              name: 'Team Notification',
              description: 'Alert team with key metrics',
              icon: 'üì¢'
            },
            {
              name: 'Automated Report API',
              description: 'Send via email service integration',
              icon: 'ü§ñ'
            }
          ];
          
          const emailChoice = prompt(`üìß Choose email type:\n\n${emailOptions.map((option, index) => 
            `${index + 1}. ${option.icon} ${option.name}\n   ${option.description}`
          ).join('\n\n')}\n\nEnter 1-4:`);
          
          const emailIndex = parseInt(emailChoice) - 1;
          
          if (emailIndex >= 0 && emailIndex < emailOptions.length) {
            switch (emailIndex) {
              case 0: // Professional Report Email
                // Create file attachment
                const fileFormat = prompt(`üìé Choose attachment format:\n\n1. CSV Spreadsheet (.csv)\n2. JSON Data (.json)\n3. Text Report (.txt)\n\nEnter 1-3:`) || '1';
                const formatMap = { '1': 'csv', '2': 'json', '3': 'txt' };
                const selectedFormat = formatMap[fileFormat] || 'csv';
                const attachmentFile = createReportFile(selectedFormat);
                
                // Create download link for attachment
                const downloadLink = document.createElement('a');
                downloadLink.href = attachmentFile.url;
                downloadLink.download = attachmentFile.fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                // Enhanced email content
                const emailSubject = encodeURIComponent(`üìä FAREDEAL Uganda Business Report: ${report.name} - ${new Date().toLocaleDateString('en-UG')}`);
                const professionalEmailBody = encodeURIComponent(`Dear FAREDEAL Uganda Team,

I hope this email finds you well. Please find the comprehensive ${report.name} for our Uganda operations attached to this email.

üìà EXECUTIVE SUMMARY
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Generated: ${new Date().toLocaleString('en-UG')}
Report Period: ${reportDateRange || 'Current Period'}
Generated By: ${user?.name || 'System Manager'}

üí∞ KEY FINANCIAL PERFORMANCE INDICATORS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Total Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
‚Ä¢ Monthly Revenue: UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M
‚Ä¢ Profit Margin: ${realTimeData.financial.profitMargin}%
‚Ä¢ Operating Costs: UGX ${(realTimeData.financial.operatingCosts / 1000000).toFixed(1)}M
‚Ä¢ Revenue Growth: ${realTimeData.sales.growthRate}%

üá∫üá¨ REGIONAL PERFORMANCE ANALYSIS (Uganda Market)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Kampala Region: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.kampala?.growth}%)
‚Ä¢ Entebbe Region: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.entebbe?.growth}%)
‚Ä¢ Jinja Region: UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.jinja?.growth}%)
‚Ä¢ Mbale Region: UGX ${(realTimeData.sales.regionalPerformance.mbale?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.mbale?.growth}%)

üë• CUSTOMER ANALYTICS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Total Active Customers: ${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}
‚Ä¢ New Customer Acquisitions: ${realTimeData.sales.customerMetrics.newCustomers}
‚Ä¢ Customer Satisfaction Rating: ${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0
‚Ä¢ Customer Retention Rate: ${realTimeData.sales.customerMetrics.retentionRate}%

üì± TOP PERFORMING PRODUCTS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${realTimeData.sales.topProducts.slice(0, 5).map((product, index) => 
  `${index + 1}. ${product.name}
   Sales Volume: UGX ${(product.sales / 1000000).toFixed(1)}M
   Units Sold: ${product.units?.toLocaleString()}
   Market Share: ${((product.sales / realTimeData.financial.totalRevenue) * 100).toFixed(1)}%`
).join('\n\n')}

üìä INVENTORY STATUS OVERVIEW
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Total Products in Catalog: ${realTimeData.inventory.totalProducts?.toLocaleString()}
‚Ä¢ Low Stock Alert Items: ${realTimeData.inventory.lowStockItems}
‚Ä¢ Out of Stock Items: ${realTimeData.inventory.outOfStock}
‚Ä¢ Inventory Turnover Rate: ${realTimeData.inventory.turnoverRate}x annually

ÔøΩ ATTACHMENT DETAILS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
File Name: ${attachmentFile.fileName}
File Format: ${selectedFormat.toUpperCase()}
File Size: ${(attachmentFile.blob.size / 1024).toFixed(1)} KB
Contains: Detailed analytics data for further analysis

üîó ADDITIONAL RESOURCES
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä Live Dashboard: https://portal.faredeal.ug/manager
üì± Mobile Portal: Download FAREDEAL Manager App
üìà Analytics Suite: https://analytics.faredeal.ug
üìã Previous Reports: https://portal.faredeal.ug/reports/archive

üéØ RECOMMENDED ACTIONS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. Review regional performance variations
2. Analyze top product success factors
3. Address inventory optimization opportunities
4. Implement customer retention strategies
5. Schedule quarterly performance review meeting

üìû CONTACT INFORMATION
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
FAREDEAL Uganda Headquarters
üìç Address: Kampala Business District, Uganda
‚òéÔ∏è Phone: +256-700-123456
üìß Email: support@faredeal.ug
üåê Website: www.faredeal.ug

For technical support regarding this report:
üìß Technical Team: tech@faredeal.ug
üìû IT Helpdesk: +256-700-654321

This report contains confidential business information. Please ensure secure handling and authorized distribution only.

Best regards,
${user?.name || 'System Manager'}
FAREDEAL Uganda Business Intelligence Team

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
¬© ${new Date().getFullYear()} FAREDEAL Uganda. All rights reserved.
This is an automated report generated by FAREDEAL Manager Portal.
Report ID: ${Date.now()}-UG-${Math.random().toString(36).substr(2, 9).toUpperCase()}
                `);
                
                // Email recipients selection
                const recipients = prompt(`üìß Send to:\n\n1. Executive Team (CEO, CFO, Operations)\n2. Regional Managers\n3. Finance Department\n4. Custom Recipients\n5. All Departments\n\nChoose 1-5:`);
                
                let emailRecipients = '';
                switch(recipients) {
                  case '1':
                    emailRecipients = 'ceo@faredeal.ug,cfo@faredeal.ug,operations@faredeal.ug';
                    break;
                  case '2':
                    emailRecipients = 'kampala.manager@faredeal.ug,entebbe.manager@faredeal.ug,jinja.manager@faredeal.ug';
                    break;
                  case '3':
                    emailRecipients = 'finance@faredeal.ug,accounting@faredeal.ug,nakiyonga.catherine@faredeal.ug';
                    break;
                  case '4':
                    emailRecipients = prompt('Enter email addresses (comma separated):') || 'manager@faredeal.ug';
                    break;
                  case '5':
                    emailRecipients = 'team@faredeal.ug,all@faredeal.ug';
                    break;
                  default:
                    emailRecipients = 'nakiyonga.catherine@faredeal.ug,manager@faredeal.ug';
                }
                
                const professionalMailtoLink = `mailto:${emailRecipients}?subject=${emailSubject}&body=${professionalEmailBody}`;
                window.open(professionalMailtoLink, '_blank');
                
                toast.success(`üìß Professional report email prepared!\nüìé Attachment: ${attachmentFile.fileName}\n‚úâÔ∏è Recipients: ${emailRecipients.split(',').length} contacts`);
                
                setTimeout(() => {
                  toast.info(`üí° Pro Tip: The file "${attachmentFile.fileName}" has been downloaded. Attach it to your email for complete data sharing!`);
                }, 3000);
                break;
                
              case 1: // Executive Summary
                const executiveSummary = encodeURIComponent(`EXECUTIVE SUMMARY - ${report.name}

üìä UGANDA OPERATIONS OVERVIEW
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ PERFORMANCE HIGHLIGHTS
‚Ä¢ Revenue Achievement: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
‚Ä¢ Growth Trajectory: ${realTimeData.sales.growthRate > 0 ? '+' : ''}${realTimeData.sales.growthRate}%
‚Ä¢ Customer Satisfaction: ${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0 ‚≠ê
‚Ä¢ Market Position: Leading in ${realTimeData.sales.regionalPerformance.kampala?.sales > realTimeData.sales.regionalPerformance.entebbe?.sales ? 'Kampala' : 'Entebbe'}

üî• KEY ACHIEVEMENTS
‚Ä¢ Monthly Revenue: UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M
‚Ä¢ Customer Base: ${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()} active users
‚Ä¢ Regional Expansion: 4 major markets (Kampala, Entebbe, Jinja, Mbale)
‚Ä¢ Product Portfolio: ${realTimeData.inventory.totalProducts?.toLocaleString()} items

‚ö° IMMEDIATE INSIGHTS
‚úÖ Kampala leading with UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M
‚úÖ Customer retention at ${realTimeData.sales.customerMetrics.retentionRate}%
‚úÖ Top product: ${realTimeData.sales.topProducts[0]?.name} (UGX ${(realTimeData.sales.topProducts[0]?.sales / 1000000).toFixed(1)}M)
${realTimeData.inventory.lowStockItems > 0 ? '‚ö†Ô∏è ' + realTimeData.inventory.lowStockItems + ' items need restocking' : '‚úÖ Inventory levels optimal'}

üìà NEXT STEPS
1. Continue momentum in high-performing regions
2. Address inventory optimization
3. Enhance customer experience initiatives

Report Generated: ${new Date().toLocaleString('en-UG')}
Dashboard: portal.faredeal.ug

Best regards,
FAREDEAL Uganda Leadership Team`);
                
                const execSubject = encodeURIComponent(`üìà Executive Brief: Uganda Operations Performance Summary`);
                const execMailto = `mailto:ceo@faredeal.ug,cfo@faredeal.ug,board@faredeal.ug?subject=${execSubject}&body=${executiveSummary}`;
                window.open(execMailto, '_blank');
                toast.success(`ÔøΩ Executive summary email prepared for leadership team!`);
                break;
                
              case 2: // Team Notification
                const teamNotification = encodeURIComponent(`üîî TEAM UPDATE: ${report.name}

Hi FAREDEAL Uganda Team! üëã

Here's our latest performance snapshot:

üí∞ FINANCIAL UPDATE
Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
Growth: ${realTimeData.sales.growthRate > 0 ? 'üìà +' : 'üìâ '}${realTimeData.sales.growthRate}%
Profit Margin: ${realTimeData.financial.profitMargin}%

üåü REGIONAL CHAMPIONS
ü•á Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M
ü•à Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M
ü•â Jinja: UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M

üéØ TEAM ACHIEVEMENTS
‚Ä¢ ${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()} happy customers
‚Ä¢ ${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0 satisfaction rating
‚Ä¢ ${realTimeData.sales.customerMetrics.newCustomers} new customers this period

üì¶ INVENTORY STATUS
‚Ä¢ ${realTimeData.inventory.totalProducts?.toLocaleString()} products available
${realTimeData.inventory.lowStockItems > 0 ? '‚Ä¢ ' + realTimeData.inventory.lowStockItems + ' items need attention üîÑ' : '‚Ä¢ All stock levels good ‚úÖ'}

üöÄ WHAT'S NEXT?
Keep up the excellent work! Focus on:
- Customer experience excellence
- Regional growth opportunities
- Product innovation

Questions? Reach out to your regional manager or email team@faredeal.ug

Cheers to our continued success! üéâ
FAREDEAL Uganda Management

üì± Check portal.faredeal.ug for detailed metrics`);
                
                const teamSubject = encodeURIComponent(`üîî Team Update: ${report.name} Performance Snapshot`);
                const teamMailto = `mailto:team@faredeal.ug,staff@faredeal.ug?subject=${teamSubject}&body=${teamNotification}`;
                window.open(teamMailto, '_blank');
                toast.success(`üì¢ Team notification email prepared!`);
                break;
                
              case 3: // Automated Report API
                // Simulate automated email service
                const emailApiData = {
                  service: 'FAREDEAL Email Service',
                  template: 'business_report_v2',
                  recipients: [
                    { email: 'nakiyonga.catherine@faredeal.ug', name: 'Catherine Nakiyonga' },
                    { email: 'manager@faredeal.ug', name: 'Operations Manager' },
                    { email: 'team@faredeal.ug', name: 'FAREDEAL Team' }
                  ],
                  data: {
                    reportName: report.name,
                    Revenue: `UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M`,
                    growth: `${realTimeData.sales.growthRate}%`,
                    customers: realTimeData.sales.customerMetrics.totalCustomers,
                    satisfaction: realTimeData.sales.customerMetrics.customerSatisfaction,
                    topRegion: 'Kampala',
                    timestamp: new Date().toISOString()
                  },
                  attachments: [
                    {
                      filename: `FAREDEAL_Report_${Date.now()}.pdf`,
                      content: 'base64_encoded_content_here'
                    }
                  ]
                };
                
                console.log('Email API Call:', emailApiData);
                
                // Show API simulation
                toast.loading('ü§ñ Connecting to email service...');
                
                setTimeout(() => {
                  toast.dismiss();
                  toast.success(`‚úÖ Automated email sent via API!\nüìß Recipients: ${emailApiData.recipients.length}\nüìä Template: Professional Business Report\nüîó Tracking ID: ${Date.now()}`);
                  
                  // Also open backup mailto
                  const apiBackupBody = encodeURIComponent(`ü§ñ AUTOMATED BUSINESS REPORT

This email was generated automatically by FAREDEAL Business Intelligence System.

Report: ${report.name}
Generated: ${new Date().toLocaleString('en-UG')}
System: FAREDEAL Email API v2.0

üìä AUTOMATED METRICS SUMMARY
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
‚Ä¢ Growth: ${realTimeData.sales.growthRate}%
‚Ä¢ Customers: ${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}
‚Ä¢ Satisfaction: ${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0

This report has been automatically distributed to all relevant stakeholders.

üîß System Information:
API Endpoint: /api/v2/reports/send
Response Time: ${Math.random() * 100 + 50}ms
Status: Success (200)
Message ID: ${Date.now()}-AUTO

For technical support: tech@faredeal.ug
Dashboard: portal.faredeal.ug

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
FAREDEAL Automated Business Intelligence
¬© ${new Date().getFullYear()} FAREDEAL Uganda - All rights reserved`);
                  
                  const apiSubject = encodeURIComponent(`ü§ñ Automated Report: ${report.name} - System Generated`);
                  window.open(`mailto:tech@faredeal.ug?subject=${apiSubject}&body=${apiBackupBody}`, '_blank');
                }, 2000);
                break;
            }
          } else {
            toast.error('‚ùå Invalid email option selected');
          }
          break;
          
        case 'sms':
          // Enhanced SMS functionality with interactive options
          const smsOptions = [
            {
              name: 'Summary SMS',
              content: `üìä FAREDEAL Report Alert!\n\n${report.name} ready.\nüí∞ Revenue: ${generatedReportData?.summary?.totalRevenue || 'UGX ' + (realTimeData.financial.totalRevenue / 1000000).toFixed(1) + 'M'}\nüìà Growth: ${generatedReportData?.summary?.growthRate || realTimeData.sales.growthRate + '%'}\n\nüîó Full report: portal.faredeal.ug\nüìû +256-700-123456`
            },
            {
              name: 'Urgent Alert',
              content: `üö® URGENT: ${report.name}\n\n‚ö†Ô∏è Requires immediate attention\nüí∞ Revenue impact: ${generatedReportData?.summary?.totalRevenue || 'UGX ' + (realTimeData.financial.totalRevenue / 1000000).toFixed(1) + 'M'}\n\nüì± Call now: +256-700-123456\nüîó portal.faredeal.ug`
            },
            {
              name: 'Team Update',
              content: `üì¢ Team Update - ${report.name}\n\n‚úÖ Performance: ${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0\nüìä Today's sales: UGX ${(realTimeData.sales.todaySales / 1000000).toFixed(1)}M\nüá∫üá¨ Best region: Kampala\n\nüë• FAREDEAL Uganda Team`
            }
          ];
          
          const selectedSMS = prompt(`Choose SMS type:\n\n1. Summary SMS (${smsOptions[0].content.length} chars)\n2. Urgent Alert (${smsOptions[1].content.length} chars)\n3. Team Update (${smsOptions[2].content.length} chars)\n\nEnter 1, 2, or 3:`);
          
          const smsIndex = parseInt(selectedSMS) - 1;
          if (smsIndex >= 0 && smsIndex < smsOptions.length) {
            const selectedContent = smsOptions[smsIndex].content;
            navigator.clipboard?.writeText(selectedContent);
            
            // Offer to open SMS app or WhatsApp for sending
            const sendMethod = confirm(`üì± SMS copied to clipboard!\n\n"${smsOptions[smsIndex].name}"\n\nClick OK to open WhatsApp, Cancel to use SMS app.`);
            
            if (sendMethod) {
              const whatsappSMS = encodeURIComponent(selectedContent);
              window.open(`https://wa.me/256700123456?text=${whatsappSMS}`, '_blank');
              toast.success(`üì± ${smsOptions[smsIndex].name} sent via WhatsApp!`);
            } else {
              window.open(`sms:+256700123456?body=${encodeURIComponent(selectedContent)}`, '_blank');
              toast.success(`üí¨ ${smsOptions[smsIndex].name} sent via SMS!`);
            }
          } else {
            navigator.clipboard?.writeText(smsOptions[0].content);
            toast.success(`üí¨ Default SMS content copied to clipboard!`);
          }
          break;
          
        case 'whatsapp':
          // Enhanced WhatsApp functionality with REAL connectivity
          const whatsappOptions = [
            {
              name: 'WhatsApp Business API',
              description: 'Send via official WhatsApp Business API',
              icon: 'üè¢',
              realAPI: true
            },
            {
              name: 'WhatsApp Web + File',
              description: 'Share with downloadable file attachment',
              icon: 'ÔøΩ',
              withFile: true
            },
            {
              name: 'Native Device Sharing',
              description: 'Use device native sharing (mobile/PWA)',
              icon: 'üì±',
              native: true
            },
            {
              name: 'WhatsApp Web Direct',
              description: 'Direct WhatsApp web integration',
              icon: 'üåê',
              direct: true
            }
          ];
          
          const shareOption = prompt(`üöÄ Choose REAL WhatsApp connectivity:\n\n${whatsappOptions.map((option, index) => 
            `${index + 1}. ${option.icon} ${option.name}\n   ${option.description}`
          ).join('\n\n')}\n\nEnter 1-4:`);
          
          const optionIndex = parseInt(shareOption) - 1;
          
          if (optionIndex >= 0 && optionIndex < whatsappOptions.length) {
            const selectedOption = whatsappOptions[optionIndex];
            
            // Get phone number for all options
            const phoneNumber = prompt(`üì± Enter WhatsApp number:\n\nüá∫üá¨ Uganda format examples:\n‚Ä¢ +256700123456\n‚Ä¢ 256700123456\n‚Ä¢ 0700123456\n\nOr choose:\n‚Ä¢ 1 = Team Lead (+256700123456)\n‚Ä¢ 2 = Manager (+256700654321)\n‚Ä¢ 3 = Custom number\n\nEnter number or choice:`);
            
            let targetPhone;
            switch(phoneNumber) {
              case '1':
                targetPhone = '+256700123456';
                break;
              case '2':
                targetPhone = '+256700654321';
                break;
              case '3':
                targetPhone = prompt('Enter custom WhatsApp number (with country code):');
                break;
              default:
                targetPhone = phoneNumber;
            }
            
            if (!targetPhone) {
              toast.error('‚ùå Phone number required for WhatsApp sharing');
              return;
            }
            
            // Create professional message
            const whatsappMessage = `üìä *FAREDEAL UGANDA BUSINESS REPORT*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ *${report.name}*
üìÖ ${new Date().toLocaleString('en-UG')}
üë§ Generated by: ${user?.name || 'System Manager'}

ÔøΩ *FINANCIAL HIGHLIGHTS*
‚Ä¢ Revenue: *UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M*
‚Ä¢ Growth: *${realTimeData.sales.growthRate > 0 ? '+' : ''}${realTimeData.sales.growthRate}%*
‚Ä¢ Profit Margin: *${realTimeData.financial.profitMargin}%*
‚Ä¢ Monthly Revenue: *UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M*

üá∫üá¨ *REGIONAL PERFORMANCE*
üèôÔ∏è Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.kampala?.growth}%)
üõ´ Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.entebbe?.growth}%)
üèûÔ∏è Jinja: UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.jinja?.growth}%)

üë• *CUSTOMER METRICS*
‚Ä¢ Total Customers: *${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}*
‚Ä¢ New Customers: *${realTimeData.sales.customerMetrics.newCustomers}*
‚Ä¢ Satisfaction: *${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0* ‚≠ê

üì± *TOP PRODUCTS*
${realTimeData.sales.topProducts.slice(0, 3).map((product, index) => 
  `${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : 'ü•â'} ${product.name}\n   üí∞ UGX ${(product.sales / 1000000).toFixed(1)}M`
).join('\n\n')}

üîó *DASHBOARD ACCESS*
portal.faredeal.ug/manager

üìû *CONTACT*
FAREDEAL Uganda HQ
üìç Kampala Business District
‚òéÔ∏è +256-700-123456
üìß support@faredeal.ug

_Powered by FAREDEAL Business Intelligence_ üöÄ`;

            switch (optionIndex) {
              case 0: // WhatsApp Business API
                toast.loading('üè¢ Connecting to WhatsApp Business API...');
                
                try {
                  // Use Promise-based approach to avoid await in switch case
                  sendWhatsAppMessage(targetPhone, whatsappMessage).then(apiResult => {
                    if (apiResult.success) {
                      toast.success(`‚úÖ Message sent via WhatsApp Business API!\nüì± To: ${targetPhone}\nüÜî Message ID: ${apiResult.messageId}`);
                    } else if (apiResult.fallback) {
                      toast.dismiss();
                      toast.info('üîÑ API unavailable, using WhatsApp Web fallback...');
                      shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                      toast.success(`üì± WhatsApp Web opened! Message prepared for ${targetPhone}`);
                    } else {
                      throw new Error(apiResult.error);
                    }
                  }).catch(error => {
                    toast.error(`‚ùå WhatsApp API Error: ${error.message}`);
                    // Fallback to web
                    shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                    toast.info('üîÑ Fallback: WhatsApp Web opened');
                  });
                } catch (error) {
                  toast.error(`‚ùå WhatsApp API Error: ${error.message}`);
                  shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                  toast.info('üîÑ Fallback: WhatsApp Web opened');
                }
                break;
                
              case 1: // WhatsApp Web + File
                const fileFormat = prompt('üìé Choose file format:\n\n1. üìä CSV Spreadsheet (.csv)\n2. üìÑ PDF Report (.pdf)\n3. üìã JSON Data (.json)\n4. üìù Text Report (.txt)\n\nEnter 1-4:') || '1';
                const formatMap = { '1': 'csv', '2': 'pdf', '3': 'json', '4': 'txt' };
                const selectedFormat = formatMap[fileFormat] || 'csv';
                
                toast.loading('üìé Preparing file for WhatsApp sharing...');
                
                const reportFile = createReportFile(selectedFormat);
                const fileBlob = new File([reportFile.blob], reportFile.fileName, { type: reportFile.blob.type });
                
                setTimeout(() => {
                  toast.dismiss();
                  shareViaWhatsAppWeb(targetPhone, whatsappMessage, fileBlob);
                  toast.success(`üìé File prepared for WhatsApp!\nüìÅ ${reportFile.fileName}\nüì± To: ${targetPhone}\n\nüí° File downloaded - attach it in WhatsApp chat`);
                }, 1500);
                break;
                
              case 2: // Native Device Sharing
                toast.loading('ÔøΩ Accessing device sharing...');
                
                try {
                  const shareData = {
                    reportName: report.name,
                    content: whatsappMessage,
                    url: generateShareableLink().url
                  };
                  
                  // Use Promise-based approach to avoid await in switch case
                  shareViaNativeAPI(shareData).then(nativeResult => {
                    if (nativeResult.success) {
                      toast.success('‚úÖ Shared via device native sharing!');
                    } else {
                      throw new Error(nativeResult.error);
                    }
                  }).catch(error => {
                    toast.dismiss();
                    toast.info('üîÑ Native sharing unavailable, using WhatsApp Web...');
                    shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                    toast.success(`üì± WhatsApp Web opened for ${targetPhone}`);
                  });
                } catch (error) {
                  toast.error(`‚ùå Native sharing error: ${error.message}`);
                  toast.info('üîÑ Fallback to WhatsApp Web...');
                  shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                  toast.success(`üì± WhatsApp Web opened for ${targetPhone}`);
                }
                break;
                
              case 3: // WhatsApp Web Direct
                toast.loading('üåê Opening WhatsApp Web...');
                
                setTimeout(() => {
                  toast.dismiss();
                  shareViaWhatsAppWeb(targetPhone, whatsappMessage);
                  toast.success(`üåê WhatsApp Web opened!\nüì± To: ${targetPhone}\nüìä Message: ${whatsappMessage.substring(0, 50)}...`);
                }, 1000);
                break;
            }
          } else {
            toast.error('‚ùå Invalid option selected');
          }
          break;
              case 0: // Share Report Link
                const shareableLink = generateShareableLink();
                const linkMessage = encodeURIComponent(`üìä *FAREDEAL UGANDA BUSINESS REPORT*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ *${report.name}*
ÔøΩ Generated: ${new Date().toLocaleString('en-UG')}

üìà *KEY HIGHLIGHTS*
ÔøΩ Revenue: *UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M*
ÔøΩ Customers: *${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}*
ÔøΩ Growth: *${realTimeData.sales.growthRate}%*
‚≠ê Satisfaction: *${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0*

üá∫üá¨ *TOP PERFORMING REGIONS*
üèôÔ∏è Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M
üõ´ Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M

üîó *VIEW FULL INTERACTIVE REPORT*
${shareableLink.url}

üì± *Features:*
‚úÖ Live data updates
‚úÖ Interactive charts  
‚úÖ Regional breakdown
‚úÖ Product analytics

_Generated by FAREDEAL Business Intelligence_
üåê portal.faredeal.ug`);

                const recipients = prompt(`üì± Send to:\n\n1. Team Lead (+256-700-123456)\n2. Regional Managers Group\n3. Executive Team\n4. Custom Number\n5. Share Link Only\n\nChoose 1-5:`);
                
                let whatsappURL;
                switch(recipients) {
                  case '1':
                    whatsappURL = `https://wa.me/256700123456?text=${linkMessage}`;
                    break;
                  case '2':
                    whatsappURL = `https://wa.me/?text=${linkMessage}`;
                    toast.info('üì± Select Regional Managers group in WhatsApp');
                    break;
                  case '3':
                    whatsappURL = `https://wa.me/?text=${linkMessage}`;
                    toast.info('üì± Select Executive Team group in WhatsApp');
                    break;
                  case '4':
                    const customNum = prompt('Enter WhatsApp number (format: 256700123456):');
                    if (customNum) {
                      whatsappURL = `https://wa.me/${customNum}?text=${linkMessage}`;
                    }
                    break;
                  case '5':
                    navigator.clipboard?.writeText(shareableLink.url);
                    toast.success(`üîó Shareable link copied! Valid for 7 days.\nLink: ${shareableLink.url}`);
                    return;
                  default:
                    whatsappURL = `https://wa.me/?text=${linkMessage}`;
                }
                
                if (whatsappURL) {
                  window.open(whatsappURL, '_blank');
                  toast.success(`üì± Report link shared via WhatsApp! Link ID: ${shareableLink.id}`);
                }
                break;
                
              case 1: // Send File Attachment
                const fileFormats = ['txt', 'csv', 'json'];
                const formatChoice = prompt(`üìé Choose file format:\n\n1. Text Report (.txt)\n2. Excel Data (.csv)\n3. JSON Data (.json)\n\nEnter 1-3:`);
                
                const selectedFormat = fileFormats[parseInt(formatChoice) - 1] || 'txt';
                const reportFile = createReportFile(selectedFormat);
                
                // Create download link
                const downloadLink = document.createElement('a');
                downloadLink.href = reportFile.url;
                downloadLink.download = reportFile.fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                // WhatsApp message with file instruction
                const fileMessage = encodeURIComponent(`üìä *FAREDEAL UGANDA REPORT*

ÔøΩ *File:* ${reportFile.fileName}
üìä *Report:* ${report.name}
ÔøΩ *Generated:* ${new Date().toLocaleString('en-UG')}

ÔøΩ *Quick Summary:*
‚Ä¢ Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
‚Ä¢ Customers: ${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}
‚Ä¢ Growth: ${realTimeData.sales.growthRate}%

üìé *File downloaded to your device*
Please attach the file to this WhatsApp message

üá∫üá¨ FAREDEAL Uganda Business Intelligence`);

                setTimeout(() => {
                  const sendFile = confirm(`üìÅ File "${reportFile.fileName}" downloaded!\n\nÔøΩ Open WhatsApp to attach and send file?\nüîπ Click OK to open WhatsApp\nüîπ Click Cancel to send message only`);
                  
                  if (sendFile) {
                    window.open(`https://wa.me/?text=${fileMessage}`, '_blank');
                    toast.success(`üìé File ready for WhatsApp attachment! Check Downloads folder.`);
                  } else {
                    navigator.clipboard?.writeText(decodeURIComponent(fileMessage));
                    toast.success(`üìã Message copied! File saved in Downloads.`);
                  }
                }, 1000);
                break;
                
              case 2: // Quick Message
                const quickTemplates = {
                  summary: `üìä *FAREDEAL ${report.name}*

üí∞ Revenue: *UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M*
üìà Growth: *${realTimeData.sales.growthRate}%*
üë• Customers: *${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}*
‚≠ê Satisfaction: *${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0*

ÔøΩüá¨ *Top Region:* Kampala (UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M)

üì± Full report: portal.faredeal.ug`,
                  
                  alert: `üö® *URGENT BUSINESS UPDATE*

‚ö†Ô∏è *${report.name}* requires attention

üìä *Key Metrics:*
üí∞ Revenue: UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M
üìâ Profit Margin: ${realTimeData.financial.profitMargin}%
üìà Growth Rate: ${realTimeData.sales.growthRate}%

üéØ *Action Required:*
Review performance metrics immediately

üìû Contact: +256-700-123456
üîó portal.faredeal.ug`,
                  
                  celebration: `üéâ *EXCELLENT PERFORMANCE!*

üá∫üá¨ *FAREDEAL UGANDA* hitting targets!

üèÜ *${report.name} Highlights:*
ÔøΩ Revenue: *UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M*
ÔøΩ Growth: *+${realTimeData.sales.growthRate}%*
üåü Customer Rating: *${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0*

ü•á *Leading Regions:*
‚Ä¢ Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M
‚Ä¢ Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M

Keep up the amazing work! üöÄ
*FAREDEAL Team*`
                };
                
                const templateChoice = prompt(`üí¨ Choose message style:\n\n1. Business Summary\n2. Urgent Alert\n3. Celebration/Success\n\nEnter 1-3:`);
                
                let selectedTemplate;
                switch(templateChoice) {
                  case '1': selectedTemplate = quickTemplates.summary; break;
                  case '2': selectedTemplate = quickTemplates.alert; break;
                  case '3': selectedTemplate = quickTemplates.celebration; break;
                  default: selectedTemplate = quickTemplates.summary;
                }
                
                const quickMessage = encodeURIComponent(selectedTemplate);
                window.open(`https://wa.me/?text=${quickMessage}`, '_blank');
                toast.success(`üí¨ Quick message prepared for WhatsApp!`);
                break;
                
              case 3: // WhatsApp Business API
                const businessMessage = {
                  to: '+256700123456',
                  type: 'template',
                  template: {
                    name: 'business_report',
                    language: { code: 'en' },
                    components: [
                      {
                        type: 'header',
                        parameters: [{ type: 'text', text: report.name }]
                      },
                      {
                        type: 'body',
                        parameters: [
                          { type: 'text', text: `UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M` },
                          { type: 'text', text: `${realTimeData.sales.growthRate}%` },
                          { type: 'text', text: realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString() }
                        ]
                      }
                    ]
                  }
                };
                
                // Simulate Business API call
                console.log('WhatsApp Business API Message:', businessMessage);
                
                const businessURL = `https://wa.me/?text=${encodeURIComponent(`üè¢ *FAREDEAL BUSINESS REPORT*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *${report.name}*
üóìÔ∏è ${new Date().toLocaleDateString('en-UG')}

üìà *BUSINESS METRICS*
üí∞ Total Revenue: *UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M*
üìä Monthly Growth: *${realTimeData.sales.growthRate}%*
üë• Active Customers: *${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}*
‚≠ê Satisfaction Score: *${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0*

üá∫üá¨ *REGIONAL BREAKDOWN*
üèôÔ∏è Kampala: UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M
üõ´ Entebbe: UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M
üèûÔ∏è Jinja: UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M

üì± *DASHBOARD ACCESS*
üîó portal.faredeal.ug/manager
üìß manager@faredeal.ug

*Powered by FAREDEAL Business Intelligence*
_Automated Business Report System_`)}`;
                
                window.open(businessURL, '_blank');
                toast.success(`üè¢ Professional business report sent via WhatsApp!`);
                break;
            }
          } else {
            toast.error('‚ùå Invalid option selected');
          }
          break;
          
        case 'print':
          // Enhanced print functionality with professional formatting
          const printContent = generateFileContent();
          const printWindow = window.open('', '_blank');
          printWindow.document.write(`
            <!DOCTYPE html>
            <html lang="en">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${report.name} - FAREDEAL Uganda Business Report</title>
                <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  
                  body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    line-height: 1.6; 
                    color: #333;
                    background: #fff;
                  }
                  
                  .page {
                    max-width: 210mm;
                    margin: 0 auto;
                    padding: 20mm;
                    background: white;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                  }
                  
                  .header {
                    text-align: center;
                    border-bottom: 3px solid #2c5530;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                  }
                  
                  .logo {
                    font-size: 28px;
                    font-weight: bold;
                    color: #2c5530;
                    margin-bottom: 10px;
                  }
                  
                  .company-info {
                    color: #666;
                    font-size: 14px;
                    margin-bottom: 10px;
                  }
                  
                  .report-title {
                    font-size: 24px;
                    color: #2c5530;
                    margin-bottom: 10px;
                    font-weight: bold;
                  }
                  
                  .report-meta {
                    color: #888;
                    font-size: 12px;
                    font-style: italic;
                  }
                  
                  .content {
                    line-height: 1.8;
                    font-size: 14px;
                  }
                  
                  .section {
                    margin-bottom: 25px;
                    padding: 15px;
                    border-left: 4px solid #f39c12;
                    background: #fafafa;
                  }
                  
                  .section-title {
                    font-size: 18px;
                    color: #2c5530;
                    margin-bottom: 15px;
                    font-weight: bold;
                  }
                  
                  .metrics-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 15px;
                    margin: 20px 0;
                  }
                  
                  .metric-card {
                    background: white;
                    padding: 15px;
                    border-radius: 8px;
                    border: 1px solid #ddd;
                    text-align: center;
                  }
                  
                  .metric-value {
                    font-size: 20px;
                    font-weight: bold;
                    color: #2c5530;
                    margin-bottom: 5px;
                  }
                  
                  .metric-label {
                    color: #666;
                    font-size: 12px;
                  }
                  
                  .footer {
                    margin-top: 40px;
                    padding-top: 20px;
                    border-top: 2px solid #eee;
                    text-align: center;
                    color: #888;
                    font-size: 12px;
                  }
                  
                  .live-indicator {
                    display: inline-block;
                    background: #10B981;
                    color: white;
                    padding: 4px 8px;
                    border-radius: 12px;
                    font-size: 10px;
                    font-weight: bold;
                    margin-left: 10px;
                  }
                  
                  @media print {
                    body { 
                      margin: 0; 
                      -webkit-print-color-adjust: exact; 
                      print-color-adjust: exact; 
                    }
                    .page { 
                      box-shadow: none; 
                      margin: 0; 
                      padding: 15mm;
                    }
                    .no-print { display: none !important; }
                  }
                  
                  @page {
                    size: A4;
                    margin: 0;
                  }
                </style>
              </head>
              <body>
                <div class="page">
                  <div class="header">
                    <div class="logo">üá∫üá¨ FAREDEAL UGANDA</div>
                    <div class="company-info">
                      Kampala Business District, Uganda<br>
                      üìû +256-700-123456 | üìß support@faredeal.ug | üåê www.faredeal.ug
                    </div>
                    <div class="report-title">${report.name}</div>
                    <div class="report-meta">
                      Generated: ${generatedReportData?.generatedAt || new Date().toLocaleString('en-UG')}
                      <span class="live-indicator">LIVE DATA</span>
                    </div>
                  </div>
                  
                  <div class="content">
                    ${generatedReportData?.summary ? `
                    <div class="section">
                      <div class="section-title">üìä Executive Summary</div>
                      <div class="metrics-grid">
                        <div class="metric-card">
                          <div class="metric-value">${generatedReportData.summary.totalRevenue}</div>
                          <div class="metric-label">Total Revenue</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${generatedReportData.summary.totalCustomers}</div>
                          <div class="metric-label">Total Customers</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${generatedReportData.summary.totalOrders}</div>
                          <div class="metric-label">Total Orders</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${generatedReportData.summary.growthRate}</div>
                          <div class="metric-label">Growth Rate</div>
                        </div>
                      </div>
                    </div>
                    ` : ''}
                    
                    ${realTimeData.sales.regionalPerformance ? `
                    <div class="section">
                      <div class="section-title">üá∫üá¨ Regional Performance Analysis</div>
                      <div class="metrics-grid">
                        <div class="metric-card">
                          <div class="metric-value">UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M</div>
                          <div class="metric-label">Kampala (+${realTimeData.sales.regionalPerformance.kampala?.growth}%)</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M</div>
                          <div class="metric-label">Entebbe (+${realTimeData.sales.regionalPerformance.entebbe?.growth}%)</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M</div>
                          <div class="metric-label">Jinja (+${realTimeData.sales.regionalPerformance.jinja?.growth}%)</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">UGX ${(realTimeData.sales.regionalPerformance.mbale?.sales / 1000000).toFixed(1)}M</div>
                          <div class="metric-label">Mbale (+${realTimeData.sales.regionalPerformance.mbale?.growth}%)</div>
                        </div>
                      </div>
                    </div>
                    ` : ''}
                    
                    ${realTimeData.sales.topProducts.length ? `
                    <div class="section">
                      <div class="section-title">üì± Top Performing Products</div>
                      ${realTimeData.sales.topProducts.slice(0, 5).map((product, index) => `
                        <div style="display: flex; justify-content: space-between; padding: 10px; border-bottom: 1px solid #eee;">
                          <span><strong>${index + 1}. ${product.name}</strong></span>
                          <span>UGX ${(product.sales / 1000000).toFixed(1)}M (${product.units} units)</span>
                        </div>
                      `).join('')}
                    </div>
                    ` : ''}
                    
                    <div class="section">
                      <div class="section-title">üíπ Financial Overview</div>
                      <div class="metrics-grid">
                        <div class="metric-card">
                          <div class="metric-value">UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M</div>
                          <div class="metric-label">Total Revenue</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${realTimeData.financial.profitMargin}%</div>
                          <div class="metric-label">Profit Margin</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${realTimeData.sales.customerMetrics.customerSatisfaction}/5.0</div>
                          <div class="metric-label">Customer Satisfaction</div>
                        </div>
                        <div class="metric-card">
                          <div class="metric-value">${realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString()}</div>
                          <div class="metric-label">Total Customers</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="footer">
                    <p><strong>FAREDEAL Uganda Business Intelligence Report</strong></p>
                    <p>This report contains confidential business information. Distribution restricted to authorized personnel only.</p>
                    <p>For questions about this report, contact: manager@faredeal.ug | +256-700-123456</p>
                    <p>¬© ${new Date().getFullYear()} FAREDEAL Uganda. All rights reserved.</p>
                  </div>
                </div>
                
                <script>
                  // Auto-print when ready
                  window.onload = function() {
                    setTimeout(() => {
                      window.print();
                    }, 1000);
                  };
                  
                  // Close window after printing
                  window.onafterprint = function() {
                    setTimeout(() => {
                      window.close();
                    }, 2000);
                  };
                </script>
              </body>
            </html>
          `);
          printWindow.document.close();
          toast.success(`üñ®Ô∏è Professional ${report.name} prepared for printing!`);
          break;
          
        default:
          const defaultContent = generateFileContent();
          downloadFile(defaultContent, `${sanitizedReportName}_${timestamp}.txt`, 'text/plain');
          toast.success(`‚úÖ ${report.name} exported successfully!`);
      }
    }, 2000);
  };

  // Enhanced Report Generation Function
  const handleGenerateReport = (report) => {
    // Show loading state
    toast.info(`üîÑ Generating ${report.name}...`);
    
    // Simulate report generation with realistic Uganda business data
    const generateReportData = () => {
      const currentDate = new Date().toLocaleDateString('en-UG');
      const currentTime = new Date().toLocaleTimeString('en-UG');
      
      switch (report.id) {
        case 'business_overview':
          return {
            generatedAt: `${currentDate} ${currentTime}`,
            summary: {
              totalRevenue: 'UGX 2,450,000,000',
              totalCustomers: '15,847',
              totalOrders: '42,156',
              growthRate: '+23.5%'
            },
            regionalData: {
              kampala: { Revenue: 'UGX 1,200,000,000', customers: 8500, orders: 22000 },
              entebbe: { Revenue: 'UGX 650,000,000', customers: 3200, orders: 11000 },
              jinja: { Revenue: 'UGX 400,000,000', customers: 2800, orders: 6500 },
              mbale: { Revenue: 'UGX 200,000,000', customers: 1347, orders: 2656 }
            },
            topProducts: [
              { name: 'iPhone 15 Pro Max', sales: 'UGX 450,000,000', units: 1200 },
              { name: 'Samsung Galaxy S24', sales: 'UGX 380,000,000', units: 1500 },
              { name: 'MacBook Air M3', sales: 'UGX 320,000,000', units: 400 }
            ]
          };
          
        case 'financial_summary':
          return {
            generatedAt: `${currentDate} ${currentTime}`,
            Revenue: 'UGX 2,450,000,000',
            expenses: 'UGX 1,800,000,000',
            netProfit: 'UGX 650,000,000',
            profitMargin: '26.5%',
            cashFlow: 'UGX 1,200,000,000',
            monthlyBreakdown: [
              { month: 'January', Revenue: 'UGX 200,000,000', profit: 'UGX 52,000,000' },
              { month: 'February', Revenue: 'UGX 180,000,000', profit: 'UGX 48,000,000' },
              { month: 'March', Revenue: 'UGX 220,000,000', profit: 'UGX 58,000,000' }
            ]
          };
          
        case 'operational_efficiency':
          return {
            generatedAt: `${currentDate} ${currentTime}`,
            productivity: '94.2%',
            qualityScore: '98.7%',
            averageDeliveryTime: '2.3 hours',
            customerSatisfaction: '4.8/5.0',
            efficiency: {
              orderProcessing: '15 mins average',
              inventoryTurnover: '12.5 times/year',
              employeeProductivity: '142% target achievement',
              systemUptime: '99.8%'
            }
          };
          
        case 'sales_performance':
          return {
            generatedAt: `${currentDate} ${currentTime}`,
            totalSales: 'UGX 2,450,000,000',
            growthRate: '+23.5%',
            topProducts: [
              'iPhone 15 Pro Max (UGX 450M)',
              'Samsung Galaxy S24 (UGX 380M)',
              'MacBook Air M3 (UGX 320M)'
            ],
            regionalPerformance: {
              kampala: '+25%',
              entebbe: '+18%',
              jinja: '+31%',
              mbale: '+12%'
            }
          };
          
        default:
          return {
            generatedAt: `${currentDate} ${currentTime}`,
            status: 'Generated successfully',
            message: 'Report contains comprehensive Uganda market data'
          };
      }
    };
    
    // Simulate API call delay
    setTimeout(() => {
      const reportData = generateReportData();
      setGeneratedReportData(reportData);
      setSelectedReport(report);
      setShowReportModal(true);
      toast.success(`‚úÖ ${report.name} generated successfully!`);
    }, 2000);
  };

  // Real-time Data Fetching Functions
  const fetchRealTimeData = useCallback(async () => {
    setDataLoading(true);
    try {
      // Simulate API calls to fetch real application data
      const salesData = await fetchSalesData();
      const inventoryData = await fetchInventoryData();
      const financialData = await fetchFinancialData();
      
      setRealTimeData({
        sales: salesData,
        inventory: inventoryData,
        financial: financialData
      });
      
      toast.success('üìä Data refreshed successfully!');
    } catch (error) {
      toast.error('‚ùå Failed to refresh data');
    } finally {
      setDataLoading(false);
    }
  }, []);

  // Simulated API functions with realistic Uganda business data
  const fetchSalesData = async () => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const currentDate = new Date();
    const currentHour = currentDate.getHours();
    
    // Dynamic sales based on time of day (Uganda business hours)
    const baseSales = 2450000000; // UGX 2.45B base
    const timeMultiplier = currentHour >= 8 && currentHour <= 18 ? 1.2 : 0.8;
    const randomVariation = 0.9 + Math.random() * 0.2; // ¬±10% variation
    
    return {
      totalSales: Math.round(baseSales * timeMultiplier * randomVariation),
      todaySales: Math.round(8500000 + Math.random() * 2000000), // 8.5M - 10.5M daily
      monthlySales: Math.round(245000000 + Math.random() * 50000000), // 245M - 295M monthly
      growthRate: (18 + Math.random() * 12).toFixed(1), // 18-30% growth
      topProducts: [
        {
          id: 'iphone15pro',
          name: 'iPhone 15 Pro Max',
          sales: Math.round(450000000 + Math.random() * 50000000),
          units: Math.round(1200 + Math.random() * 300),
          category: 'Electronics',
          margin: '25.5%'
        },
        {
          id: 'samsung_s24',
          name: 'Samsung Galaxy S24',
          sales: Math.round(380000000 + Math.random() * 40000000),
          units: Math.round(1500 + Math.random() * 200),
          category: 'Electronics',
          margin: '22.8%'
        },
        {
          id: 'macbook_air',
          name: 'MacBook Air M3',
          sales: Math.round(320000000 + Math.random() * 30000000),
          units: Math.round(400 + Math.random() * 100),
          category: 'Computers',
          margin: '18.2%'
        }
      ],
      customerMetrics: {
        totalCustomers: Math.round(15847 + Math.random() * 1000),
        newCustomers: Math.round(234 + Math.random() * 50),
        returningCustomers: Math.round(8500 + Math.random() * 500),
        customerSatisfaction: (4.6 + Math.random() * 0.3).toFixed(1),
        averageOrderValue: Math.round(156000 + Math.random() * 20000)
      },
      regionalPerformance: {
        kampala: {
          sales: Math.round(1200000000 + Math.random() * 100000000),
          growth: (25 + Math.random() * 8).toFixed(1),
          customers: Math.round(8500 + Math.random() * 500)
        },
        entebbe: {
          sales: Math.round(650000000 + Math.random() * 50000000),
          growth: (18 + Math.random() * 10).toFixed(1),
          customers: Math.round(3200 + Math.random() * 200)
        },
        jinja: {
          sales: Math.round(400000000 + Math.random() * 40000000),
          growth: (31 + Math.random() * 5).toFixed(1),
          customers: Math.round(2800 + Math.random() * 150)
        },
        mbale: {
          sales: Math.round(200000000 + Math.random() * 20000000),
          growth: (12 + Math.random() * 8).toFixed(1),
          customers: Math.round(1347 + Math.random() * 100)
        }
      },
      lastUpdated: new Date().toLocaleString('en-UG')
    };
  };

  const fetchInventoryData = async () => {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    return {
      totalProducts: Math.round(2547 + Math.random() * 100),
      lowStockItems: Math.round(45 + Math.random() * 15),
      outOfStock: Math.round(12 + Math.random() * 8),
      stockValue: Math.round(1850000000 + Math.random() * 200000000),
      turnoverRate: (12.5 + Math.random() * 2).toFixed(1),
      topMovingProducts: [
        {
          name: 'iPhone 15 Pro Max',
          movement: Math.round(45 + Math.random() * 15),
          stock: Math.round(235 + Math.random() * 50),
          status: 'optimal'
        },
        {
          name: 'Samsung Galaxy S24',
          movement: Math.round(38 + Math.random() * 12),
          stock: Math.round(180 + Math.random() * 40),
          status: 'optimal'
        },
        {
          name: 'MacBook Air M3',
          movement: Math.round(15 + Math.random() * 8),
          stock: Math.round(85 + Math.random() * 20),
          status: 'low'
        }
      ],
      supplierMetrics: {
        totalSuppliers: 47,
        reliableSuppliers: 42,
        averageDeliveryTime: (2.3 + Math.random() * 0.5).toFixed(1),
        qualityScore: (94.2 + Math.random() * 4).toFixed(1),
        onTimeDelivery: (96.8 + Math.random() * 2).toFixed(1)
      },
      lastUpdated: new Date().toLocaleString('en-UG')
    };
  };

  const fetchFinancialData = async () => {
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    const revenue = Math.round(2450000000 + Math.random() * 200000000);
    const expenses = Math.round(1800000000 + Math.random() * 150000000);
    const profit = revenue - expenses;
    
    return {
      totalRevenue: revenue,
      monthlyRevenue: Math.round(204000000 + Math.random() * 40000000),
      expenses: expenses,
      profit: profit,
      profitMargin: ((profit / revenue) * 100).toFixed(1),
      cashFlow: Math.round(1200000000 + Math.random() * 100000000),
      revenueStreams: {
        retail: Math.round(revenue * 0.65),
        wholesale: Math.round(revenue * 0.25),
        online: Math.round(revenue * 0.08),
        services: Math.round(revenue * 0.02)
      },
      monthlyBreakdown: [
        { month: 'January', Revenue: Math.round(200000000 + Math.random() * 40000000), profit: Math.round(52000000 + Math.random() * 10000000) },
        { month: 'February', Revenue: Math.round(180000000 + Math.random() * 35000000), profit: Math.round(48000000 + Math.random() * 8000000) },
        { month: 'March', Revenue: Math.round(220000000 + Math.random() * 45000000), profit: Math.round(58000000 + Math.random() * 12000000) }
      ],
      lastUpdated: new Date().toLocaleString('en-UG')
    };
  };

  // Auto-refresh data every 30 seconds
  useEffect(() => {
    fetchRealTimeData(); // Initial fetch
    
    const interval = setInterval(() => {
      fetchRealTimeData();
    }, 30000); // Refresh every 30 seconds
    
    return () => clearInterval(interval);
  }, [fetchRealTimeData]);

  // Theme and Appearance states
  const [themeSettings, setThemeSettings] = useState(() => {
    const saved = localStorage.getItem('managerPortalTheme');
    return saved ? JSON.parse(saved) : {
      themeMode: 'light',
      accentColor: '#667eea',
      fontSize: 'medium',
      fontFamily: 'inter',
      borderRadius: 'medium',
      ugandaTheme: true,
      ugandaColors: true,
      culturalElements: true,
      language: 'en',
      animations: true,
      compactMode: false,
      highContrast: false,
      customCSS: ''
    };
  });

  // Notification settings state
  const [notificationSettings, setNotificationSettings] = useState(() => {
    const saved = localStorage.getItem('managerPortalNotifications');
    return saved ? JSON.parse(saved) : {
      emailNotifications: true,
      pushNotifications: true,
      smsNotifications: false,
      lowStockAlerts: true,
      orderAlerts: true,
      paymentAlerts: true,
      systemUpdates: true,
      marketingEmails: false,
      weeklyReports: true,
      soundEnabled: true,
      vibrationEnabled: true,
      doNotDisturb: false,
      quietHours: { start: '22:00', end: '08:00' }
    };
  });

  // Security settings state
  const [securitySettings, setSecuritySettings] = useState(() => {
    const saved = localStorage.getItem('managerPortalSecurity');
    return saved ? JSON.parse(saved) : {
      twoFactorAuth: false,
      sessionTimeout: '8',
      loginAlerts: true,
      dataEncryption: true,
      auditLog: true,
      passwordPolicy: 'strong',
      deviceTracking: true,
      ipWhitelist: '',
      autoLogout: true,
      biometricAuth: false,
      securityQuestions: '',
      backupCodes: []
    };
  });

  // Business settings state
  const [businessSettings, setBusinessSettings] = useState(() => {
    const saved = localStorage.getItem('managerPortalBusiness');
    return saved ? JSON.parse(saved) : {
      businessName: 'FareDeal Uganda',
      businessType: 'retail',
      currency: 'UGX',
      taxRate: '18',
      fiscalYear: 'jan-dec',
      workingHours: { start: '08:00', end: '18:00' },
      workingDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],
      timeZone: 'Africa/Kampala',
      language: 'en',
      numberFormat: 'standard',
      dateFormat: 'dd/mm/yyyy',
      autoBackup: true,
      backupFrequency: 'daily'
    };
  });

  // Check for mobile device and handle outside clicks
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    const handleClickOutside = (event) => {
      if (showMobileMenu && !event.target.closest('.profile-menu')) {
        setShowMobileMenu(false);
      }
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    document.addEventListener('click', handleClickOutside);
    
    return () => {
      window.removeEventListener('resize', checkMobile);
      document.removeEventListener('click', handleClickOutside);
    };
  }, [showMobileMenu]);

  // Function to update manager profile
  const updateManagerProfile = (key, value) => {
    setManagerProfile(prev => ({
      ...prev,
      [key]: value
    }));
  };

  // Make update function globally available
  useEffect(() => {
    window.updateManagerProfile = updateManagerProfile;
    return () => {
      delete window.updateManagerProfile;
    };
  }, []);

  // Theme Application Effect
  useEffect(() => {
    const applyTheme = () => {
      const root = document.documentElement;
      
      // Apply theme mode
      if (themeSettings.themeMode === 'dark') {
        document.body.classList.add('dark-theme');
        root.style.setProperty('--bg-color', '#1a1a1a');
        root.style.setProperty('--text-color', '#ffffff');
        root.style.setProperty('--card-bg', '#2a2a2a');
      } else {
        document.body.classList.remove('dark-theme');
        root.style.setProperty('--bg-color', '#f8fafc');
        root.style.setProperty('--text-color', '#1a202c');
        root.style.setProperty('--card-bg', '#ffffff');
      }
      
      // Apply accent color
      root.style.setProperty('--accent-color', themeSettings.accentColor);
      
      // Apply font settings
      const fontSizeMap = {
        small: '14px',
        medium: '16px',
        large: '18px',
        'extra-large': '20px'
      };
      root.style.setProperty('--font-size', fontSizeMap[themeSettings.fontSize]);
      root.style.setProperty('--font-family', themeSettings.fontFamily);
      
      // Apply border radius
      const borderRadiusMap = {
        none: '0px',
        small: '4px',
        medium: '8px',
        large: '12px',
        'extra-large': '16px'
      };
      root.style.setProperty('--border-radius', borderRadiusMap[themeSettings.borderRadius]);
      
      // Apply Uganda theme colors if enabled
      if (themeSettings.ugandaTheme) {
        root.style.setProperty('--uganda-yellow', '#FCDC00');
        root.style.setProperty('--uganda-red', '#D90000');
        root.style.setProperty('--uganda-black', '#000000');
        document.body.classList.add('uganda-theme');
      } else {
        document.body.classList.remove('uganda-theme');
      }
      
      // Apply animations
      if (!themeSettings.animations) {
        root.style.setProperty('--animation-duration', '0s');
        document.body.classList.add('no-animations');
      } else {
        root.style.setProperty('--animation-duration', '0.3s');
        document.body.classList.remove('no-animations');
      }
      
      // Apply compact mode
      if (themeSettings.compactMode) {
        document.body.classList.add('compact-mode');
        root.style.setProperty('--spacing-unit', '0.5rem');
      } else {
        document.body.classList.remove('compact-mode');
        root.style.setProperty('--spacing-unit', '1rem');
      }
      
      // Apply high contrast
      if (themeSettings.highContrast) {
        document.body.classList.add('high-contrast');
      } else {
        document.body.classList.remove('high-contrast');
      }
      
      // Apply custom CSS if provided
      if (themeSettings.customCSS) {
        let customStyleEl = document.getElementById('custom-manager-styles');
        if (!customStyleEl) {
          customStyleEl = document.createElement('style');
          customStyleEl.id = 'custom-manager-styles';
          document.head.appendChild(customStyleEl);
        }
        customStyleEl.textContent = themeSettings.customCSS;
      }
      
      // Save to localStorage
      localStorage.setItem('managerPortalTheme', JSON.stringify(themeSettings));
    };
    
    applyTheme();
  }, [themeSettings]);

  // Save settings to localStorage when they change
  useEffect(() => {
    localStorage.setItem('managerPortalNotifications', JSON.stringify(notificationSettings));
  }, [notificationSettings]);

  useEffect(() => {
    localStorage.setItem('managerPortalSecurity', JSON.stringify(securitySettings));
  }, [securitySettings]);

  useEffect(() => {
    localStorage.setItem('managerPortalBusiness', JSON.stringify(businessSettings));
  }, [businessSettings]);

  // Enhanced Ugandan Supermarket Business Metrics
  const [businessMetrics] = useState({
    totalRevenue: 480000000, // UGX (approximately $128,000 USD)
    totalOrders: 3247,
    activeCustomers: 4156,
    inventoryValue: 920000000, // UGX
    teamSize: 28,
    supplierCount: 45,
    avgOrderValue: 147000, // UGX
    customerSatisfaction: 4.7,
    todayRevenue: 18500000, // UGX
    todayOrders: 189,
    todayCustomers: 256,
    weeklyGrowth: 18.5,
    monthlyGrowth: 12.3,
    conversionRate: 72.5,
    avgResponseTime: 1.8,
    employeeSatisfaction: 4.6,
    operationalEfficiency: 94.2,
    mobileMoneyRatio: 67, // percentage of mobile money transactions
    cashTransactionRatio: 23,
    cardTransactionRatio: 10,
    supplierOnTimeDelivery: 89.5,
    localSupplierRatio: 78, // percentage of local suppliers
    internationalSupplierRatio: 22,
    averageCustomerAge: 32,
    returningCustomerRate: 68,
    newCustomerAcquisition: 12.4
  });

  const [revenueData] = useState([
    { name: 'Mon', Revenue: 12000000, orders: 145, customers: 189, profit: 2400000, expenses: 9600000, momo: 87, cash: 35, card: 23 },
    { name: 'Tue', Revenue: 15000000, orders: 152, customers: 195, profit: 3000000, expenses: 12000000, momo: 92, cash: 38, card: 22 },
    { name: 'Wed', Revenue: 18000000, orders: 167, customers: 212, profit: 3600000, expenses: 14400000, momo: 108, cash: 41, card: 18 },
    { name: 'Thu', Revenue: 16000000, orders: 158, customers: 198, profit: 3200000, expenses: 12800000, momo: 95, cash: 42, card: 21 },
    { name: 'Fri', Revenue: 22000000, orders: 178, customers: 234, profit: 4400000, expenses: 17600000, momo: 115, cash: 48, card: 15 },
    { name: 'Sat', Revenue: 25000000, orders: 189, customers: 256, profit: 5000000, expenses: 20000000, momo: 127, cash: 45, card: 17 },
    { name: 'Sun', Revenue: 19000000, orders: 171, customers: 228, profit: 3800000, expenses: 15200000, momo: 112, cash: 38, card: 21 }
  ]);

  // Ugandan supermarket activity data
  const [realTimeActivity] = useState([
    { id: 1, type: 'sale', message: 'Large purchase: Matooke (50kg) + Posho (25kg) - UGX 185,000', time: '2 min ago', amount: 185000, icon: 'ÔøΩ' },
    { id: 2, type: 'customer', message: 'New loyalty member: Namukasa Grace from Ntinda', time: '5 min ago', amount: null, icon: 'üë§' },
    { id: 3, type: 'inventory', message: 'Low stock alert: Sugar (Kakira) - Only 12 bags left', time: '8 min ago', amount: null, icon: '‚ö†Ô∏è' },
    { id: 4, type: 'sale', message: 'MTN Mobile Money payment: UGX 125,000 processed successfully', time: '12 min ago', amount: 125000, icon: 'ÔøΩ' },
    { id: 5, type: 'team', message: 'Nakato Sarah completed "Customer Service Excellence" training', time: '15 min ago', amount: null, icon: 'üéì' },
    { id: 6, type: 'supplier', message: 'Fresh vegetables delivery from Wakiso suppliers arriving', time: '20 min ago', amount: null, icon: 'üöõ' },
    { id: 7, type: 'customer', message: 'Customer complaint resolved: Expired milk refunded', time: '25 min ago', amount: 8500, icon: 'üîÑ' },
    { id: 8, type: 'sale', message: 'Bulk rice purchase: 10 bags - UGX 420,000', time: '30 min ago', amount: 420000, icon: 'ÔøΩ' }
  ]);

  // Top performing products - Uganda specific
  const [topProducts] = useState([
    { name: 'Posho (Maize Flour)', sales: 245, Revenue: 4900000, growth: '+22%', category: 'Cereals & Grains' },
    { name: 'Rice - Local (Tilda)', sales: 189, Revenue: 5670000, growth: '+18%', category: 'Cereals & Grains' },
    { name: 'Sugar - Kakira (50kg)', sales: 156, Revenue: 9360000, growth: '+15%', category: 'Sweeteners' },
    { name: 'Cooking Oil - Fresh Dairy', sales: 234, Revenue: 11700000, growth: '+28%', category: 'Cooking Essentials' },
    { name: 'Beans - Red (Local)', sales: 167, Revenue: 3340000, growth: '+12%', category: 'Pulses' },
    { name: 'Matooke (Green Bananas)', sales: 345, Revenue: 5175000, growth: '+35%', category: 'Fresh Produce' },
    { name: 'Irish Potatoes', sales: 278, Revenue: 4170000, growth: '+19%', category: 'Fresh Produce' },
    { name: 'Tomatoes', sales: 456, Revenue: 6840000, growth: '+41%', category: 'Fresh Produce' }
  ]);

  // Performance indicators
  const [performanceIndicators] = useState([
    { name: 'Sales Target', current: 125000, target: 150000, unit: 'USD', color: 'blue' },
    { name: 'Customer Satisfaction', current: 4.7, target: 4.8, unit: 'stars', color: 'green' },
    { name: 'Team Efficiency', current: 94.2, target: 95.0, unit: '%', color: 'purple' },
    { name: 'Inventory Turnover', current: 8.5, target: 10.0, unit: 'times', color: 'orange' }
  ]);

  const [teamPerformance] = useState([
    { 
      id: 1,
      name: 'Sarah Johnson', 
      role: 'Cashier', 
      sales: 15000, 
      efficiency: 95, 
      satisfaction: 4.8,
      avatar: 'üë©‚Äçüíº',
      joinDate: '2022-03-15',
      department: 'Frontend',
      skills: ['Customer Service', 'POS Systems', 'Inventory Management'],
      achievements: ['Employee of the Month (Jan 2024)', 'Perfect Attendance (Q1 2024)'],
      goals: ['Increase sales by 15%', 'Complete advanced POS training'],
      schedule: { current: 'Morning Shift (8AM-4PM)', next: 'Evening Shift (4PM-12AM)' },
      training: { completed: 8, inProgress: 2, pending: 1 },
      performance: { trend: 'up', change: '+12%' },
      status: 'active'
    },
    { 
      id: 2,
      name: 'Mike Chen', 
      role: 'Stock Keeper', 
      sales: 8000, 
      efficiency: 88, 
      satisfaction: 4.6,
      avatar: 'üë®‚Äçüíº',
      joinDate: '2021-11-20',
      department: 'Backend',
      skills: ['Inventory Management', 'Warehouse Operations', 'Quality Control'],
      achievements: ['Zero Stock Discrepancies (Q4 2023)', 'Safety Award Winner'],
      goals: ['Improve efficiency to 95%', 'Lead inventory optimization project'],
      schedule: { current: 'Day Shift (9AM-5PM)', next: 'Day Shift (9AM-5PM)' },
      training: { completed: 6, inProgress: 3, pending: 2 },
      performance: { trend: 'stable', change: '+3%' },
      status: 'active'
    },
    { 
      id: 3,
      name: 'Emily Davis', 
      role: 'Cashier', 
      sales: 12000, 
      efficiency: 92, 
      satisfaction: 4.7,
      avatar: 'üë©‚Äçüíº',
      joinDate: '2023-01-10',
      department: 'Frontend',
      skills: ['Customer Service', 'Product Knowledge', 'Upselling'],
      achievements: ['Top Sales Performer (Dec 2023)', 'Customer Service Excellence'],
      goals: ['Become team lead', 'Complete management training'],
      schedule: { current: 'Evening Shift (4PM-12AM)', next: 'Morning Shift (8AM-4PM)' },
      training: { completed: 5, inProgress: 4, pending: 0 },
      performance: { trend: 'up', change: '+18%' },
      status: 'active'
    },
    { 
      id: 4,
      name: 'David Wilson', 
      role: 'Assistant Manager', 
      sales: 18000, 
      efficiency: 96, 
      satisfaction: 4.9,
      avatar: 'üë®‚Äçüíº',
      joinDate: '2020-08-05',
      department: 'Management',
      skills: ['Team Leadership', 'Operations Management', 'Strategic Planning'],
      achievements: ['Manager of the Year (2023)', 'Store Performance Excellence'],
      goals: ['Promote to Store Manager', 'Implement new training program'],
      schedule: { current: 'Full Day (8AM-6PM)', next: 'Full Day (8AM-6PM)' },
      training: { completed: 12, inProgress: 1, pending: 0 },
      performance: { trend: 'up', change: '+25%' },
      status: 'active'
    }
  ]);

  // Team analytics data
  const [teamAnalytics] = useState({
    totalMembers: 12,
    activeMembers: 11,
    onLeave: 1,
    averageEfficiency: 92.5,
    averageSatisfaction: 4.7,
    totalSales: 125000,
    topPerformer: 'David Wilson',
    departmentBreakdown: [
      { department: 'Frontend', count: 6, efficiency: 94.2 },
      { department: 'Backend', count: 4, efficiency: 89.8 },
      { department: 'Management', count: 2, efficiency: 96.5 }
    ]
  });

  // Training modules data
  const [trainingModules] = useState([
    { id: 1, title: 'Advanced POS Operations', category: 'Technical', duration: '4 hours', status: 'active', enrolled: 8 },
    { id: 2, title: 'Customer Service Excellence', category: 'Soft Skills', duration: '3 hours', status: 'active', enrolled: 12 },
    { id: 3, title: 'Inventory Management Best Practices', category: 'Operations', duration: '5 hours', status: 'active', enrolled: 6 },
    { id: 4, title: 'Leadership & Team Management', category: 'Management', duration: '8 hours', status: 'upcoming', enrolled: 3 },
    { id: 5, title: 'Safety & Security Protocols', category: 'Compliance', duration: '2 hours', status: 'active', enrolled: 11 }
  ]);

  // Schedule data
  const [scheduleData] = useState([
    { day: 'Monday', shifts: [
      { time: '8AM-4PM', members: ['Sarah Johnson', 'Mike Chen'], coverage: 'Full' },
      { time: '4PM-12AM', members: ['Emily Davis', 'David Wilson'], coverage: 'Full' }
    ]},
    { day: 'Tuesday', shifts: [
      { time: '8AM-4PM', members: ['Sarah Johnson', 'Mike Chen'], coverage: 'Full' },
      { time: '4PM-12AM', members: ['Emily Davis'], coverage: 'Partial' }
    ]},
    { day: 'Wednesday', shifts: [
      { time: '8AM-4PM', members: ['Mike Chen', 'David Wilson'], coverage: 'Full' },
      { time: '4PM-12AM', members: ['Sarah Johnson', 'Emily Davis'], coverage: 'Full' }
    ]},
    { day: 'Thursday', shifts: [
      { time: '8AM-4PM', members: ['Sarah Johnson', 'Emily Davis'], coverage: 'Full' },
      { time: '4PM-12AM', members: ['Mike Chen', 'David Wilson'], coverage: 'Full' }
    ]},
    { day: 'Friday', shifts: [
      { time: '8AM-4PM', members: ['David Wilson', 'Sarah Johnson'], coverage: 'Full' },
      { time: '4PM-12AM', members: ['Emily Davis', 'Mike Chen'], coverage: 'Full' }
    ]}
  ]);

  const [inventoryInsights] = useState({
    lowStock: 15,
    outOfStock: 3,
    overstock: 8,
    fastMoving: 25,
    slowMoving: 12,
    totalProducts: 1250
  });

  // Supplier performance data (for future use)
  // const [supplierPerformance] = useState([
  //   { name: 'Apple Inc.', orders: 45, onTime: 98, quality: 4.9, totalValue: 125000 },
  //   { name: 'Samsung Electronics', orders: 32, onTime: 95, quality: 4.7, totalValue: 89000 },
  //   { name: 'Sony Corporation', orders: 28, onTime: 92, quality: 4.6, totalValue: 67000 },
  //   { name: 'LG Electronics', orders: 35, onTime: 96, quality: 4.8, totalValue: 78000 }
  // ]);

  const [recentAlerts] = useState([
    {
      id: 1,
      type: 'critical',
      title: 'Low Stock Alert',
      message: 'iPhone 15 Pro Max - Only 2 units left',
      timestamp: '5 minutes ago',
      action: 'Reorder Now'
    },
    {
      id: 2,
      type: 'warning',
      title: 'Team Performance',
      message: 'Mike Chen efficiency dropped to 88%',
      timestamp: '1 hour ago',
      action: 'Review Performance'
    },
    {
      id: 3,
      type: 'info',
      title: 'New Customer',
      message: '25 new customers registered today',
      timestamp: '2 hours ago',
      action: 'View Details'
    }
  ]);

  // Supplier verification data
  const [pendingSuppliers, setPendingSuppliers] = useState([
    {
      id: 1,
      name: 'Tech Solutions Ltd',
      contactPerson: 'John Smith',
      email: 'john@techsolutions.com',
      phone: '+256 700 123 456',
      address: 'Kampala, Uganda',
      businessType: 'Electronics',
      registrationDate: '2024-01-15',
      documents: ['Business License', 'Tax Certificate', 'Bank Statement'],
      status: 'pending',
      rating: 0,
      notes: 'New supplier specializing in mobile devices'
    },
    {
      id: 2,
      name: 'Fresh Produce Co',
      contactPerson: 'Mary Nakato',
      email: 'mary@freshproduce.co.ug',
      phone: '+256 701 234 567',
      address: 'Entebbe, Uganda',
      businessType: 'Food & Beverages',
      registrationDate: '2024-01-20',
      documents: ['Business License', 'Health Certificate', 'Insurance'],
      status: 'pending',
      rating: 0,
      notes: 'Local organic produce supplier'
    },
    {
      id: 3,
      name: 'Office Supplies Plus',
      contactPerson: 'David Kato',
      email: 'david@officesupplies.ug',
      phone: '+256 702 345 678',
      address: 'Jinja, Uganda',
      businessType: 'Office Supplies',
      registrationDate: '2024-01-25',
      documents: ['Business License', 'Tax Certificate'],
      status: 'pending',
      rating: 0,
      notes: 'Bulk office supplies and stationery'
    }
  ]);

  // Supplier order verification data
  const [pendingOrders, setPendingOrders] = useState([
    {
      id: 1,
      orderNumber: 'PO-2024-001',
      supplierName: 'Tech Solutions Ltd',
      supplierId: 1,
      orderDate: '2024-01-28',
      expectedDelivery: '2024-02-05',
      totalValue: 1250000, // UGX
      status: 'pending_verification',
      priority: 'high',
      items: [
        { name: 'Samsung Galaxy A54', quantity: 25, unitPrice: 35000, total: 875000 },
        { name: 'iPhone 13', quantity: 15, unitPrice: 25000, total: 375000 }
      ],
      documents: ['Purchase Order', 'Quotation', 'Delivery Note'],
      requestedBy: 'Sarah Johnson',
      department: 'Electronics',
      notes: 'Urgent order for holiday season stock'
    },
    {
      id: 2,
      orderNumber: 'PO-2024-002',
      supplierName: 'Fresh Produce Co',
      supplierId: 2,
      orderDate: '2024-01-27',
      expectedDelivery: '2024-01-30',
      totalValue: 450000, // UGX
      status: 'pending_verification',
      priority: 'medium',
      items: [
        { name: 'Organic Bananas (50kg)', quantity: 10, unitPrice: 25000, total: 250000 },
        { name: 'Fresh Tomatoes (30kg)', quantity: 8, unitPrice: 25000, total: 200000 }
      ],
      documents: ['Purchase Order', 'Quality Certificate'],
      requestedBy: 'Mike Chen',
      department: 'Fresh Produce',
      notes: 'Weekly fresh produce order'
    },
    {
      id: 3,
      orderNumber: 'PO-2024-003',
      supplierName: 'Office Supplies Plus',
      supplierId: 3,
      orderDate: '2024-01-26',
      expectedDelivery: '2024-02-02',
      totalValue: 320000, // UGX
      status: 'pending_verification',
      priority: 'low',
      items: [
        { name: 'A4 Paper (Boxes)', quantity: 20, unitPrice: 12000, total: 240000 },
        { name: 'Printer Cartridges', quantity: 8, unitPrice: 10000, total: 80000 }
      ],
      documents: ['Purchase Order', 'Invoice'],
      requestedBy: 'Emily Davis',
      department: 'Administration',
      notes: 'Monthly office supplies replenishment'
    }
  ]);

  // Inventory access data
  const [inventoryStats, setInventoryStats] = useState({
    totalProducts: 1250,
    lowStockItems: 45,
    outOfStockItems: 12,
    totalValue: 85000000, // UGX
    categoriesCount: 15,
    suppliersCount: 28,
    lastUpdated: '2024-01-28 14:30',
    topCategories: [
      { name: 'Electronics', value: 35000000, percentage: 41.2 },
      { name: 'Food & Beverages', value: 25000000, percentage: 29.4 },
      { name: 'Clothing', value: 15000000, percentage: 17.6 },
      { name: 'Home & Garden', value: 10000000, percentage: 11.8 }
    ],
    recentActivities: [
      { type: 'stock_in', message: 'iPhone 13 - 15 units added', time: '10 min ago' },
      { type: 'stock_out', message: 'Samsung Galaxy A54 - 8 units sold', time: '25 min ago' },
      { type: 'low_stock', message: 'Printer Paper running low (5 remaining)', time: '1 hour ago' },
      { type: 'new_product', message: 'MacBook Air M2 added to inventory', time: '2 hours ago' }
    ]
  });

  // Report access management data
  const [reportAccess] = useState([
    {
      id: 1,
      user: 'Sarah Johnson',
      role: 'Cashier',
      currentAccess: ['Sales Reports', 'Customer Reports'],
      requestedAccess: ['Financial Reports', 'Inventory Reports'],
      requestDate: '2024-01-28',
      status: 'pending'
    },
    {
      id: 2,
      user: 'Mike Chen',
      role: 'Stock Keeper',
      currentAccess: ['Inventory Reports', 'Stock Reports'],
      requestedAccess: ['Sales Reports', 'Customer Reports'],
      requestDate: '2024-01-27',
      status: 'pending'
    },
    {
      id: 3,
      user: 'Emily Davis',
      role: 'Cashier',
      currentAccess: ['Sales Reports'],
      requestedAccess: ['Customer Reports', 'Financial Reports'],
      requestDate: '2024-01-26',
      status: 'pending'
    }
  ]);

  const [strategicGoals] = useState([
    { id: 1, title: 'Increase Monthly Revenue', target: 150000, current: 125000, deadline: '2024-12-31', progress: 83 },
    { id: 2, title: 'Improve Customer Satisfaction', target: 4.8, current: 4.7, deadline: '2024-11-30', progress: 98 },
    { id: 3, title: 'Reduce Inventory Costs', target: 400000, current: 450000, deadline: '2024-12-15', progress: 89 },
    { id: 4, title: 'Expand Team', target: 15, current: 12, deadline: '2024-12-31', progress: 80 }
  ]);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    // Make toast globally available for modal functions
    window.toast = toast;

    return () => clearInterval(timer);
  }, []);

  // Mobile detection for Uganda responsive design
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Close mobile dropdown when clicking outside or on mobile orientation change
  useEffect(() => {
    const handleOutsideClick = (event) => {
      if (showMobileDropdown && !event.target.closest('.mobile-dropdown-container')) {
        setShowMobileDropdown(false);
      }
      if (showMainDropdown && !event.target.closest('.main-dropdown-container')) {
        setShowMainDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleOutsideClick);
    return () => document.removeEventListener('mousedown', handleOutsideClick);
  }, [showMobileDropdown, showMainDropdown]);

  // Handle ESC key to close dropdowns
  useEffect(() => {
    const handleEscapeKey = (event) => {
      if (event.key === 'Escape') {
        setShowMobileDropdown(false);
        setShowMainDropdown(false);
        setShowNotifications(false);
      }
    };

    document.addEventListener('keydown', handleEscapeKey);
    return () => document.removeEventListener('keydown', handleEscapeKey);
  }, []);

  // Updated formatCurrency for UGX
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-UG', {
      style: 'currency',
      currency: 'UGX',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const formatNumber = (num) => {
    return new Intl.NumberFormat('en-US').format(num);
  };

  const getGreeting = () => {
    const hour = currentTime.getHours();
    if (hour < 12) return 'Good Morning';
    if (hour < 17) return 'Good Afternoon';
    return 'Good Evening';
  };

  // Supplier verification functions
  const handleSupplierApproval = (supplierId, action) => {
    setPendingSuppliers(prev => 
      prev.map(supplier => 
        supplier.id === supplierId 
          ? { ...supplier, status: action }
          : supplier
      )
    );
    
    // Show notification
    const supplier = pendingSuppliers.find(s => s.id === supplierId);
    const message = action === 'approved' 
      ? `‚úÖ ${supplier.name} has been approved as a supplier`
      : `‚ùå ${supplier.name} has been rejected`;
    
    alert(message);
  };

  // Report access management functions
  const handleReportAccessApproval = (userId, action) => {
    // Update report access status
    const user = reportAccess.find(u => u.id === userId);
    const message = action === 'approved' 
      ? `‚úÖ Report access granted to ${user.user}`
      : `‚ùå Report access denied for ${user.user}`;
    
    alert(message);
  };

  // Order verification functions
  const handleOrderApproval = (orderId, action) => {
    setPendingOrders(prev => 
      prev.map(order => 
        order.id === orderId 
          ? { ...order, status: action === 'approved' ? 'approved' : 'rejected' }
          : order
      )
    );
    
    const order = pendingOrders.find(o => o.id === orderId);
    const message = action === 'approved' 
      ? `‚úÖ Order ${order.orderNumber} has been approved`
      : `‚ùå Order ${order.orderNumber} has been rejected`;
    
    alert(message);
  };

  // Inventory access functions
  const handleInventoryAction = (action, itemId = null) => {
    switch(action) {
      case 'refresh':
        setInventoryStats(prev => ({
          ...prev,
          lastUpdated: new Date().toLocaleString()
        }));
        alert('üìä Inventory data refreshed successfully');
        break;
      case 'low_stock_alert':
        alert('‚ö†Ô∏è Low stock alert sent to purchasing team');
        break;
      case 'generate_report':
        alert('üìã Inventory report generated and downloaded');
        break;
      case 'stock_adjustment':
        alert('üìù Stock adjustment form opened');
        break;
      default:
        break;
    }
  };

  // Edit modal functions
  const openEditModal = (type, data = null, mode = 'edit') => {
    setEditModal({
      isOpen: true,
      type,
      data,
      mode
    });
  };

  const closeEditModal = () => {
    setEditModal({
      isOpen: false,
      type: '',
      data: null,
      mode: 'edit'
    });
  };

  const handleSaveEdit = (formData) => {
    // Handle saving based on type
    switch (editModal.type) {
      case 'team':
        console.log('Saving team member:', formData);
        break;
      case 'supplier':
        console.log('Saving supplier:', formData);
        break;
      case 'schedule':
        console.log('Saving schedule:', formData);
        break;
      case 'training':
        console.log('Saving training:', formData);
        break;
      case 'permissions':
        console.log('Saving permissions:', formData);
        break;
      default:
        break;
    }
    
    // Show success message
    alert(`‚úÖ ${editModal.type.charAt(0).toUpperCase() + editModal.type.slice(1)} ${editModal.mode === 'add' ? 'added' : 'updated'} successfully!`);
    closeEditModal();
  };

  // Enhanced Header Functions
  
  // Notification Bell Function
  const handleNotificationClick = () => {
    setShowNotifications(!showNotifications);
  };

  // Enhanced Profile Function with Editable Information
  const handleProfileClick = () => {
    const profileModal = document.createElement('div');
    profileModal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-end pt-16 pr-4';
    profileModal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl w-full max-w-md animate-slideIn">
        <div class="bg-gradient-to-br from-green-600 via-blue-600 to-purple-600 text-white p-6 rounded-t-xl">
          <div class="text-center">
            <div class="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-3 text-2xl cursor-pointer hover:scale-110 transition-transform" onclick="editAvatar()">
              ${managerProfile.avatar}
            </div>
            <h3 class="font-bold text-lg cursor-pointer hover:text-yellow-200 transition-colors" onclick="editName()">${managerProfile.name}</h3>
            <p class="text-green-200 text-sm cursor-pointer hover:text-yellow-200 transition-colors" onclick="editRole()">${managerProfile.role}</p>
            <div class="flex items-center justify-center space-x-2 mt-2">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-green-200 text-sm cursor-pointer hover:text-yellow-200 transition-colors" onclick="editStatus()">${managerProfile.status} - ${managerProfile.location}</span>
            </div>
          </div>
        </div>
        
        <div class="p-4 space-y-3 max-h-96 overflow-y-auto">
          <div class="bg-gray-50 rounded-lg p-3">
            <div class="text-xs text-gray-600 mb-1">Employee ID</div>
            <div class="font-medium cursor-pointer hover:text-blue-600 transition-colors" onclick="editEmployeeId()">${managerProfile.employeeId}</div>
          </div>
          
          <div class="bg-gray-50 rounded-lg p-3">
            <div class="text-xs text-gray-600 mb-1">Contact Information</div>
            <div class="space-y-1">
              <div class="text-sm cursor-pointer hover:text-blue-600 transition-colors" onclick="editEmail()">${managerProfile.email}</div>
              <div class="text-sm cursor-pointer hover:text-blue-600 transition-colors" onclick="editPhone()">${managerProfile.phoneNumber}</div>
            </div>
          </div>
          
          <div class="bg-gray-50 rounded-lg p-3">
            <div class="text-xs text-gray-600 mb-1">Department & Languages</div>
            <div class="space-y-1">
              <div class="text-sm cursor-pointer hover:text-blue-600 transition-colors" onclick="editDepartment()">${managerProfile.department}</div>
              <div class="text-sm cursor-pointer hover:text-blue-600 transition-colors" onclick="editLanguages()">${managerProfile.languages.join(', ')}</div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-3">
            <div class="bg-blue-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-blue-600">4.8</div>
              <div class="text-xs text-blue-600">Rating</div>
            </div>
            <div class="bg-green-50 rounded-lg p-3 text-center">
              <div class="text-lg font-bold text-green-600">98%</div>
              <div class="text-xs text-green-600">Efficiency</div>
            </div>
          </div>
          
          <div class="space-y-2">
            <button 
              onclick="openProfileEditor(); this.closest('.fixed').remove();"
              class="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors text-left"
            >
              <span class="text-lg">‚úèÔ∏è</span>
              <span class="font-medium">Edit Full Profile</span>
            </button>
            
            <button 
              onclick="openQuickEdit(); this.closest('.fixed').remove();"
              class="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors text-left"
            >
              <span class="text-lg">‚ö°</span>
              <span class="font-medium">Quick Edit</span>
            </button>
            
            <button 
              onclick="window.toast?.info?.('üîí Opening security settings'); this.closest('.fixed').remove();"
              class="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors text-left"
            >
              <span class="text-lg">üîí</span>
              <span class="font-medium">Security</span>
            </button>
            
            <button 
              onclick="toggleOnlineStatus(); this.closest('.fixed').remove();"
              class="w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors text-left"
            >
              <span class="text-lg">üîÑ</span>
              <span class="font-medium">Change Status</span>
            </button>
          </div>
        </div>
        
        <div class="p-4 bg-gray-50 rounded-b-xl">
          <button 
            onclick="
              if(confirm('Are you sure you want to logout?')) {
                window.toast?.success?.('üëã Logging out...');
                this.closest('.fixed').remove();
              }
            "
            class="w-full bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center space-x-2"
          >
            <span>üö™</span>
            <span>Logout</span>
          </button>
        </div>
      </div>
    `;

    // Add global editing functions
    window.editName = () => {
      const newName = prompt('Enter new name:', managerProfile.name);
      if (newName && newName.trim()) {
        // Update the state through a global function
        window.updateManagerProfile?.('name', newName.trim());
        window.toast?.success?.('‚úÖ Name updated successfully!');
        profileModal.remove();
        handleProfileClick(); // Refresh the modal
      }
    };

    window.editRole = () => {
      const roles = ['Store Manager', 'Assistant Manager', 'Department Head', 'Supervisor', 'Team Lead'];
      const roleList = roles.map((role, index) => `${index + 1}. ${role}`).join('\\n');
      const choice = prompt(`Select new role:\\n${roleList}\\n\\nEnter number (1-${roles.length}):`);
      const roleIndex = parseInt(choice) - 1;
      if (roleIndex >= 0 && roleIndex < roles.length) {
        window.updateManagerProfile?.('role', roles[roleIndex]);
        window.toast?.success?.('‚úÖ Role updated successfully!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editStatus = () => {
      const statuses = ['Online', 'Away', 'Busy', 'Do Not Disturb', 'Offline'];
      const locations = ['Kampala', 'Entebbe', 'Jinja', 'Mbarara', 'Gulu'];
      
      const statusChoice = prompt(`Select status:\\n${statuses.map((s, i) => `${i+1}. ${s}`).join('\\n')}\\n\\nEnter number:`);
      const statusIndex = parseInt(statusChoice) - 1;
      
      if (statusIndex >= 0 && statusIndex < statuses.length) {
        const locationChoice = prompt(`Select location:\\n${locations.map((l, i) => `${i+1}. ${l}`).join('\\n')}\\n\\nEnter number:`);
        const locationIndex = parseInt(locationChoice) - 1;
        
        if (locationIndex >= 0 && locationIndex < locations.length) {
          window.updateManagerProfile?.('status', statuses[statusIndex]);
          window.updateManagerProfile?.('location', `${locations[locationIndex]}, Uganda`);
          window.toast?.success?.('‚úÖ Status and location updated!');
          profileModal.remove();
          handleProfileClick();
        }
      }
    };

    window.editEmployeeId = () => {
      const newId = prompt('Enter new Employee ID:', managerProfile.employeeId);
      if (newId && newId.trim()) {
        window.updateManagerProfile?.('employeeId', newId.trim());
        window.toast?.success?.('‚úÖ Employee ID updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editEmail = () => {
      const newEmail = prompt('Enter new email:', managerProfile.email);
      if (newEmail && newEmail.includes('@')) {
        window.updateManagerProfile?.('email', newEmail.trim());
        window.toast?.success?.('‚úÖ Email updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editPhone = () => {
      const newPhone = prompt('Enter new phone number:', managerProfile.phoneNumber);
      if (newPhone && newPhone.trim()) {
        window.updateManagerProfile?.('phoneNumber', newPhone.trim());
        window.toast?.success?.('‚úÖ Phone number updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editDepartment = () => {
      const departments = ['Operations Management', 'Sales & Marketing', 'Human Resources', 'Finance & Accounting', 'Inventory Management'];
      const deptChoice = prompt(`Select department:\\n${departments.map((d, i) => `${i+1}. ${d}`).join('\\n')}\\n\\nEnter number:`);
      const deptIndex = parseInt(deptChoice) - 1;
      if (deptIndex >= 0 && deptIndex < departments.length) {
        window.updateManagerProfile?.('department', departments[deptIndex]);
        window.toast?.success?.('‚úÖ Department updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editAvatar = () => {
      const avatars = ['üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüíª', 'üë®‚Äçüíª', 'üë©‚Äçüè´', 'üë®‚Äçüè´'];
      const avatarChoice = prompt(`Select avatar:\\n${avatars.map((a, i) => `${i+1}. ${a}`).join('\\n')}\\n\\nEnter number:`);
      const avatarIndex = parseInt(avatarChoice) - 1;
      if (avatarIndex >= 0 && avatarIndex < avatars.length) {
        window.updateManagerProfile?.('avatar', avatars[avatarIndex]);
        window.toast?.success?.('‚úÖ Avatar updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.editLanguages = () => {
      const newLangs = prompt('Enter languages (comma separated):', managerProfile.languages.join(', '));
      if (newLangs && newLangs.trim()) {
        const langArray = newLangs.split(',').map(lang => lang.trim()).filter(lang => lang);
        window.updateManagerProfile?.('languages', langArray);
        window.toast?.success?.('‚úÖ Languages updated!');
        profileModal.remove();
        handleProfileClick();
      }
    };

    window.openProfileEditor = () => {
      window.toast?.info?.('üöÄ Opening advanced profile editor...');
      // This could open the settings with profile category selected
      setTimeout(() => {
        if (window.handleSettingsClick) {
          window.handleSettingsClick();
          setTimeout(() => {
            if (window.showSettingsCategory) {
              window.showSettingsCategory('profile');
            }
          }, 500);
        }
      }, 1000);
    };

    window.openQuickEdit = () => {
      const quickEditModal = document.createElement('div');
      quickEditModal.className = 'fixed inset-0 bg-black bg-opacity-60 z-60 flex items-center justify-center p-4';
      quickEditModal.innerHTML = `
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-lg">
          <div class="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-6 rounded-t-2xl">
            <h3 class="text-xl font-bold">‚ö° Quick Profile Edit</h3>
            <p class="text-purple-200">Update your basic information</p>
          </div>
          <form class="p-6 space-y-4" onsubmit="saveQuickEdit(event)">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
              <input type="text" name="name" value="${managerProfile.name}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Role</label>
              <input type="text" name="role" value="${managerProfile.role}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
              <input type="email" name="email" value="${managerProfile.email}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
              <input type="tel" name="phone" value="${managerProfile.phoneNumber}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Location</label>
              <input type="text" name="location" value="${managerProfile.location}" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>
            <div class="flex space-x-3 pt-4">
              <button type="button" onclick="this.closest('.fixed').remove()" class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                Cancel
              </button>
              <button type="submit" class="flex-1 px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-colors">
                Save Changes
              </button>
            </div>
          </form>
        </div>
      `;
      document.body.appendChild(quickEditModal);
    };

    window.saveQuickEdit = (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const updates = {
        name: formData.get('name'),
        role: formData.get('role'),
        email: formData.get('email'),
        phoneNumber: formData.get('phone'),
        location: formData.get('location')
      };
      
      Object.keys(updates).forEach(key => {
        if (updates[key]) {
          window.updateManagerProfile?.(key, updates[key]);
        }
      });
      
      window.toast?.success?.('‚úÖ Profile updated successfully!');
      event.target.closest('.fixed').remove();
    };

    window.toggleOnlineStatus = () => {
      const currentStatus = managerProfile.status;
      const newStatus = currentStatus === 'Online' ? 'Away' : 'Online';
      window.updateManagerProfile?.('status', newStatus);
      window.toast?.success?.(`‚úÖ Status changed to ${newStatus}`);
    };

    document.body.appendChild(profileModal);
    
    // Close when clicking outside
    profileModal.addEventListener('click', (e) => {
      if (e.target === profileModal) {
        profileModal.remove();
      }
    });

    toast.info('üë§ Profile menu opened');
  };

  // Enhanced Creative Settings Function with Advanced Features
  const handleSettingsClick = () => {
    // Advanced settings categories with sub-menus
    const settingsCategories = {
      'profile': {
        title: 'Profile & Account',
        icon: 'üë§',
        color: 'from-blue-500 to-blue-600',
        items: [
          { 
            label: 'Personal Information', 
            icon: 'üìù', 
            type: 'form',
            fields: [
              { name: 'firstName', label: 'First Name', type: 'text', value: managerProfile.name.split(' ')[0] || 'Nakiyonga', required: true },
              { name: 'lastName', label: 'Last Name', type: 'text', value: managerProfile.name.split(' ')[1] || 'Catherine', required: true },
              { name: 'email', label: 'Email Address', type: 'email', value: managerProfile.email, required: true },
              { name: 'phone', label: 'Phone Number', type: 'tel', value: managerProfile.phoneNumber, required: true },
              { name: 'employeeId', label: 'Employee ID', type: 'text', value: managerProfile.employeeId, readonly: true },
              { name: 'joinDate', label: 'Join Date', type: 'date', value: managerProfile.joinDate }
            ]
          },
          { label: 'Profile Picture', icon: 'üì∑', action: () => toast.info('ÔøΩ Opening photo uploader') },
          { label: 'Contact Details', icon: 'üìû', action: () => toast.info('üìû Updating contact information') },
          { label: 'Bio & Skills', icon: 'üéØ', action: () => toast.info('üéØ Editing professional bio') }
        ]
      },
      'system': {
        title: 'System Preferences',
        icon: '‚öôÔ∏è',
        color: 'from-gray-500 to-gray-600',
        items: [
          { 
            label: 'Language & Localization', 
            icon: 'üåê', 
            type: 'form',
            fields: [
              { name: 'primaryLanguage', label: 'Primary Language', type: 'select', value: 'english', options: ['english', 'luganda', 'swahili', 'lusoga', 'runyoro'], required: true },
              { name: 'secondaryLanguage', label: 'Secondary Language', type: 'select', value: 'luganda', options: ['english', 'luganda', 'swahili', 'lusoga', 'runyoro'] },
              { name: 'keyboardLayout', label: 'Keyboard Layout', type: 'select', value: 'us', options: ['us', 'uk', 'uganda', 'international'] },
              { name: 'rtlSupport', label: 'Right-to-Left Support', type: 'checkbox', value: false },
              { name: 'dateLocale', label: 'Date Locale', type: 'select', value: 'en-UG', options: ['en-UG', 'lg-UG', 'sw-UG'] }
            ]
          },
          { 
            label: 'Currency & Financial Settings', 
            icon: 'üí±', 
            type: 'form',
            fields: [
              { name: 'baseCurrency', label: 'Base Currency', type: 'select', value: 'UGX', options: ['UGX', 'USD', 'EUR', 'KES', 'TZS'], required: true },
              { name: 'currencyDisplay', label: 'Currency Display Format', type: 'select', value: 'symbol', options: ['symbol', 'code', 'name'] },
              { name: 'decimalPlaces', label: 'Decimal Places', type: 'number', value: '2', min: '0', max: '4' },
              { name: 'thousandSeparator', label: 'Thousand Separator', type: 'select', value: ',', options: [',', '.', ' ', '\''] },
              { name: 'exchangeRateUpdate', label: 'Auto Exchange Rate Update', type: 'checkbox', value: true }
            ]
          },
          { 
            label: 'Time & Date Configuration', 
            icon: 'üïí', 
            type: 'form',
            fields: [
              { name: 'timezone', label: 'Time Zone', type: 'select', value: 'Africa/Kampala', options: ['Africa/Kampala', 'UTC', 'Africa/Nairobi', 'Africa/Dar_es_Salaam'], required: true },
              { name: 'dateFormat', label: 'Date Format', type: 'select', value: 'DD/MM/YYYY', options: ['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD', 'DD-MM-YYYY'] },
              { name: 'timeFormat', label: 'Time Format', type: 'select', value: '24hour', options: ['12hour', '24hour'] },
              { name: 'weekStart', label: 'Week Starts On', type: 'select', value: 'monday', options: ['sunday', 'monday'] },
              { name: 'businessHours', label: 'Business Hours', type: 'text', value: '08:00 - 18:00' }
            ]
          },
          { 
            label: 'System Performance & Updates', 
            icon: 'üìÖ', 
            type: 'form',
            fields: [
              { name: 'autoUpdates', label: 'Automatic Updates', type: 'checkbox', value: true },
              { name: 'updateFrequency', label: 'Update Check Frequency', type: 'select', value: 'daily', options: ['hourly', 'daily', 'weekly', 'monthly'] },
              { name: 'dataSync', label: 'Real-time Data Sync', type: 'checkbox', value: true },
              { name: 'cacheSize', label: 'Cache Size (MB)', type: 'number', value: '500', min: '100', max: '2000' },
              { name: 'performanceMode', label: 'Performance Mode', type: 'select', value: 'balanced', options: ['power-saver', 'balanced', 'high-performance'] }
            ]
          }
        ]
      },
      'appearance': {
        title: 'Appearance & Theme',
        icon: 'üé®',
        color: 'from-purple-500 to-purple-600',
        items: [
          { 
            label: 'Theme & Visual Style', 
            icon: 'üåô', 
            type: 'form',
            fields: [
              { name: 'themeMode', label: 'Theme Mode', type: 'select', value: themeSettings.themeMode, options: ['light', 'dark', 'auto', 'system'], required: true },
              { name: 'accentColor', label: 'Accent Color', type: 'color', value: themeSettings.accentColor },
              { name: 'fontSize', label: 'Font Size', type: 'select', value: themeSettings.fontSize, options: ['small', 'medium', 'large', 'extra-large'] },
              { name: 'fontFamily', label: 'Font Family', type: 'select', value: themeSettings.fontFamily, options: ['inter', 'roboto', 'ubuntu', 'open-sans'] },
              { name: 'borderRadius', label: 'Border Radius', type: 'select', value: themeSettings.borderRadius, options: ['none', 'small', 'medium', 'large', 'extra-large'] }
            ]
          },
          { 
            label: 'Uganda Cultural Theme', 
            icon: 'üá∫üá¨', 
            type: 'form',
            fields: [
              { name: 'ugandaTheme', label: 'Enable Uganda Theme', type: 'checkbox', value: themeSettings.ugandaTheme },
              { name: 'ugandaColors', label: 'Use Flag Colors', type: 'checkbox', value: themeSettings.ugandaColors },
              { name: 'culturalElements', label: 'Cultural Elements', type: 'checkbox', value: themeSettings.culturalElements },
              { name: 'language', label: 'Display Language', type: 'select', value: themeSettings.language, options: ['en', 'lg', 'sw'] }
            ]
          },
          { 
            label: 'Animation & Performance', 
            icon: '‚ö°', 
            type: 'form',
            fields: [
              { name: 'animations', label: 'Enable Animations', type: 'checkbox', value: themeSettings.animations },
              { name: 'compactMode', label: 'Compact Mode', type: 'checkbox', value: themeSettings.compactMode },
              { name: 'highContrast', label: 'High Contrast', type: 'checkbox', value: themeSettings.highContrast }
            ]
          },
          { 
            label: 'Custom Styling', 
            icon: 'üé®', 
            type: 'form',
            fields: [
              { name: 'customCSS', label: 'Custom CSS', type: 'textarea', value: themeSettings.customCSS, placeholder: 'Add your custom CSS styles here...' }
            ]
          }
        ]
      },
      'notifications': {
        title: 'Notifications & Alerts',
        icon: 'üîî',
        color: 'from-yellow-500 to-yellow-600',
        items: [
          { 
            label: 'Push Notification Settings', 
            icon: 'üì±', 
            type: 'form',
            fields: [
              { name: 'pushEnabled', label: 'Enable Push Notifications', type: 'checkbox', value: true },
              { name: 'newOrders', label: 'New Order Notifications', type: 'checkbox', value: true },
              { name: 'lowStock', label: 'Low Stock Alerts', type: 'checkbox', value: true },
              { name: 'paymentUpdates', label: 'Payment Status Updates', type: 'checkbox', value: true },
              { name: 'systemMaintenance', label: 'System Maintenance Alerts', type: 'checkbox', value: false }
            ]
          },
          { label: 'Email Alerts', icon: 'ÔøΩ', action: () => toast.info('üìß Configuring email preferences') },
          { label: 'SMS Notifications', icon: 'üí¨', action: () => toast.info('ÔøΩ Setting up SMS alerts') },
          { label: 'Sound Settings', icon: 'üîä', action: () => toast.info('üîä Adjusting notification sounds') }
        ]
      },
      'security': {
        title: 'Security & Privacy',
        icon: 'ÔøΩ',
        color: 'from-red-500 to-red-600',
        items: [
          { 
            label: 'Password & Authentication', 
            icon: 'üîë', 
            type: 'form',
            fields: [
              { name: 'currentPassword', label: 'Current Password', type: 'password', value: '', required: true },
              { name: 'newPassword', label: 'New Password', type: 'password', value: '', required: true },
              { name: 'confirmPassword', label: 'Confirm New Password', type: 'password', value: '', required: true },
              { name: 'passwordStrength', label: 'Password Strength Requirements', type: 'checkbox', value: true, readonly: true }
            ]
          },
          { label: 'Two-Factor Auth', icon: 'ÔøΩÔ∏è', action: () => toast.info('üõ°Ô∏è Setting up 2FA security') },
          { label: 'Login Sessions', icon: 'üíª', action: () => toast.info('üíª Managing active sessions') },
          { label: 'Privacy Settings', icon: 'üîê', action: () => toast.info('üîê Configuring privacy options') }
        ]
      },
      'business': {
        title: 'Business Settings',
        icon: 'üè¢',
        color: 'from-green-500 to-green-600',
        items: [
          { 
            label: 'Store Configuration & Details', 
            icon: 'üè™', 
            type: 'form',
            fields: [
              { name: 'storeName', label: 'Store Name', type: 'text', value: 'FAREDEAL - Kampala Central', required: true },
              { name: 'storeAddress', label: 'Store Address', type: 'textarea', value: 'Plot 123, Kampala Road, Central Division, Kampala, Uganda' },
              { name: 'storePhone', label: 'Store Phone', type: 'tel', value: '+256 414 123456', required: true },
              { name: 'storeEmail', label: 'Store Email', type: 'email', value: 'kampala@faredeal.ug' },
              { name: 'businessLicense', label: 'Business License Number', type: 'text', value: 'UG-BL-2024-12345' },
              { name: 'operatingHours', label: 'Operating Hours', type: 'text', value: 'Mon-Sat: 8:00 AM - 8:00 PM, Sun: 10:00 AM - 6:00 PM' }
            ]
          },
          { 
            label: 'Payment Methods & Processing', 
            icon: 'üí≥', 
            type: 'form',
            fields: [
              { name: 'mobileMoney', label: 'Enable Mobile Money', type: 'checkbox', value: true },
              { name: 'mtnMomo', label: 'MTN Mobile Money', type: 'checkbox', value: true },
              { name: 'airtelMoney', label: 'Airtel Money', type: 'checkbox', value: true },
              { name: 'bankCards', label: 'Accept Bank Cards', type: 'checkbox', value: true },
              { name: 'cash', label: 'Cash Payments', type: 'checkbox', value: true },
              { name: 'credit', label: 'Allow Credit Sales', type: 'checkbox', value: false },
              { name: 'paymentProcessor', label: 'Payment Processor', type: 'select', value: 'flutterwave', options: ['flutterwave', 'paystack', 'pesapal', 'airtel-uganda'] }
            ]
          },
          { 
            label: 'Tax Configuration & Compliance', 
            icon: 'üìä', 
            type: 'form',
            fields: [
              { name: 'vatEnabled', label: 'Enable VAT', type: 'checkbox', value: true },
              { name: 'vatRate', label: 'VAT Rate (%)', type: 'number', value: '18', min: '0', max: '30', step: '0.1' },
              { name: 'taxNumber', label: 'Tax Identification Number', type: 'text', value: 'UG-TIN-987654321' },
              { name: 'withholdingTax', label: 'Withholding Tax Rate (%)', type: 'number', value: '6', min: '0', max: '15' },
              { name: 'taxInclusive', label: 'Prices Include Tax', type: 'checkbox', value: true },
              { name: 'receiptFooter', label: 'Tax Receipt Footer', type: 'textarea', value: 'VAT Inclusive. TIN: UG-TIN-987654321' }
            ]
          },
          { 
            label: 'Inventory Management Rules', 
            icon: 'üì¶', 
            type: 'form',
            fields: [
              { name: 'lowStockThreshold', label: 'Low Stock Alert Threshold', type: 'number', value: '10', min: '1', max: '100' },
              { name: 'autoReorder', label: 'Auto Reorder Products', type: 'checkbox', value: false },
              { name: 'reorderQuantity', label: 'Default Reorder Quantity', type: 'number', value: '50', min: '1', max: '1000' },
              { name: 'expiryAlert', label: 'Product Expiry Alert (days)', type: 'number', value: '30', min: '1', max: '365' },
              { name: 'barcodeFormat', label: 'Barcode Format', type: 'select', value: 'code128', options: ['code128', 'ean13', 'ean8', 'upc'] },
              { name: 'inventoryMethod', label: 'Inventory Valuation Method', type: 'select', value: 'fifo', options: ['fifo', 'lifo', 'average'] }
            ]
          }
        ]
      }
    };

    // Dark mode toggle function
    const toggleDarkMode = () => {
      const body = document.body;
      const isDark = body.classList.toggle('dark');
      localStorage.setItem('darkMode', isDark);
      toast.success(isDark ? 'üåô Dark mode enabled' : '‚òÄÔ∏è Light mode enabled');
    };

    // Notification toggle function
    const toggleNotifications = () => {
      if ('Notification' in window) {
        if (Notification.permission === 'granted') {
          toast.success('üîî Notifications are enabled');
        } else if (Notification.permission !== 'denied') {
          Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
              toast.success('ÔøΩ Notifications enabled successfully!');
              new Notification('FAREDEAL Manager Portal', {
                body: 'Notifications are now active for your account',
                icon: 'üîî'
              });
            }
          });
        }
      }
    };

    // Create enhanced settings modal
    const settingsModal = document.createElement('div');
    settingsModal.className = 'fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4 backdrop-blur-sm';
    settingsModal.innerHTML = `
      <div class="bg-white dark:bg-gray-800 rounded-3xl shadow-2xl w-full max-w-6xl max-h-[95vh] overflow-hidden animate-modalIn">
        <!-- Enhanced Header with Gradient Animation -->
        <div class="settings-header-gradient text-white p-8 relative overflow-hidden">
          <div class="absolute inset-0 bg-black bg-opacity-10"></div>
          <div class="relative flex items-center justify-between">
            <div class="flex items-center space-x-6">
              <div class="w-16 h-16 glass-effect rounded-2xl flex items-center justify-center text-3xl animate-spin-slow animate-pulse-glow">
                ‚öôÔ∏è
              </div>
              <div class="animate-slide-in">
                <h2 class="text-3xl font-bold mb-1">Advanced Settings Hub</h2>
                <p class="text-white text-opacity-90 text-lg">Manager Portal - FAREDEAL Uganda üá∫üá¨</p>
                <div class="flex items-center space-x-4 mt-2">
                  <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm">v2.1.0</span>
                  <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm">üîí Secure</span>
                  <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm">‚ö° Fast</span>
                </div>
              </div>
            </div>
            <button onclick="this.closest('.fixed').remove()" class="p-3 hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-300 group">
              <svg class="w-7 h-7 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Enhanced Content Area -->
        <div class="flex h-[500px]">
          <!-- Sidebar Navigation with Animations -->
          <div class="w-80 bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-800 border-r border-gray-200 dark:border-gray-600 overflow-y-auto">
            <div class="p-6">
              <div class="mb-4">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Settings Categories</h3>
                <div class="w-12 h-1 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
              </div>
              <div class="space-y-3">
                ${Object.entries(settingsCategories).map(([key, category], index) => `
                  <button 
                    onclick="showSettingsCategory('${key}')"
                    class="w-full flex items-center space-x-4 p-4 rounded-2xl hover:bg-white hover:shadow-lg transition-all duration-300 text-left group settings-nav-item animate-bounce-in"
                    data-category="${key}"
                    style="animation-delay: ${index * 0.1}s"
                  >
                    <div class="w-12 h-12 bg-gradient-to-r ${category.color} rounded-2xl flex items-center justify-center text-white group-hover:scale-110 transition-transform duration-300 shadow-lg">
                      <span class="text-lg">${category.icon}</span>
                    </div>
                    <div class="flex-1">
                      <div class="font-semibold text-gray-900 dark:text-white group-hover:text-purple-600 transition-colors">${category.title}</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">${category.items.length} configuration options</div>
                    </div>
                    <svg class="w-5 h-5 text-gray-400 group-hover:text-purple-500 group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </button>
                `).join('')}
              </div>
            </div>
          </div>

          <!-- Main Content Area with Enhanced Design -->
          <div class="flex-1 overflow-y-auto bg-white dark:bg-gray-800">
            <div id="settings-content" class="p-8">
              <div class="text-center py-16">
                <div class="text-8xl mb-6 animate-bounce-in">‚öôÔ∏è</div>
                <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">Welcome to Advanced Settings</h3>
                <p class="text-gray-600 dark:text-gray-400 text-lg max-w-md mx-auto">Select a category from the sidebar to configure your Manager Portal experience</p>
                <div class="mt-8 flex justify-center">
                  <div class="w-24 h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 rounded-full animate-gradient"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Enhanced Footer with Action Buttons -->
        <div class="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-800 px-8 py-6 border-t border-gray-200 dark:border-gray-600">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <button 
                onclick="exportSettings()"
                class="flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl settings-button"
              >
                <span class="text-lg">üì•</span>
                <span class="font-medium">Export Settings</span>
              </button>
              <button 
                onclick="importSettings()"
                class="flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-300 shadow-lg hover:shadow-xl settings-button"
              >
                <span class="text-lg">üì§</span>
                <span class="font-medium">Import Settings</span>
              </button>
              <button 
                onclick="backupSettings()"
                class="flex items-center space-x-3 px-6 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 text-white rounded-xl hover:from-yellow-600 hover:to-yellow-700 transition-all duration-300 shadow-lg hover:shadow-xl settings-button"
              >
                <span class="text-lg">üíæ</span>
                <span class="font-medium">Backup</span>
              </button>
            </div>
            <div class="flex items-center space-x-3">
              <button 
                onclick="resetSettings()"
                class="px-6 py-3 border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-300 font-medium settings-button"
              >
                üîÑ Reset All
              </button>
              <button 
                onclick="saveSettings()"
                class="px-8 py-3 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-xl hover:from-purple-600 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl font-medium settings-button"
              >
                üíæ Save Changes
              </button>
            </div>
          </div>
          <div class="mt-4 text-center">
            <p class="text-sm text-gray-500 dark:text-gray-400">
              üîê All settings are encrypted and stored securely ‚Ä¢ Last modified: ${new Date().toLocaleDateString()}
            </p>
          </div>
        </div>
      </div>
    `;

    // Add enhanced animations and functionality
    const style = document.createElement('style');
    style.textContent = `
      @keyframes modalIn {
        from { transform: scale(0.9) translateY(-20px); opacity: 0; }
        to { transform: scale(1) translateY(0); opacity: 1; }
      }
      @keyframes spin-slow {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
      @keyframes pulse-glow {
        0%, 100% { box-shadow: 0 0 0 rgba(139, 92, 246, 0.4); }
        50% { box-shadow: 0 0 20px rgba(139, 92, 246, 0.6); }
      }
      @keyframes slide-in {
        from { transform: translateX(-20px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes bounce-in {
        0% { transform: scale(0.3); opacity: 0; }
        50% { transform: scale(1.05); }
        70% { transform: scale(0.9); }
        100% { transform: scale(1); opacity: 1; }
      }
      @keyframes gradient-shift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      
      .animate-modalIn { 
        animation: modalIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275); 
      }
      .animate-spin-slow { 
        animation: spin-slow 8s linear infinite; 
      }
      .animate-pulse-glow { 
        animation: pulse-glow 2s ease-in-out infinite; 
      }
      .animate-slide-in { 
        animation: slide-in 0.3s ease-out; 
      }
      .animate-bounce-in { 
        animation: bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55); 
      }
      .animate-gradient { 
        background-size: 400% 400%;
        animation: gradient-shift 4s ease infinite; 
      }
      
      .settings-nav-item {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        transform: translateZ(0);
      }
      .settings-nav-item:hover {
        transform: translateX(8px) scale(1.02);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
      }
      .settings-nav-item.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
        transform: translateX(8px) scale(1.02);
      }
      .settings-nav-item.active .group-hover\\:scale-110 {
        background: rgba(255,255,255,0.2) !important;
        transform: scale(1.1) rotate(360deg);
        transition: all 0.6s ease;
      }
      
      .settings-option-card {
        transition: all 0.3s ease;
        border: 2px solid transparent;
      }
      .settings-option-card:hover {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        border-color: #8b5cf6;
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(139, 92, 246, 0.15);
      }
      
      .settings-button {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      .settings-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
      }
      .settings-button:hover::before {
        left: 100%;
      }
      .settings-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      }
      
      .settings-header-gradient {
        background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c);
        background-size: 400% 400%;
        animation: gradient-shift 8s ease infinite;
      }
      
      .glass-effect {
        backdrop-filter: blur(10px);
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
      }
      
      .dark .settings-nav-item {
        background: rgba(31, 41, 55, 0.8);
        border: 1px solid rgba(75, 85, 99, 0.3);
      }
      .dark .settings-nav-item:hover {
        background: rgba(55, 65, 81, 0.9);
      }
      .dark .settings-option-card {
        background: rgba(31, 41, 55, 0.5);
        border-color: rgba(75, 85, 99, 0.3);
      }
      .dark .settings-option-card:hover {
        background: rgba(55, 65, 81, 0.7);
        border-color: #8b5cf6;
      }
    `;
    document.head.appendChild(style);

    // Add global functions for settings with editable forms
    window.showSettingsCategory = (categoryKey) => {
      const category = settingsCategories[categoryKey];
      const content = document.getElementById('settings-content');
      
      // Update active state with animation
      document.querySelectorAll('.settings-nav-item').forEach(item => {
        item.classList.remove('active');
      });
      const activeItem = document.querySelector(`[data-category="${categoryKey}"]`);
      activeItem.classList.add('active');
      
      content.innerHTML = `
        <div class="space-y-8 animate-slide-in">
          <!-- Category Header -->
          <div class="flex items-center space-x-4 mb-8">
            <div class="w-16 h-16 bg-gradient-to-r ${category.color} rounded-2xl flex items-center justify-center text-white text-2xl shadow-lg animate-bounce-in">
              ${category.icon}
            </div>
            <div>
              <h3 class="text-3xl font-bold text-gray-900 dark:text-white">${category.title}</h3>
              <p class="text-gray-600 dark:text-gray-400 text-lg">Edit and customize your ${category.title.toLowerCase()} preferences</p>
            </div>
          </div>
          
          <!-- Editable Settings Forms -->
          <div class="space-y-8">
            ${category.items.map((item, index) => {
              return generateSettingForm(item, index, categoryKey);
            }).join('')}
          </div>

          <!-- Quick Actions Section -->
          <div class="mt-12 p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-600 rounded-2xl">
            <h4 class="text-xl font-bold text-gray-900 dark:text-white mb-4">üöÄ Quick Actions for ${category.title}</h4>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              <button onclick="saveCategorySettings('${categoryKey}')" class="p-4 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all duration-300 text-center shadow-lg">
                <div class="text-2xl mb-2">üíæ</div>
                <div class="text-sm font-medium">Save All</div>
              </button>
              <button onclick="resetCategorySettings('${categoryKey}')" class="p-4 bg-yellow-600 text-white rounded-xl hover:bg-yellow-700 transition-all duration-300 text-center shadow-lg">
                <div class="text-2xl mb-2">üîÑ</div>
                <div class="text-sm font-medium">Reset</div>
              </button>
              <button onclick="exportCategorySettings('${categoryKey}')" class="p-4 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-300 text-center shadow-lg">
                <div class="text-2xl mb-2">üì•</div>
                <div class="text-sm font-medium">Export</div>
              </button>
              <button onclick="window.toast.success('‚ùì ${category.title} help opened!')" class="p-4 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-all duration-300 text-center shadow-lg">
                <div class="text-2xl mb-2">‚ùì</div>
                <div class="text-sm font-medium">Help</div>
              </button>
            </div>
          </div>
        </div>
      `;
    };

    // Generate editable forms based on setting type
    window.generateSettingForm = (item, index, categoryKey) => {
      const animationDelay = index * 0.1;
      
      if (item.type === 'form') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <form class="grid gap-4" onsubmit="saveSettingForm(event, '${categoryKey}', '${item.label}')">
              ${item.fields.map(field => generateFormField(field)).join('')}
              <div class="flex justify-end space-x-3 mt-6">
                <button type="button" onclick="resetForm(this.closest('form'))" class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                  Reset
                </button>
                <button type="submit" class="px-6 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-300 shadow-lg">
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        `;
      } else if (item.type === 'upload') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <div class="flex items-center space-x-6">
              <div class="flex-shrink-0">
                <img src="${item.currentImage}" alt="Current profile" class="w-24 h-24 rounded-full object-cover border-4 border-purple-200">
              </div>
              <div class="flex-1">
                <p class="text-gray-600 dark:text-gray-400 mb-4">${item.description}</p>
                <div class="flex space-x-3">
                  <input type="file" id="profileUpload" accept="image/*" class="hidden" onchange="handleImageUpload(event)">
                  <button onclick="document.getElementById('profileUpload').click()" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-colors">
                    Choose Photo
                  </button>
                  <button onclick="removeProfilePhoto()" class="px-4 py-2 border border-red-300 text-red-600 rounded-lg hover:bg-red-50 transition-colors">
                    Remove
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      } else if (item.type === 'avatar-upload') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            
            <!-- Current Profile Display -->
            <div class="flex items-center space-x-6 mb-6">
              <div class="flex-shrink-0 relative">
                <img src="${item.currentImage}" alt="Current profile" class="w-32 h-32 rounded-full object-cover border-4 border-purple-200 dark:border-purple-600 shadow-lg">
                <div class="absolute -bottom-2 -right-2 w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white text-xl shadow-lg" data-avatar>
                  ${item.currentAvatar || 'üë©‚Äçüíº'}
                </div>
              </div>
              <div class="flex-1">
                <p class="text-gray-600 dark:text-gray-400 mb-4">${item.description}</p>
                <div class="flex flex-wrap gap-3">
                  <input type="file" id="avatarUpload" accept="image/*" class="hidden" onchange="handleAvatarUpload(event, 'file')">
                  <button onclick="document.getElementById('avatarUpload').click()" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-md">
                    üì∑ Upload Photo
                  </button>
                  <button onclick="document.querySelector('#avatar-selector').style.display = document.querySelector('#avatar-selector').style.display === 'none' ? 'block' : 'none'" class="px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-300 shadow-md">
                    üé≠ Choose Avatar
                  </button>
                  <button onclick="removeProfilePhoto()" class="px-4 py-2 border border-red-300 dark:border-red-600 text-red-600 dark:text-red-400 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors">
                    üóëÔ∏è Remove
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Avatar Selector -->
            <div id="avatar-selector" class="bg-gray-50 dark:bg-gray-700 rounded-xl p-4" style="display: none;">
              <h5 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Choose an Avatar</h5>
              <div class="grid grid-cols-4 gap-3">
                ${item.avatarOptions.map(avatar => `
                  <button onclick="selectAvatar('${avatar}')" class="w-16 h-16 bg-white dark:bg-gray-600 rounded-xl text-3xl hover:bg-purple-100 dark:hover:bg-purple-900/30 transition-all duration-300 border-2 border-transparent hover:border-purple-300 dark:hover:border-purple-600 shadow-md hover:shadow-lg">
                    ${avatar}
                  </button>
                `).join('')}
              </div>
              <div class="mt-4 text-sm text-gray-500 dark:text-gray-400">
                üí° Click any avatar to set it as your profile badge
              </div>
            </div>
          </div>
        `;
      } else if (item.type === 'toggle-group') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <div class="space-y-4">
              ${item.settings.map(setting => `
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <span class="font-medium text-gray-900 dark:text-white">${setting.label}</span>
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" ${setting.enabled ? 'checked' : ''} class="sr-only peer" onchange="toggleSetting('${setting.name}', this.checked)">
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-purple-600"></div>
                  </label>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      } else if (item.type === 'theme') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              ${item.themes.map(theme => `
                <div class="relative cursor-pointer group" onclick="selectTheme('${theme.value}')">
                  <div class="w-full h-20 rounded-lg border-2 border-gray-200 hover:border-purple-500 transition-colors" style="background: ${theme.preview}"></div>
                  <div class="mt-2 text-center">
                    <span class="text-sm font-medium text-gray-900 dark:text-white">${theme.name}</span>
                  </div>
                  <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 rounded-lg flex items-center justify-center">
                    <span class="text-white opacity-0 group-hover:opacity-100 font-bold">Select</span>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      } else if (item.type === 'layout') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <div class="grid grid-cols-3 gap-4">
              ${item.layouts.map(layout => `
                <div class="relative cursor-pointer group" onclick="selectLayout('${layout.value}')">
                  <div class="w-full h-16 bg-gray-100 dark:bg-gray-700 rounded-lg border-2 border-gray-200 hover:border-purple-500 transition-colors flex items-center justify-center">
                    <pre class="text-xs text-gray-600 dark:text-gray-300">${layout.preview}</pre>
                  </div>
                  <div class="mt-2 text-center">
                    <span class="text-sm font-medium text-gray-900 dark:text-white">${layout.name}</span>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      } else if (item.type === 'security') {
        return `
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 animate-slide-in" style="animation-delay: ${animationDelay}s">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-10 h-10 bg-gradient-to-r from-red-500 to-red-600 rounded-xl flex items-center justify-center text-white text-lg">
                ${item.icon}
              </div>
              <h4 class="text-xl font-bold text-gray-900 dark:text-white">${item.label}</h4>
            </div>
            <div class="space-y-4">
              <div class="p-4 ${item.twoFactorEnabled ? 'bg-green-50 border-green-200' : 'bg-yellow-50 border-yellow-200'} border rounded-lg">
                <div class="flex items-center justify-between">
                  <div>
                    <h5 class="font-medium ${item.twoFactorEnabled ? 'text-green-900' : 'text-yellow-900'}">${item.twoFactorEnabled ? '‚úÖ Two-Factor Authentication Enabled' : '‚ö†Ô∏è Two-Factor Authentication Disabled'}</h5>
                    <p class="text-sm ${item.twoFactorEnabled ? 'text-green-700' : 'text-yellow-700'}">${item.twoFactorEnabled ? 'Your account is secure with 2FA' : 'Enable 2FA for better security'}</p>
                  </div>
                  <button onclick="toggle2FA()" class="px-4 py-2 ${item.twoFactorEnabled ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'} text-white rounded-lg transition-colors">
                    ${item.twoFactorEnabled ? 'Disable' : 'Enable'}
                  </button>
                </div>
              </div>
              ${item.twoFactorEnabled ? `
                <div class="grid gap-3">
                  <h6 class="font-medium text-gray-900 dark:text-white">Active 2FA Methods:</h6>
                  ${item.methods.map(method => `
                    <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                      <span class="capitalize text-gray-900 dark:text-white">${method}</span>
                      <button onclick="remove2FAMethod('${method}')" class="text-red-600 hover:text-red-800 text-sm">Remove</button>
                    </div>
                  `).join('')}
                </div>
              ` : ''}
            </div>
          </div>
        `;
      }
      
      return '';
    };

    // Generate form fields based on field type
    window.generateFormField = (field) => {
      const commonClasses = "w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors";
      
      switch (field.type) {
        case 'text':
        case 'email':
        case 'tel':
        case 'password':
        case 'date':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label} ${field.required ? '<span class="text-red-500">*</span>' : ''}</label>
              <input 
                type="${field.type}" 
                name="${field.name}" 
                value="${field.value || ''}" 
                ${field.required ? 'required' : ''}
                ${field.readonly ? 'readonly' : ''}
                class="${commonClasses} ${field.readonly ? 'bg-gray-100 dark:bg-gray-600' : ''}"
                placeholder="Enter ${field.label.toLowerCase()}"
              >
            </div>
          `;
        case 'number':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label}</label>
              <input 
                type="number" 
                name="${field.name}" 
                value="${field.value || ''}" 
                min="${field.min || ''}"
                max="${field.max || ''}"
                step="${field.step || ''}"
                class="${commonClasses}"
              >
            </div>
          `;
        case 'select':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label}</label>
              <select name="${field.name}" class="${commonClasses}">
                ${field.options.map(option => `
                  <option value="${option}" ${field.value === option ? 'selected' : ''}>${option.charAt(0).toUpperCase() + option.slice(1)}</option>
                `).join('')}
              </select>
            </div>
          `;
        case 'textarea':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label}</label>
              <textarea 
                name="${field.name}" 
                rows="4" 
                class="${commonClasses}"
                placeholder="Enter ${field.label.toLowerCase()}"
              >${field.value || ''}</textarea>
            </div>
          `;
        case 'checkbox':
          return `
            <div class="flex items-center space-x-3">
              <input 
                type="checkbox" 
                name="${field.name}" 
                id="${field.name}"
                ${field.checked ? 'checked' : ''}
                class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500 dark:focus:ring-purple-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
              >
              <label for="${field.name}" class="text-sm font-medium text-gray-900 dark:text-white">${field.label}</label>
            </div>
          `;
        case 'range':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label}: <span id="${field.name}-value">${field.value}${field.unit || ''}</span></label>
              <input 
                type="range" 
                name="${field.name}" 
                min="${field.min || 0}"
                max="${field.max || 100}"
                value="${field.value || 50}"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 slider"
                oninput="document.getElementById('${field.name}-value').textContent = this.value + '${field.unit || ''}'"
              >
            </div>
          `;
        case 'color':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">${field.label}</label>
              <div class="flex items-center space-x-3">
                <input 
                  type="color" 
                  name="${field.name}" 
                  value="${field.value || '#667eea'}"
                  class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer"
                >
                <input 
                  type="text" 
                  value="${field.value || '#667eea'}"
                  class="${commonClasses} flex-1"
                  onchange="this.previousElementSibling.value = this.value"
                >
              </div>
            </div>
          `;
        case 'checkbox-group':
          return `
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">${field.label}</label>
              <div class="space-y-2">
                ${field.options.map(option => `
                  <div class="flex items-center space-x-3">
                    <input 
                      type="checkbox" 
                      name="${field.name}[]" 
                      value="${option.value}"
                      id="${option.value}"
                      ${option.checked ? 'checked' : ''}
                      class="w-4 h-4 text-purple-600 bg-gray-100 border-gray-300 rounded focus:ring-purple-500"
                    >
                    <label for="${option.value}" class="text-sm text-gray-900 dark:text-white">${option.label}</label>
                  </div>
                `).join('')}
              </div>
            </div>
          `;
        default:
          return '';
      }
    };
    // Enhanced setting action handler with form utilities
    window.handleSettingAction = (settingName, actionFunction) => {
      window.toast.info(`‚öôÔ∏è Configuring ${settingName}...`);
      setTimeout(() => {
        actionFunction();
      }, 500);
    };

    // Form handling utilities
    window.saveSettingForm = (event, category, section) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData.entries());
      
      // Save to localStorage with category prefix
      Object.keys(data).forEach(key => {
        localStorage.setItem(`${category}_${section}_${key}`, data[key]);
      });
      
      window.toast.success(`‚úÖ ${section} settings saved successfully!`);
    };

    window.resetForm = (form) => {
      form.reset();
      window.toast.info('üîÑ Form reset to original values');
    };

    window.saveCategorySettings = (categoryKey) => {
      const forms = document.querySelectorAll('form');
      let savedCount = 0;
      
      forms.forEach(form => {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        Object.keys(data).forEach(key => {
          localStorage.setItem(`${categoryKey}_${key}`, data[key]);
          savedCount++;
        });
      });
      
      window.toast.success(`üíæ All ${categoryKey} settings saved! (${savedCount} items)`);
    };

    window.resetCategorySettings = (categoryKey) => {
      if (confirm(`üîÑ Reset all ${categoryKey} settings to default values?`)) {
        // Remove all localStorage items for this category
        Object.keys(localStorage).forEach(key => {
          if (key.startsWith(`${categoryKey}_`)) {
            localStorage.removeItem(key);
          }
        });
        
        // Refresh the category view
        showSettingsCategory(categoryKey);
        window.toast.success(`üîÑ ${categoryKey} settings reset to defaults`);
      }
    };

    window.exportCategorySettings = (categoryKey) => {
      const categoryData = {};
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith(`${categoryKey}_`)) {
          categoryData[key] = localStorage.getItem(key);
        }
      });
      
      const blob = new Blob([JSON.stringify(categoryData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `faredeal-${categoryKey}-settings.json`;
      a.click();
      
      window.toast.success(`üì• ${categoryKey} settings exported!`);
    };

    // Image upload handler
    window.handleImageUpload = (event) => {
      const file = event.target.files[0];
      if (file) {
        if (file.size > 5 * 1024 * 1024) {
          window.toast.error('‚ùå File size must be less than 5MB');
          return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = document.querySelector('img[alt="Current profile"]');
          if (img) {
            img.src = e.target.result;
            localStorage.setItem('profile_profileImage', e.target.result);
            window.toast.success('üì∑ Profile photo updated successfully!');
          }
        };
        reader.readAsDataURL(file);
      }
    };

    window.removeProfilePhoto = () => {
      if (confirm('Remove current profile photo?')) {
        const img = document.querySelector('img[alt="Current profile"]');
        if (img) {
          img.src = 'https://via.placeholder.com/150x150/667eea/ffffff?text=JD';
          localStorage.removeItem('profile_profileImage');
          window.toast.success('üóëÔ∏è Profile photo removed');
        }
      }
    };

    // Toggle handlers
    window.toggleSetting = (settingName, enabled) => {
      localStorage.setItem(`setting_${settingName}`, enabled);
      window.toast.success(`${enabled ? '‚úÖ' : '‚ùå'} ${settingName} ${enabled ? 'enabled' : 'disabled'}`);
    };

    window.toggle2FA = () => {
      const current = localStorage.getItem('security_2fa_enabled') === 'true';
      localStorage.setItem('security_2fa_enabled', !current);
      
      if (!current) {
        window.toast.success('üõ°Ô∏è Two-Factor Authentication enabled');
        // Simulate sending setup instructions
        setTimeout(() => {
          window.toast.info('üì± Setup instructions sent to your phone');
        }, 2000);
      } else {
        window.toast.warning('‚ö†Ô∏è Two-Factor Authentication disabled');
      }
      
      // Refresh the security category to show updated state
      setTimeout(() => showSettingsCategory('security'), 1000);
    };

    window.remove2FAMethod = (method) => {
      if (confirm(`Remove ${method} as a 2FA method?`)) {
        window.toast.success(`üóëÔ∏è ${method} removed from 2FA methods`);
      }
    };

    // Theme and layout handlers
    window.selectTheme = (themeValue) => {
      localStorage.setItem('appearance_theme', themeValue);
      
      // Apply theme changes
      if (themeValue === 'dark') {
        document.body.classList.add('dark');
      } else {
        document.body.classList.remove('dark');
      }
      
      if (themeValue === 'uganda') {
        document.body.style.background = 'linear-gradient(45deg, #000000, #FCDC00, #D90000)';
        window.toast.success('üá∫üá¨ Uganda theme activated!');
      } else {
        document.body.style.background = '';
        window.toast.success(`üé® ${themeValue} theme activated!`);
      }
    };

    window.selectLayout = (layoutValue) => {
      localStorage.setItem('appearance_layout', layoutValue);
      window.toast.success(`üìä ${layoutValue} layout selected!`);
      
      // Could implement actual layout changes here
      setTimeout(() => {
        window.toast.info('üí° Layout will be applied on next page refresh');
      }, 1500);
    };

    // Global utility functions with enhanced features
    window.exportSettings = () => {
      const settings = { 
        darkMode: localStorage.getItem('darkMode'),
        language: localStorage.getItem('language') || 'en',
        currency: localStorage.getItem('currency') || 'UGX',
        notifications: localStorage.getItem('notifications') || 'enabled',
        theme: localStorage.getItem('theme') || 'default',
        timestamp: new Date().toISOString(),
        version: '2.1.0',
        location: 'Uganda'
      };
      const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `faredeal-settings-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      window.toast.success('üì• Settings exported successfully! File downloaded.');
    };

    window.importSettings = () => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      input.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            try {
              const settings = JSON.parse(e.target.result);
              let importedCount = 0;
              Object.keys(settings).forEach(key => {
                if (key !== 'timestamp' && key !== 'version') {
                  localStorage.setItem(key, settings[key]);
                  importedCount++;
                }
              });
              window.toast.success(`üì§ Settings imported successfully! ${importedCount} settings restored.`);
            } catch (error) {
              window.toast.error('‚ùå Invalid settings file format');
            }
          };
          reader.readAsText(file);
        }
      };
      input.click();
    };

    window.backupSettings = () => {
      const allSettings = {};
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        allSettings[key] = localStorage.getItem(key);
      }
      
      const backup = {
        settings: allSettings,
        backup_date: new Date().toISOString(),
        user_agent: navigator.userAgent,
        app_version: '2.1.0',
        backup_id: Math.random().toString(36).substr(2, 9)
      };
      
      const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `faredeal-backup-${backup.backup_id}.json`;
      a.click();
      window.toast.success('ÔøΩ Complete backup created successfully!');
    };

    window.resetSettings = () => {
      const confirmModal = document.createElement('div');
      confirmModal.className = 'fixed inset-0 bg-black bg-opacity-60 z-[60] flex items-center justify-center p-4';
      confirmModal.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-md animate-modalIn">
          <div class="p-6">
            <div class="text-center">
              <div class="text-6xl mb-4">üîÑ</div>
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">Reset All Settings?</h3>
              <p class="text-gray-600 dark:text-gray-400 mb-6">This will restore all settings to their default values. This action cannot be undone.</p>
              <div class="flex space-x-3">
                <button onclick="this.closest('.fixed').remove()" class="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                  Cancel
                </button>
                <button onclick="
                  localStorage.clear();
                  window.toast.success('üîÑ All settings reset to default');
                  this.closest('.fixed').remove();
                " class="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                  Reset All
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      document.body.appendChild(confirmModal);
    };

    window.saveSettings = () => {
      // Simulate saving with progress
      const progressModal = document.createElement('div');
      progressModal.className = 'fixed inset-0 bg-black bg-opacity-60 z-[60] flex items-center justify-center p-4';
      progressModal.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-md animate-modalIn">
          <div class="p-6 text-center">
            <div class="text-4xl mb-4">üíæ</div>
            <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Saving Settings...</h3>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 mb-4">
              <div id="progress-bar" class="bg-gradient-to-r from-purple-500 to-pink-500 h-3 rounded-full transition-all duration-500" style="width: 0%"></div>
            </div>
            <p id="progress-text" class="text-sm text-gray-600 dark:text-gray-400">Initializing...</p>
          </div>
        </div>
      `;
      document.body.appendChild(progressModal);
      
      const progressBar = progressModal.querySelector('#progress-bar');
      const progressText = progressModal.querySelector('#progress-text');
      const steps = [
        { width: '20%', text: 'Validating settings...' },
        { width: '40%', text: 'Encrypting data...' },
        { width: '60%', text: 'Syncing to server...' },
        { width: '80%', text: 'Creating backup...' },
        { width: '100%', text: 'Settings saved successfully!' }
      ];
      
      let currentStep = 0;
      const interval = setInterval(() => {
        if (currentStep < steps.length) {
          progressBar.style.width = steps[currentStep].width;
          progressText.textContent = steps[currentStep].text;
          currentStep++;
        } else {
          clearInterval(interval);
          setTimeout(() => {
            progressModal.remove();
            window.toast.success('üíæ All settings saved successfully!');
            setTimeout(() => document.querySelector('.fixed').remove(), 1500);
          }, 1000);
        }
      }, 800);
    };

    document.body.appendChild(settingsModal);
    
    // Close when clicking outside
    settingsModal.addEventListener('click', (e) => {
      if (e.target === settingsModal) {
        settingsModal.remove();
      }
    });

    toast.success('‚öôÔ∏è Advanced settings panel opened!');
  };

  // Order Verification Helper Functions
  const handleBulkApproval = (action) => {
    const selectedOrderDetails = pendingOrders.filter(o => selectedOrders.includes(o.id));
    const message = action === 'approve' 
      ? `‚úÖ ${selectedOrders.length} orders approved successfully`
      : `‚ùå ${selectedOrders.length} orders rejected`;
    
    // Simulate API call
    setTimeout(() => {
      toast.success(message);
      setSelectedOrders([]);
      setBulkAction('');
    }, 1000);
  };

  // Form submission handler for settings forms
  const saveSettingForm = (event, categoryKey, formLabel) => {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    
    // Extract form data
    const data = {};
    for (let [key, value] of formData.entries()) {
      // Handle checkboxes properly
      if (form.querySelector(`[name="${key}"]`)?.type === 'checkbox') {
        data[key] = value === 'on';
      } else {
        data[key] = value;
      }
    }
    
    // Update the appropriate state based on category
    switch (categoryKey) {
      case 'profile':
        const updatedProfile = { ...managerProfile };
        
        // Update profile fields
        if (data.firstName && data.lastName) {
          updatedProfile.name = `${data.firstName} ${data.lastName}`;
        }
        if (data.email) updatedProfile.email = data.email;
        if (data.phone) updatedProfile.phoneNumber = data.phone;
        if (data.location) updatedProfile.location = data.location;
        if (data.status) updatedProfile.status = data.status;
        if (data.department) updatedProfile.department = data.department;
        if (data.jobTitle) updatedProfile.role = data.jobTitle;
        if (data.languages) updatedProfile.languages = data.languages.split(',').map(lang => lang.trim());
        
        // Update React state
        setManagerProfile(updatedProfile);
        
        // Save to localStorage for persistence
        localStorage.setItem('managerProfile', JSON.stringify(updatedProfile));
        break;
        
      case 'appearance':
        const updatedTheme = { ...themeSettings, ...data };
        setThemeSettings(updatedTheme);
        break;
        
      case 'notifications':
        const updatedNotifications = { ...notificationSettings, ...data };
        setNotificationSettings(updatedNotifications);
        break;
        
      case 'security':
        const updatedSecurity = { ...securitySettings, ...data };
        setSecuritySettings(updatedSecurity);
        break;
        
      case 'business':
        const updatedBusiness = { ...businessSettings, ...data };
        setBusinessSettings(updatedBusiness);
        break;
        
      case 'system':
        // Handle system preferences
        Object.keys(data).forEach(key => {
          localStorage.setItem(`system_${key}`, data[key]);
        });
        break;
        
      default:
        // Generic save to localStorage with category prefix
        Object.keys(data).forEach(key => {
          localStorage.setItem(`${categoryKey}_${key}`, data[key]);
        });
        break;
    }
    
    // Show success message with enhanced feedback
    const successMessages = {
      profile: 'üë§ Profile updated successfully!',
      appearance: 'üé® Theme applied successfully!',
      notifications: 'üîî Notification preferences saved!',
      security: 'üîí Security settings updated!',
      business: 'üè¢ Business settings saved!',
      system: '‚öôÔ∏è System preferences updated!'
    };
    
    toast.success(successMessages[categoryKey] || `‚úÖ ${formLabel} updated successfully!`);
    
    // Add visual feedback to the submit button
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      const originalText = submitButton.innerHTML;
      submitButton.innerHTML = '‚úì Saved!';
      submitButton.classList.add('bg-green-500');
      submitButton.disabled = true;
      
      setTimeout(() => {
        submitButton.innerHTML = originalText;
        submitButton.classList.remove('bg-green-500');
        submitButton.disabled = false;
      }, 2000);
    }
  };

  // Avatar upload and selection handler
  const handleAvatarUpload = (event, type = 'file') => {
    if (type === 'file') {
      const file = event.target.files[0];
      if (file) {
        if (file.size > 5 * 1024 * 1024) {
          toast.error('‚ùå File size must be less than 5MB');
          return;
        }
        
        if (!file.type.startsWith('image/')) {
          toast.error('‚ùå Please select a valid image file');
          return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
          const imageUrl = e.target.result;
          
          // Update profile image in UI
          const profileImages = document.querySelectorAll('img[alt*="profile"], img[alt*="Profile"]');
          profileImages.forEach(img => {
            img.src = imageUrl;
          });
          
          // Save to localStorage
          localStorage.setItem('profile_profileImage', imageUrl);
          
          // Update manager profile state
          const updatedProfile = { ...managerProfile, profileImage: imageUrl };
          setManagerProfile(updatedProfile);
          localStorage.setItem('managerProfile', JSON.stringify(updatedProfile));
          
          toast.success('üì∑ Profile photo updated successfully!');
        };
        reader.readAsDataURL(file);
      }
    }
  };

  // Avatar emoji selection handler
  const selectAvatar = (emoji) => {
    // Update all profile avatar displays
    const avatarElements = document.querySelectorAll('[data-avatar]');
    avatarElements.forEach(el => {
      el.textContent = emoji;
    });
    
    // Save to localStorage
    localStorage.setItem('profile_avatar', emoji);
    
    // Update manager profile state
    const updatedProfile = { ...managerProfile, avatar: emoji };
    setManagerProfile(updatedProfile);
    localStorage.setItem('managerProfile', JSON.stringify(updatedProfile));
    
    toast.success(`üé≠ Avatar updated to ${emoji}!`);
  };

  // Reset form functionality
  const resetForm = (form) => {
    if (confirm('Reset all changes in this form?')) {
      form.reset();
      toast.info('üîÑ Form reset to original values');
    }
  };

  // Make functions globally available for the dynamically generated HTML
  useEffect(() => {
    window.saveSettingForm = saveSettingForm;
    window.handleAvatarUpload = handleAvatarUpload;
    window.selectAvatar = selectAvatar;
    window.resetForm = resetForm;
    
    return () => {
      delete window.saveSettingForm;
      delete window.handleAvatarUpload;
      delete window.selectAvatar;
      delete window.resetForm;
    };
  }, [managerProfile, setManagerProfile]);

  // Tabs definition for navigation
  const tabs = [
    { 
      id: 'overview', 
      label: 'Dashboard', 
      icon: FiBarChart,
      description: 'Business overview',
      color: 'from-blue-500 to-blue-600',
      ugandaEmoji: 'üìä'
    },
    { 
      id: 'portal-control', 
      label: 'Portal Control', 
      icon: FiNavigation,
      description: 'Real-time portal management',
      color: 'from-cyan-500 to-cyan-600',
      ugandaEmoji: 'üéõÔ∏è'
    },
    { 
      id: 'analytics', 
      label: 'Analytics', 
      icon: FiPieChart,
      description: 'Data insights',
      color: 'from-purple-500 to-purple-600',
      ugandaEmoji: 'üìà'
    },
    { 
      id: 'team', 
      label: 'Team', 
      icon: FiUsers,
      description: 'Team management',
      color: 'from-green-500 to-green-600',
      ugandaEmoji: 'üë•'
    },
    { 
      id: 'suppliers', 
      label: 'Suppliers', 
      icon: FiTruck,
      description: 'Supplier verification',
      color: 'from-orange-500 to-orange-600',
      ugandaEmoji: 'üöõ'
    },
    { 
      id: 'orders', 
      label: 'Orders', 
      icon: FiPackage,
      description: 'Order verification',
      color: 'from-red-500 to-red-600',
      ugandaEmoji: 'üì¶'
    },
    { 
      id: 'inventory', 
      label: 'Inventory', 
      icon: FiGrid,
      description: 'Inventory access',
      color: 'from-indigo-500 to-indigo-600',
      ugandaEmoji: 'üìã'
    },
    { 
      id: 'reports', 
      label: 'Reports', 
      icon: FiFileText,
      description: 'Report access',
      color: 'from-pink-500 to-pink-600',
      ugandaEmoji: 'üìä'
    },
    { 
      id: 'alerts', 
      label: 'Alerts', 
      icon: FiBell,
      description: 'Notifications',
      color: 'from-yellow-500 to-yellow-600',
      ugandaEmoji: 'üîî'
    }
  ];

  const handleOrderSelect = (orderId) => {
    setSelectedOrders(prev => 
      prev.includes(orderId) 
        ? prev.filter(id => id !== orderId)
        : [...prev, orderId]
    );
  };

  const COLORS = ['#3B82F6', '#8B5CF6', '#10B981', '#F59E0B', '#EF4444'];

  // Edit Modal Component
  const renderEditModal = () => {
    if (!editModal.isOpen) return null;

    const renderTeamEditForm = () => (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
            <input
              type="text"
              defaultValue={editModal.data?.name || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter full name"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <select
              defaultValue={editModal.data?.role || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select Role</option>
              <option value="Cashier">Cashier</option>
              <option value="Stock Keeper">Stock Keeper</option>
              <option value="Assistant Manager">Assistant Manager</option>
              <option value="Manager">Manager</option>
            </select>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Department</label>
            <select
              defaultValue={editModal.data?.department || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select Department</option>
              <option value="Frontend">Frontend</option>
              <option value="Backend">Backend</option>
              <option value="Management">Management</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Join Date</label>
            <input
              type="date"
              defaultValue={editModal.data?.joinDate || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Skills</label>
          <input
            type="text"
            defaultValue={editModal.data?.skills?.join(', ') || ''}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter skills separated by commas"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Goals</label>
          <textarea
            defaultValue={editModal.data?.goals?.join('\n') || ''}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter goals (one per line)"
          />
        </div>
      </div>
    );

    const renderSupplierEditForm = () => (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Company Name</label>
            <input
              type="text"
              defaultValue={editModal.data?.name || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter company name"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Contact Person</label>
            <input
              type="text"
              defaultValue={editModal.data?.contactPerson || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter contact person name"
            />
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input
              type="email"
              defaultValue={editModal.data?.email || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter email address"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
            <input
              type="tel"
              defaultValue={editModal.data?.phone || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter phone number"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Address</label>
          <input
            type="text"
            defaultValue={editModal.data?.address || ''}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter address"
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Business Type</label>
            <select
              defaultValue={editModal.data?.businessType || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select Business Type</option>
              <option value="Electronics">Electronics</option>
              <option value="Food & Beverages">Food & Beverages</option>
              <option value="Office Supplies">Office Supplies</option>
              <option value="Clothing">Clothing</option>
              <option value="Home & Garden">Home & Garden</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select
              defaultValue={editModal.data?.status || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="rejected">Rejected</option>
            </select>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <textarea
            defaultValue={editModal.data?.notes || ''}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter additional notes"
          />
        </div>
      </div>
    );

    const renderTrainingEditForm = () => (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Training Title</label>
          <input
            type="text"
            defaultValue={editModal.data?.title || ''}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter training title"
          />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
            <select
              defaultValue={editModal.data?.category || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select Category</option>
              <option value="Technical">Technical</option>
              <option value="Soft Skills">Soft Skills</option>
              <option value="Operations">Operations</option>
              <option value="Management">Management</option>
              <option value="Compliance">Compliance</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Duration</label>
            <input
              type="text"
              defaultValue={editModal.data?.duration || ''}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="e.g., 4 hours"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select
            defaultValue={editModal.data?.status || ''}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="active">Active</option>
            <option value="upcoming">Upcoming</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea
            rows={4}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter training description"
          />
        </div>
      </div>
    );

    const renderScheduleEditForm = () => (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Day</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="">Select Day</option>
              <option value="Monday">Monday</option>
              <option value="Tuesday">Tuesday</option>
              <option value="Wednesday">Wednesday</option>
              <option value="Thursday">Thursday</option>
              <option value="Friday">Friday</option>
              <option value="Saturday">Saturday</option>
              <option value="Sunday">Sunday</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Shift Time</label>
            <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
              <option value="">Select Shift</option>
              <option value="8AM-4PM">Morning Shift (8AM-4PM)</option>
              <option value="4PM-12AM">Evening Shift (4PM-12AM)</option>
              <option value="12AM-8AM">Night Shift (12AM-8AM)</option>
            </select>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Assigned Members</label>
          <div className="space-y-2">
            {teamPerformance.map((member) => (
              <label key={member.id} className="flex items-center space-x-2">
                <input type="checkbox" className="rounded border-gray-300" />
                <span className="text-sm text-gray-700">{member.name} ({member.role})</span>
              </label>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Coverage Status</label>
          <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="Full">Full Coverage</option>
            <option value="Partial">Partial Coverage</option>
            <option value="Understaffed">Understaffed</option>
          </select>
        </div>
      </div>
    );

    const renderPermissionsEditForm = () => (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">User</label>
          <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="">Select User</option>
            {teamPerformance.map((member) => (
              <option key={member.id} value={member.name}>{member.name} ({member.role})</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Report Access Permissions</label>
          <div className="space-y-2">
            {['Sales Reports', 'Customer Reports', 'Financial Reports', 'Inventory Reports', 'Stock Reports', 'Performance Reports'].map((report) => (
              <label key={report} className="flex items-center space-x-2">
                <input type="checkbox" className="rounded border-gray-300" />
                <span className="text-sm text-gray-700">{report}</span>
              </label>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Access Level</label>
          <select className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            <option value="read">Read Only</option>
            <option value="write">Read & Write</option>
            <option value="admin">Full Admin Access</option>
          </select>
        </div>
      </div>
    );

    const getFormContent = () => {
      switch (editModal.type) {
        case 'team':
          return renderTeamEditForm();
        case 'supplier':
          return renderSupplierEditForm();
        case 'training':
          return renderTrainingEditForm();
        case 'schedule':
          return renderScheduleEditForm();
        case 'permissions':
          return renderPermissionsEditForm();
        default:
          return null;
      }
    };

    const getModalTitle = () => {
      const action = editModal.mode === 'add' ? 'Add' : 'Edit';
      const type = editModal.type.charAt(0).toUpperCase() + editModal.type.slice(1);
      return `${action} ${type}`;
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">{getModalTitle()}</h2>
            <button
              onClick={closeEditModal}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <FiXCircle className="h-6 w-6" />
            </button>
          </div>
          
          <div className="mb-6">
            {getFormContent()}
          </div>
          
          <div className="flex items-center justify-end space-x-3">
            <button
              onClick={closeEditModal}
              className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={() => handleSaveEdit({})}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              {editModal.mode === 'add' ? 'Add' : 'Save Changes'}
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderOverview = () => (
    <div className="space-y-6 animate-fadeInUp">
      {/* üá∫üá¨ Enhanced Uganda-themed Welcome Section */}
      <div className="bg-gradient-to-r from-yellow-500 via-red-500 to-black rounded-xl p-8 text-white shadow-xl relative overflow-hidden">
        <div className="absolute inset-0 bg-black bg-opacity-10 backdrop-blur-sm"></div>
        <div className="relative">
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <div className="flex items-center space-x-4 mb-4">
                <div className="text-5xl animate-bounce">üá∫üá¨</div>
                <div>
                  <h1 className="text-4xl font-bold mb-2 flex items-center space-x-2">
                    <span>{getGreeting()}, {managerProfile.name}!</span>
                    <div className="text-3xl">üë©‚Äçüíº</div>
                  </h1>
                  <p className="text-yellow-100 text-lg">
                    Pearl of Africa Business Command Center
                  </p>
                  <div className="flex items-center space-x-2 mt-2">
                    <span className="bg-green-500 px-3 py-1 rounded-full text-xs font-bold">ONLINE</span>
                    <span className="text-yellow-200">üìç Kampala, Uganda</span>
                  </div>
                </div>
              </div>
              
              {/* Enhanced Uganda Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                <div className="bg-white bg-opacity-20 rounded-lg p-4 backdrop-blur-sm border border-yellow-300 border-opacity-30 hover:bg-opacity-30 transition-all duration-300 cursor-pointer group">
                  <div className="flex items-center space-x-3">
                    <div className="text-2xl group-hover:animate-spin">‚è∞</div>
                    <div>
                      <p className="text-sm text-yellow-100 font-medium">East Africa Time</p>
                      <p className="font-bold text-lg">{currentTime.toLocaleTimeString('en-UG')}</p>
                      <p className="text-xs text-yellow-200">UTC+3</p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white bg-opacity-20 rounded-lg p-4 backdrop-blur-sm border border-yellow-300 border-opacity-30 hover:bg-opacity-30 transition-all duration-300 cursor-pointer group">
                  <div className="flex items-center space-x-3">
                    <div className="text-2xl group-hover:animate-pulse">üìÖ</div>
                    <div>
                      <p className="text-sm text-yellow-100 font-medium">Today's Business</p>
                      <p className="font-bold text-lg">{currentTime.toLocaleDateString('en-UG')}</p>
                      <p className="text-xs text-yellow-200">Uganda Calendar</p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white bg-opacity-20 rounded-lg p-4 backdrop-blur-sm border border-yellow-300 border-opacity-30 hover:bg-opacity-30 transition-all duration-300 cursor-pointer group">
                  <div className="flex items-center space-x-3">
                    <div className="text-2xl group-hover:animate-bounce">üìà</div>
                    <div>
                      <p className="text-sm text-yellow-100 font-medium">Growth Rate</p>
                      <p className="font-bold text-lg text-green-300">+{businessMetrics.weeklyGrowth}%</p>
                      <p className="text-xs text-yellow-200">vs last week</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Uganda Cultural Greeting */}
              <div className="mt-4 bg-black bg-opacity-30 rounded-lg p-4">
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">ÔøΩÔ∏è</div>
                  <div>
                    <p className="text-sm text-yellow-200">Today's Greeting:</p>
                    <p className="font-semibold text-yellow-100">
                      "{UGANDA_GREETINGS[currentTime.getHours() < 12 ? 'morning' : 
                         currentTime.getHours() < 17 ? 'afternoon' : 'evening'].luganda}"
                    </p>
                    <p className="text-xs text-yellow-300">Luganda - Good {currentTime.getHours() < 12 ? 'Morning' : 
                      currentTime.getHours() < 17 ? 'Afternoon' : 'Evening'}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="text-right ml-8 hidden lg:block">
              <div className="text-8xl mb-4 animate-pulse">üè™</div>
              <p className="text-yellow-100 text-xl font-bold mb-2">Webale Nnyo!</p>
              <p className="text-yellow-200 text-sm mb-4">Thank you for great leadership</p>
              
              <div className="space-y-3">
                <button 
                  onClick={() => {
                    toast.success('üîÑ Refreshing business data...');
                    setTimeout(() => toast.success('‚úÖ Data refreshed successfully!'), 1500);
                  }}
                  className="w-full bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center space-x-2 group"
                >
                  <FiRefreshCw className="h-4 w-4 group-hover:animate-spin" />
                  <span>Refresh Data</span>
                </button>
                
                <button 
                  onClick={() => {
                    toast.success('üìä Generating Uganda business report...');
                    setTimeout(() => toast.success('üìÑ Report downloaded successfully!'), 2000);
                  }}
                  className="w-full bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center space-x-2 group"
                >
                  <FiDownload className="h-4 w-4 group-hover:animate-bounce" />
                  <span>Export Report</span>
                </button>
                
                <button 
                  onClick={handleSettingsClick}
                  className="w-full bg-white bg-opacity-20 px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center space-x-2 group"
                  title="Advanced Settings"
                >
                  <FiSettings className="h-4 w-4 group-hover:rotate-180 transition-transform duration-500" />
                  <span>Settings</span>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Floating Uganda Elements */}
        <div className="absolute top-4 right-4 text-2xl animate-pulse opacity-50">ü¶ì</div>
        <div className="absolute bottom-4 left-4 text-xl animate-pulse opacity-50">üåÑ</div>
        <div className="absolute top-1/2 right-8 text-lg animate-bounce opacity-30">‚òï</div>
      </div>

      {/* üá∫üá¨ Enhanced Uganda Business Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[
          { 
            title: 'üá∫üá¨ Today\'s Revenue', 
            value: formatCurrency(businessMetrics.todayRevenue), 
            icon: 'üí∞', 
            color: 'from-green-500 to-green-600', 
            change: `+${businessMetrics.weeklyGrowth}%`,
            subtitle: `Mobile Money: ${businessMetrics.mobileMoneyRatio}%`,
            ugandaInfo: 'MTN & Airtel Money',
            sparkline: [12, 15, 18, 16, 22, 25, 19]
          },
          { 
            title: 'üì¶ Today\'s Orders', 
            value: businessMetrics.todayOrders, 
            icon: 'üõí', 
            color: 'from-blue-500 to-blue-600', 
            change: `+${businessMetrics.monthlyGrowth}%`,
            subtitle: `Peak time: 2-6 PM`,
            ugandaInfo: 'Kampala deliveries',
            sparkline: [45, 52, 67, 58, 78, 89, 71]
          },
          { 
            title: 'üë• Active Customers', 
            value: businessMetrics.todayCustomers, 
            icon: 'üè™', 
            color: 'from-purple-500 to-purple-600', 
            change: '+15.2%',
            subtitle: `Loyalty members: ${businessMetrics.returningCustomerRate}%`,
            ugandaInfo: 'Kampala & suburbs',
            sparkline: [156, 189, 195, 212, 198, 234, 256]
          },
          { 
            title: 'üìä Conversion Rate', 
            value: `${businessMetrics.conversionRate}%`, 
            icon: 'üéØ', 
            color: 'from-orange-500 to-orange-600', 
            change: '+3.2%',
            subtitle: 'Peak performance!',
            ugandaInfo: 'Above Uganda avg',
            sparkline: [68, 70, 69, 71, 72, 73, 72.5]
          }
        ].map((metric, index) => (
          <div 
            key={index} 
            className="bg-white rounded-xl p-6 shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:scale-105 border-l-4 border-transparent hover:border-yellow-500 group cursor-pointer relative overflow-hidden"
            onClick={() => {
              toast.success(`üìä Viewing detailed ${metric.title} analytics`);
              setActiveTab('analytics');
            }}
          >
            {/* Background pattern */}
            <div className="absolute inset-0 opacity-5 group-hover:opacity-10 transition-opacity duration-300">
              <div className="absolute inset-0 bg-gradient-to-br from-yellow-400 via-red-500 to-black"></div>
            </div>
            
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <span className="text-2xl">{metric.icon}</span>
                    <p className="text-gray-600 text-sm font-bold">{metric.title}</p>
                  </div>
                  <p className="text-3xl font-bold text-gray-900 mb-1 group-hover:text-green-600 transition-colors">
                    {metric.value}
                  </p>
                  <div className="flex items-center space-x-2 mb-2">
                    <span className="text-green-600 text-sm font-bold flex items-center bg-green-50 px-2 py-1 rounded-full">
                      <FiTrendingUp className="h-3 w-3 mr-1" />
                      {metric.change}
                    </span>
                    <span className="text-xs text-gray-500 bg-gray-50 px-2 py-1 rounded-full">
                      {metric.ugandaInfo}
                    </span>
                  </div>
                  <p className="text-gray-500 text-xs">{metric.subtitle}</p>
                </div>
                
                <div className="text-right">
                  <div className={`p-4 rounded-xl bg-gradient-to-r ${metric.color} shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-110`}>
                    <div className="text-3xl text-white group-hover:animate-bounce">
                      {metric.icon}
                    </div>
                  </div>
                  
                  {/* Mini sparkline */}
                  <div className="mt-2 flex items-end space-x-1 justify-center">
                    {metric.sparkline.map((value, i) => (
                      <div
                        key={i}
                        className="w-1 bg-gradient-to-t from-gray-300 to-blue-500 rounded-full group-hover:from-yellow-400 group-hover:to-green-500 transition-all duration-300"
                        style={{ 
                          height: `${(value / Math.max(...metric.sparkline)) * 20}px`,
                          animationDelay: `${i * 100}ms`
                        }}
                      />
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Uganda-specific indicators */}
              <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                <div className="flex items-center space-x-1 text-xs text-gray-500">
                  <span>üá∫üá¨</span>
                  <span>Uganda Market</span>
                </div>
                <div className="flex items-center space-x-1 text-xs text-green-600">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span>Live Data</span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* üá∫üá¨ Enhanced Real-time Uganda Business Activity Feed */}
      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900 flex items-center space-x-3">
            <div className="relative">
              <FiBell className="h-6 w-6 text-blue-600" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-ping"></div>
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full"></div>
            </div>
            <span>üá∫üá¨ Live Business Activity</span>
            <span className="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">Kampala</span>
          </h3>
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm text-gray-600 font-medium">Live Updates</span>
            </div>
            <button 
              onClick={() => {
                toast.success('üîÑ Refreshing activity feed...');
                setTimeout(() => toast.success('‚úÖ Latest activities loaded!'), 1000);
              }}
              className="p-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors group"
            >
              <FiRefreshCw className="h-4 w-4 text-blue-600 group-hover:animate-spin" />
            </button>
          </div>
        </div>
        
        <div className="space-y-4 max-h-80 overflow-y-auto scrollbar-hide">
          {realTimeActivity.map((activity, index) => (
            <div 
              key={activity.id} 
              className="flex items-center space-x-4 p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg hover:from-blue-50 hover:to-green-50 transition-all duration-300 cursor-pointer group border border-transparent hover:border-blue-200"
              onClick={() => {
                toast.info(`üìã Viewing details for: ${activity.message.substring(0, 30)}...`);
              }}
              style={{
                animationDelay: `${index * 200}ms`,
                animation: 'slideInRight 0.5s ease-out'
              }}
            >
              <div className="text-3xl group-hover:scale-110 transition-transform duration-300 animate-bounce">
                {activity.icon}
              </div>
              
              <div className="flex-1">
                <p className="text-gray-900 font-medium group-hover:text-blue-800 transition-colors">
                  {activity.message}
                </p>
                <div className="flex items-center space-x-3 mt-1">
                  <p className="text-sm text-gray-500 flex items-center space-x-1">
                    <FiClock className="h-3 w-3" />
                    <span>{activity.time}</span>
                  </p>
                  
                  {/* Activity type badge */}
                  <span className={`px-2 py-1 text-xs font-bold rounded-full ${
                    activity.type === 'sale' ? 'bg-green-100 text-green-800' :
                    activity.type === 'customer' ? 'bg-blue-100 text-blue-800' :
                    activity.type === 'inventory' ? 'bg-yellow-100 text-yellow-800' :
                    activity.type === 'team' ? 'bg-purple-100 text-purple-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {activity.type.toUpperCase()}
                  </span>
                  
                  {/* Uganda-specific badges */}
                  {activity.message.includes('Mobile Money') && (
                    <span className="px-2 py-1 text-xs font-bold bg-orange-100 text-orange-800 rounded-full flex items-center space-x-1">
                      <span>üì±</span>
                      <span>MOMO</span>
                    </span>
                  )}
                  
                  {activity.message.includes('Kampala') && (
                    <span className="px-2 py-1 text-xs font-bold bg-red-100 text-red-800 rounded-full flex items-center space-x-1">
                      <span>üá∫üá¨</span>
                      <span>KLA</span>
                    </span>
                  )}
                </div>
              </div>
              
              {activity.amount && (
                <div className="text-right">
                  <p className="font-bold text-lg text-green-600 group-hover:text-green-700 transition-colors">
                    {formatCurrency(activity.amount)}
                  </p>
                  <p className="text-xs text-gray-500">UGX</p>
                </div>
              )}
              
              {/* Quick action button */}
              <button 
                onClick={(e) => {
                  e.stopPropagation();
                  toast.success(`‚ö° Quick action performed for ${activity.type}`);
                }}
                className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                <FiEye className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
        
        {/* Activity Stats Footer */}
        <div className="mt-6 pt-4 border-t border-gray-100">
          <div className="grid grid-cols-3 gap-4 text-center">
            <div className="bg-green-50 rounded-lg p-3">
              <div className="text-lg font-bold text-green-600">
                {realTimeActivity.filter(a => a.type === 'sale').length}
              </div>
              <div className="text-xs text-green-700">Sales Today</div>
            </div>
            <div className="bg-blue-50 rounded-lg p-3">
              <div className="text-lg font-bold text-blue-600">
                {realTimeActivity.filter(a => a.type === 'customer').length}
              </div>
              <div className="text-xs text-blue-700">New Customers</div>
            </div>
            <div className="bg-yellow-50 rounded-lg p-3">
              <div className="text-lg font-bold text-yellow-600">
                {realTimeActivity.filter(a => a.type === 'inventory').length}
              </div>
              <div className="text-xs text-yellow-700">Inventory Alerts</div>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Revenue Chart with Multiple Metrics */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Revenue & Performance Trends</h3>
          <div className="flex space-x-2">
            {['7d', '30d', '90d'].map((range) => (
              <button
                key={range}
                onClick={() => setTimeRange(range)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 ${
                  timeRange === range
                    ? 'bg-blue-600 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {range}
              </button>
            ))}
          </div>
        </div>
        <ResponsiveContainer width="100%" height={350}>
          <ComposedChart data={revenueData}>
            <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
            <XAxis dataKey="name" stroke="#666" />
            <YAxis yAxisId="left" stroke="#666" />
            <YAxis yAxisId="right" orientation="right" stroke="#666" />
            <Tooltip 
              contentStyle={{ 
                backgroundColor: 'white', 
                border: '1px solid #e5e7eb', 
                borderRadius: '8px',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
              }} 
            />
            <Area yAxisId="left" type="monotone" dataKey="revenue" fill="#3B82F6" fillOpacity={0.3} stroke="#3B82F6" strokeWidth={2} />
            <Line yAxisId="left" type="monotone" dataKey="orders" stroke="#10B981" strokeWidth={3} dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }} />
            <Bar yAxisId="right" dataKey="profit" fill="#F59E0B" radius={[4, 4, 0, 0]} />
          </ComposedChart>
        </ResponsiveContainer>
      </div>

      {/* Top Performing Products */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Top Performing Products</h3>
          <button className="text-blue-600 hover:text-blue-800 font-medium flex items-center space-x-1">
            <span>View All</span>
            <FiChevronRight className="h-4 w-4" />
          </button>
        </div>
        <div className="space-y-4">
          {topProducts.map((product, index) => (
            <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-all duration-300">
              <div className="flex items-center space-x-4">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold">
                  {index + 1}
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900">{product.name}</h4>
                  <p className="text-sm text-gray-600">{product.category}</p>
                </div>
              </div>
              <div className="text-right">
                <p className="font-semibold text-gray-900">{product.sales} sales</p>
                <p className="text-sm text-gray-600">{formatCurrency(product.revenue)}</p>
              </div>
              <div className="text-right">
                <span className="px-2 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full">
                  {product.growth}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Performance Indicators */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-900 mb-6">Performance Indicators</h3>
          <div className="space-y-4">
            {performanceIndicators.map((indicator, index) => {
              const progress = (indicator.current / indicator.target) * 100;
              const colorClasses = {
                blue: 'from-blue-500 to-blue-600',
                green: 'from-green-500 to-green-600',
                purple: 'from-purple-500 to-purple-600',
                orange: 'from-orange-500 to-orange-600'
              };
              
              return (
                <div key={index} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-900">{indicator.name}</span>
                    <span className="text-sm text-gray-600">
                      {indicator.unit === 'USD' ? formatCurrency(indicator.current) : 
                       indicator.unit === 'stars' ? `${indicator.current}/5` :
                       `${indicator.current}${indicator.unit}`}
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div 
                      className={`bg-gradient-to-r ${colorClasses[indicator.color]} h-3 rounded-full transition-all duration-500`}
                      style={{ width: `${Math.min(progress, 100)}%` }}
                    ></div>
                  </div>
                  <div className="flex justify-between text-sm text-gray-500">
                    <span>Target: {indicator.unit === 'USD' ? formatCurrency(indicator.target) : 
                              indicator.unit === 'stars' ? `${indicator.target}/5` :
                              `${indicator.target}${indicator.unit}`}</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Strategic Goals */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-900 mb-6">Strategic Goals Progress</h3>
          <div className="space-y-4">
            {strategicGoals.map((goal) => (
              <div key={goal.id} className="border rounded-lg p-4 hover:shadow-md transition-all duration-300">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold text-gray-900">{goal.title}</h4>
                  <span className="text-sm text-gray-500">{goal.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${goal.progress}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-sm text-gray-600">
                  <span>Target: {typeof goal.target === 'number' && goal.target > 1000 ? formatCurrency(goal.target) : goal.target}</span>
                  <span>Current: {typeof goal.current === 'number' && goal.current > 1000 ? formatCurrency(goal.current) : goal.current}</span>
                </div>
                <div className="mt-2 text-xs text-gray-500">
                  Deadline: {goal.deadline}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-900 mb-6">Quick Actions</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {[
            { title: 'Add Team Member', icon: FiUsers, color: 'bg-blue-600 hover:bg-blue-700', action: () => openEditModal('team', null, 'add') },
            { title: 'Approve Supplier', icon: FiCheckCircle, color: 'bg-green-600 hover:bg-green-700', action: () => setActiveTab('suppliers') },
            { title: 'Verify Orders', icon: FiTruck, color: 'bg-orange-600 hover:bg-orange-700', action: () => setActiveTab('orders') },
            { title: 'Inventory Access', icon: FiPackage, color: 'bg-purple-600 hover:bg-purple-700', action: () => setShowInventoryModal(true) },
            { title: 'View Reports', icon: FiBarChart, color: 'bg-indigo-600 hover:bg-indigo-700', action: () => setActiveTab('analytics') },
            { title: 'Manage Schedule', icon: FiCalendar, color: 'bg-pink-600 hover:bg-pink-700', action: () => setActiveTab('team') },
            { title: 'Settings', icon: FiSettings, color: 'bg-gray-600 hover:bg-gray-700', action: handleSettingsClick }
          ].map((action, index) => (
            <button
              key={index}
              onClick={action.action}
              className={`${action.color} text-white p-4 rounded-lg transition-all duration-300 transform hover:scale-105 flex flex-col items-center space-y-2`}
            >
              <action.icon className="h-6 w-6" />
              <span className="text-sm font-medium">{action.title}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="space-y-6 animate-fadeInUp">
      {/* üá∫üá¨ Uganda Analytics Header */}
      <div className="bg-gradient-to-r from-purple-600 via-blue-600 to-green-600 text-white rounded-xl p-6 shadow-xl">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-3xl font-bold mb-2 flex items-center space-x-3">
              <span>üìà</span>
              <span>Uganda Business Analytics</span>
              <span>üá∫üá¨</span>
            </h2>
            <p className="text-blue-100 text-lg">Deep insights into Pearl of Africa markets</p>
          </div>
          <div className="text-right">
            <div className="text-4xl mb-2">üìä</div>
            <p className="text-purple-200">Data-driven decisions</p>
          </div>
        </div>
      </div>

      {/* Enhanced Analytics Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Team Performance with Uganda Context */}
        <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-gray-900 flex items-center space-x-2">
              <span>üë•</span>
              <span>Team Performance</span>
            </h3>
            <div className="flex space-x-2">
              <span className="px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full font-bold">
                üá∫üá¨ Uganda Team
              </span>
              <button 
                onClick={() => {
                  toast.success('üìä Exporting team analytics...');
                  setTimeout(() => toast.success('üìÑ Team report downloaded!'), 1500);
                }}
                className="p-2 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors"
              >
                <FiDownload className="h-4 w-4 text-blue-600" />
              </button>
            </div>
          </div>
          
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={teamPerformance} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis 
                dataKey="name" 
                tick={{ fontSize: 12 }}
                angle={-45}
                textAnchor="end"
                height={80}
              />
              <YAxis tick={{ fontSize: 12 }} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1f2937', 
                  border: 'none', 
                  borderRadius: '8px',
                  color: 'white'
                }}
                formatter={(value, name) => [
                  `${formatCurrency(value)}`, 
                  'Sales Performance'
                ]}
              />
              <Bar 
                dataKey="sales" 
                fill="url(#teamGradient)" 
                radius={[4, 4, 0, 0]}
                name="Sales (UGX)"
              />
              <defs>
                <linearGradient id="teamGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="0%" stopColor="#3B82F6" />
                  <stop offset="100%" stopColor="#1E40AF" />
                </linearGradient>
              </defs>
            </BarChart>
          </ResponsiveContainer>
          
          {/* Team insights */}
          <div className="mt-4 grid grid-cols-2 gap-4">
            <div className="bg-blue-50 rounded-lg p-3 text-center">
              <div className="text-2xl font-bold text-blue-600">
                {Math.round(teamPerformance.reduce((sum, t) => sum + t.efficiency, 0) / teamPerformance.length)}%
              </div>
              <div className="text-sm text-blue-700">Avg Efficiency</div>
            </div>
            <div className="bg-green-50 rounded-lg p-3 text-center">
              <div className="text-2xl font-bold text-green-600">
                {(teamPerformance.reduce((sum, t) => sum + t.satisfaction, 0) / teamPerformance.length).toFixed(1)}
              </div>
              <div className="text-sm text-green-700">Avg Satisfaction</div>
            </div>
          </div>
        </div>

        {/* Enhanced Customer Satisfaction with Uganda insights */}
        <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-gray-900 flex items-center space-x-2">
              <span>üòä</span>
              <span>Customer Satisfaction</span>
            </h3>
            <div className="text-right">
              <div className="text-2xl font-bold text-green-600">4.7/5</div>
              <div className="text-sm text-gray-600">Uganda Rating</div>
            </div>
          </div>
          
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={[
                  { name: 'Excellent (5‚≠ê)', value: 45, emoji: 'ü§©' },
                  { name: 'Good (4‚≠ê)', value: 35, emoji: 'üòä' },
                  { name: 'Average (3‚≠ê)', value: 15, emoji: 'üòê' },
                  { name: 'Poor (2‚≠ê)', value: 5, emoji: 'üòû' }
                ]}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent, emoji }) => `${emoji} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {[
                  { color: '#10B981' }, // Green for excellent
                  { color: '#3B82F6' }, // Blue for good  
                  { color: '#F59E0B' }, // Orange for average
                  { color: '#EF4444' }  // Red for poor
                ].map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1f2937', 
                  border: 'none', 
                  borderRadius: '8px',
                  color: 'white'
                }}
              />
            </PieChart>
          </ResponsiveContainer>
          
          {/* Customer insights */}
          <div className="mt-4 space-y-3">
            <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
              <div className="flex items-center space-x-2">
                <span className="text-xl">üèÜ</span>
                <span className="font-medium text-green-800">Top Feedback</span>
              </div>
              <span className="text-sm text-green-600">"Great service!"</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
              <div className="flex items-center space-x-2">
                <span className="text-xl">üí°</span>
                <span className="font-medium text-blue-800">Improvement</span>
              </div>
              <span className="text-sm text-blue-600">"Faster delivery"</span>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Inventory Insights */}
      <div className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900 flex items-center space-x-2">
            <span>üì¶</span>
            <span>Uganda Inventory Insights</span>
          </h3>
          <button 
            onClick={() => {
              setActiveTab('inventory');
              toast.success('üìã Opening full inventory management...');
            }}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
          >
            <FiPackage className="h-4 w-4" />
            <span>Manage Inventory</span>
          </button>
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {[
            { label: 'Low Stock', value: inventoryInsights.lowStock, color: 'text-red-600', icon: '‚ö†Ô∏è', bgColor: 'bg-red-50', action: 'reorder' },
            { label: 'Out of Stock', value: inventoryInsights.outOfStock, color: 'text-red-800', icon: 'üö´', bgColor: 'bg-red-100', action: 'urgent' },
            { label: 'Overstock', value: inventoryInsights.overstock, color: 'text-yellow-600', icon: 'üì¶', bgColor: 'bg-yellow-50', action: 'promotion' },
            { label: 'Fast Moving', value: inventoryInsights.fastMoving, color: 'text-green-600', icon: 'üöÄ', bgColor: 'bg-green-50', action: 'increase' },
            { label: 'Slow Moving', value: inventoryInsights.slowMoving, color: 'text-orange-600', icon: 'üêå', bgColor: 'bg-orange-50', action: 'discount' },
            { label: 'Total Products', value: inventoryInsights.totalProducts, color: 'text-blue-600', icon: 'üìä', bgColor: 'bg-blue-50', action: 'view' }
          ].map((item, index) => (
            <div 
              key={index} 
              className={`text-center p-4 border-2 border-transparent rounded-xl hover:border-blue-300 transition-all duration-300 cursor-pointer group ${item.bgColor} hover:shadow-lg transform hover:scale-105`}
              onClick={() => {
                const actions = {
                  reorder: 'Creating reorder alerts...',
                  urgent: 'Sending urgent stock alerts...',
                  promotion: 'Planning promotion campaign...',
                  increase: 'Analyzing stock increase needs...',
                  discount: 'Creating discount strategies...',
                  view: 'Opening product catalog...'
                };
                toast.success(`üìä ${actions[item.action]}`);
              }}
            >
              <div className="text-3xl mb-3 group-hover:animate-bounce">{item.icon}</div>
              <div className={`text-3xl font-bold ${item.color} group-hover:scale-110 transition-transform`}>
                {item.value}
              </div>
              <div className="text-sm font-medium text-gray-700 mt-1">{item.label}</div>
              
              {/* Action hint */}
              <div className="opacity-0 group-hover:opacity-100 transition-opacity mt-2">
                <span className="text-xs bg-white px-2 py-1 rounded-full shadow-md">
                  Click to {item.action}
                </span>
              </div>
            </div>
          ))}
        </div>
        
        {/* Inventory trends */}
        <div className="mt-6 pt-6 border-t border-gray-100">
          <h4 className="font-bold text-gray-900 mb-4 flex items-center space-x-2">
            <span>üìà</span>
            <span>Weekly Inventory Trends</span>
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm text-green-700 font-medium">Stock Inflow</div>
                  <div className="text-xl font-bold text-green-800">+245 items</div>
                </div>
                <div className="text-3xl">üì•</div>
              </div>
            </div>
            <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm text-blue-700 font-medium">Items Sold</div>
                  <div className="text-xl font-bold text-blue-800">189 items</div>
                </div>
                <div className="text-3xl">üì§</div>
              </div>
            </div>
            <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm text-purple-700 font-medium">Net Growth</div>
                  <div className="text-xl font-bold text-purple-800">+56 items</div>
                </div>
                <div className="text-3xl">üìä</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Uganda Market Analysis */}
      <div className="bg-gradient-to-r from-yellow-400 via-red-500 to-black text-white rounded-xl p-6 shadow-xl">
        <h3 className="text-xl font-bold mb-4 flex items-center space-x-2">
          <span>üá∫üá¨</span>
          <span>Uganda Market Analysis</span>
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white/20 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-center">
              <div className="text-3xl mb-2">üì±</div>
              <div className="text-2xl font-bold">{businessMetrics.mobileMoneyRatio}%</div>
              <div className="text-yellow-200 text-sm">Mobile Money Usage</div>
              <div className="text-xs text-yellow-300 mt-1">MTN & Airtel Money</div>
            </div>
          </div>
          
          <div className="bg-white/20 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-center">
              <div className="text-3xl mb-2">üè™</div>
              <div className="text-2xl font-bold">{businessMetrics.localSupplierRatio}%</div>
              <div className="text-yellow-200 text-sm">Local Suppliers</div>
              <div className="text-xs text-yellow-300 mt-1">Supporting Uganda</div>
            </div>
          </div>
          
          <div className="bg-white/20 rounded-lg p-4 backdrop-blur-sm">
            <div className="text-center">
              <div className="text-3xl mb-2">‚è∞</div>
              <div className="text-2xl font-bold">{businessMetrics.supplierOnTimeDelivery}%</div>
              <div className="text-yellow-200 text-sm">On-time Delivery</div>
              <div className="text-xs text-yellow-300 mt-1">Kampala traffic considered</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderTeamManagement = () => (
    <div className="space-y-6 animate-fadeInUp">
      {/* Team Analytics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[
          { title: 'Total Team Members', value: teamAnalytics.totalMembers, icon: FiUsers, color: 'from-blue-500 to-blue-600', change: '+2 this month' },
          { title: 'Average Efficiency', value: `${teamAnalytics.averageEfficiency}%`, icon: FiTarget, color: 'from-green-500 to-green-600', change: '+5.2%' },
          { title: 'Average Satisfaction', value: teamAnalytics.averageSatisfaction, icon: FiStar, color: 'from-yellow-500 to-yellow-600', change: '+0.3' },
          { title: 'Top Performer', value: teamAnalytics.topPerformer, icon: FiAward, color: 'from-purple-500 to-purple-600', change: 'This month' }
        ].map((metric, index) => (
          <div key={index} className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-600 text-sm font-medium">{metric.title}</p>
                <p className="text-2xl font-bold text-gray-900 mt-1">{metric.value}</p>
                <p className="text-green-600 text-sm font-medium mt-1">{metric.change}</p>
              </div>
              <div className={`p-3 rounded-lg bg-gradient-to-r ${metric.color}`}>
                <metric.icon className="h-6 w-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Department Performance Chart */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-900 mb-6">Department Performance</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={teamAnalytics.departmentBreakdown}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="department" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="efficiency" fill="#3B82F6" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* Enhanced Team Performance Table */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Team Performance Dashboard</h3>
          <div className="flex space-x-3">
            <button 
              onClick={() => openEditModal('team', null, 'add')}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center space-x-2"
            >
              <FiPlus className="h-4 w-4" />
              <span>Add Member</span>
            </button>
            <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2">
              <FiDownload className="h-4 w-4" />
              <span>Export Report</span>
            </button>
          </div>
        </div>
        
        <div className="space-y-4">
          {teamPerformance.map((member) => (
            <div key={member.id} className="border rounded-lg p-6 hover:shadow-md transition-all duration-300">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-4">
                  <div className="text-4xl">{member.avatar}</div>
                  <div>
                    <h4 className="text-lg font-semibold text-gray-900">{member.name}</h4>
                    <div className="flex items-center space-x-2 mt-1">
                      <span className="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                        {member.role}
                      </span>
                      <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                        {member.department}
                      </span>
                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                        member.performance.trend === 'up' ? 'bg-green-100 text-green-800' :
                        member.performance.trend === 'down' ? 'bg-red-100 text-red-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {member.performance.change}
                      </span>
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-600">Joined: {member.joinDate}</p>
                  <p className="text-sm text-gray-600">Status: <span className="text-green-600 font-medium">Active</span></p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-4">
                {/* Performance Metrics */}
                <div>
                  <h5 className="font-medium text-gray-900 mb-2">Performance Metrics</h5>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Sales</span>
                      <span className="font-medium">{formatCurrency(member.sales)}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Efficiency</span>
                      <div className="flex items-center space-x-2">
                        <div className="w-16 bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${member.efficiency}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-medium">{member.efficiency}%</span>
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Satisfaction</span>
                      <div className="flex items-center space-x-1">
                        <FiStar className="h-4 w-4 text-yellow-500" />
                        <span className="font-medium">{member.satisfaction}</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Skills & Training */}
                <div>
                  <h5 className="font-medium text-gray-900 mb-2">Skills & Training</h5>
                  <div className="space-y-2">
                    <div className="flex flex-wrap gap-1">
                      {member.skills.slice(0, 2).map((skill, index) => (
                        <span key={index} className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                          {skill}
                        </span>
                      ))}
                      {member.skills.length > 2 && (
                        <span className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">
                          +{member.skills.length - 2} more
                        </span>
                      )}
                    </div>
                    <div className="text-sm text-gray-600">
                      Training: {member.training.completed} completed, {member.training.inProgress} in progress
                    </div>
                  </div>
                </div>

                {/* Schedule & Goals */}
                <div>
                  <h5 className="font-medium text-gray-900 mb-2">Schedule & Goals</h5>
                  <div className="space-y-2">
                    <div className="text-sm text-gray-600">
                      <strong>Current:</strong> {member.schedule.current}
                    </div>
                    <div className="text-sm text-gray-600">
                      <strong>Next:</strong> {member.schedule.next}
                    </div>
                    <div className="text-sm text-gray-600">
                      <strong>Goals:</strong> {member.goals.length} active
                    </div>
                  </div>
                </div>
              </div>

              {/* Achievements */}
              <div className="mb-4">
                <h5 className="font-medium text-gray-900 mb-2">Recent Achievements</h5>
                <div className="flex flex-wrap gap-2">
                  {member.achievements.map((achievement, index) => (
                    <span key={index} className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm rounded-full flex items-center space-x-1">
                      <FiAward className="h-3 w-3" />
                      <span>{achievement}</span>
                    </span>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-3">
                <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2">
                  <FiEye className="h-4 w-4" />
                  <span>View Details</span>
                </button>
                <button 
                  onClick={() => openEditModal('team', member, 'edit')}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center space-x-2"
                >
                  <FiEdit className="h-4 w-4" />
                  <span>Edit Profile</span>
                </button>
                <button className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-all duration-300 flex items-center space-x-2">
                  <FiMessageCircle className="h-4 w-4" />
                  <span>Send Message</span>
                </button>
                <button className="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-all duration-300 flex items-center space-x-2">
                  <FiCalendar className="h-4 w-4" />
                  <span>Schedule</span>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Training Modules */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Training & Development</h3>
            <button 
              onClick={() => openEditModal('training', null, 'add')}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
            >
              <FiPlus className="h-4 w-4" />
              <span>Add Training Module</span>
            </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {trainingModules.map((module) => (
            <div key={module.id} className="border rounded-lg p-4 hover:shadow-md transition-all duration-300">
              <div className="flex items-start justify-between mb-3">
                <h4 className="font-semibold text-gray-900">{module.title}</h4>
                <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                  module.status === 'active' ? 'bg-green-100 text-green-800' :
                  module.status === 'upcoming' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  {module.status}
                </span>
              </div>
              <div className="space-y-2 text-sm text-gray-600">
                <p><strong>Category:</strong> {module.category}</p>
                <p><strong>Duration:</strong> {module.duration}</p>
                <p><strong>Enrolled:</strong> {module.enrolled} members</p>
              </div>
              <div className="mt-3 flex space-x-2">
                <button className="flex-1 bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 text-sm">
                  View Details
                </button>
                <button 
                  onClick={() => openEditModal('training', module, 'edit')}
                  className="flex-1 bg-green-600 text-white px-3 py-2 rounded-lg hover:bg-green-700 transition-all duration-300 text-sm"
                >
                  Edit
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Weekly Schedule */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Weekly Schedule</h3>
          <button 
            onClick={() => openEditModal('schedule', null, 'edit')}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
          >
            <FiCalendar className="h-4 w-4" />
            <span>Edit Schedule</span>
          </button>
        </div>
        
        <div className="space-y-4">
          {scheduleData.map((day, index) => (
            <div key={index} className="border rounded-lg p-4">
              <h4 className="font-semibold text-gray-900 mb-3">{day.day}</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {day.shifts.map((shift, shiftIndex) => (
                  <div key={shiftIndex} className="bg-gray-50 rounded-lg p-3">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-gray-900">{shift.time}</span>
                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                        shift.coverage === 'Full' ? 'bg-green-100 text-green-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {shift.coverage} Coverage
                      </span>
                    </div>
                    <div className="text-sm text-gray-600">
                      <strong>Assigned:</strong> {shift.members.join(', ')}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderAlerts = () => (
    <div className="space-y-6 animate-fadeInUp">
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-900 mb-6">Recent Alerts & Notifications</h3>
        <div className="space-y-4">
          {recentAlerts.map((alert) => (
            <div key={alert.id} className={`border-l-4 p-4 rounded-lg ${
              alert.type === 'critical' ? 'border-red-500 bg-red-50' :
              alert.type === 'warning' ? 'border-yellow-500 bg-yellow-50' :
              'border-blue-500 bg-blue-50'
            }`}>
              <div className="flex items-center justify-between">
                <div>
                  <h4 className="font-semibold text-gray-900">{alert.title}</h4>
                  <p className="text-gray-600">{alert.message}</p>
                  <p className="text-sm text-gray-500 mt-1">{alert.timestamp}</p>
                </div>
                <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300">
                  {alert.action}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderSupplierVerification = () => (
    <div className="space-y-6 animate-fadeInUp">
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-900">Supplier Management Dashboard</h3>
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-600">
              {pendingSuppliers.filter(s => s.status === 'pending').length} Pending Approval
            </span>
            <button 
              onClick={() => setShowSupplierManagementModal(true)}
              className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all duration-300 flex items-center space-x-2 shadow-lg"
            >
              <FiTruck className="h-5 w-5" />
              <span>Open Supplier Management</span>
            </button>
            <button 
              onClick={() => openEditModal('supplier', null, 'add')}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
            >
              <FiPlus className="h-4 w-4" />
              <span>Add New Supplier</span>
            </button>
          </div>
        </div>

        {/* Enhanced Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-green-600">Total Suppliers</p>
                <p className="text-2xl font-bold text-green-700">{pendingSuppliers.length}</p>
              </div>
              <div className="text-2xl">üè¢</div>
            </div>
          </div>
          <div className="bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-yellow-600">Pending Approval</p>
                <p className="text-2xl font-bold text-yellow-700">{pendingSuppliers.filter(s => s.status === 'pending').length}</p>
              </div>
              <div className="text-2xl">‚è≥</div>
            </div>
          </div>
          <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-blue-600">Active Orders</p>
                <p className="text-2xl font-bold text-blue-700">42</p>
              </div>
              <div className="text-2xl">üì¶</div>
            </div>
          </div>
          <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-purple-600">Payment Issues</p>
                <p className="text-2xl font-bold text-purple-700">5</p>
              </div>
              <div className="text-2xl">üí∞</div>
            </div>
          </div>
        </div>
        
        <div className="space-y-6">
          {pendingSuppliers.map((supplier) => (
            <div key={supplier.id} className="border rounded-lg p-6 hover:shadow-md transition-all duration-300">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <h4 className="text-lg font-semibold text-gray-900">{supplier.name}</h4>
                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                      supplier.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                      supplier.status === 'approved' ? 'bg-green-100 text-green-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {supplier.status.charAt(0).toUpperCase() + supplier.status.slice(1)}
                    </span>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
                    <div>
                      <p><strong>Contact:</strong> {supplier.contactPerson}</p>
                      <p><strong>Email:</strong> {supplier.email}</p>
                      <p><strong>Phone:</strong> {supplier.phone}</p>
                    </div>
                    <div>
                      <p><strong>Business Type:</strong> {supplier.businessType}</p>
                      <p><strong>Address:</strong> {supplier.address}</p>
                      <p><strong>Registration Date:</strong> {supplier.registrationDate}</p>
                    </div>
                  </div>
                  <div className="mt-3">
                    <p className="text-sm text-gray-600"><strong>Notes:</strong> {supplier.notes}</p>
                  </div>
                </div>
              </div>
              
              <div className="mb-4">
                <h5 className="font-medium text-gray-900 mb-2">Required Documents:</h5>
                <div className="flex flex-wrap gap-2">
                  {supplier.documents.map((doc, index) => (
                    <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full flex items-center space-x-1">
                      <FiCheckCircle className="h-3 w-3" />
                      <span>{doc}</span>
                    </span>
                  ))}
                </div>
              </div>
              
              {supplier.status === 'pending' && (
                <div className="flex items-center space-x-3">
                  <button 
                    onClick={() => handleSupplierApproval(supplier.id, 'approved')}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center space-x-2"
                  >
                    <FiCheckCircle className="h-4 w-4" />
                    <span>Approve</span>
                  </button>
                  <button 
                    onClick={() => handleSupplierApproval(supplier.id, 'rejected')}
                    className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-all duration-300 flex items-center space-x-2"
                  >
                    <FiXCircle className="h-4 w-4" />
                    <span>Reject</span>
                  </button>
                  <button 
                    onClick={() => openEditModal('supplier', supplier, 'edit')}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
                  >
                    <FiEdit className="h-4 w-4" />
                    <span>Edit Supplier</span>
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderReportAccess = () => {
    // Enhanced reports data with real-time Uganda business context
    const reportCategories = {
      general: {
        name: 'General Reports',
        icon: 'üìä',
        color: 'bg-blue-50 border-blue-200 text-blue-800',
        reports: [
          {
            id: 'business_overview',
            name: 'Business Overview Report',
            description: 'Complete overview of FAREDEAL Uganda operations with live metrics',
            icon: 'üè¢',
            metrics: ['Revenue', 'Customers', 'Orders', 'Growth'],
            frequency: 'Real-time',
            lastGenerated: realTimeData.sales.lastUpdated || 'Loading...',
            liveData: {
              Revenue: `UGX ${(realTimeData.sales.totalSales / 1000000).toFixed(1)}M`,
              customers: realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString() || 'Loading...',
              growth: `+${realTimeData.sales.growthRate}%`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'financial_summary',
            name: 'Financial Summary',
            description: 'Real-time financial performance across all Uganda locations',
            icon: 'üí∞',
            metrics: ['Revenue', 'Expenses', 'Profit', 'Cash Flow'],
            frequency: 'Real-time',
            lastGenerated: realTimeData.financial.lastUpdated || 'Loading...',
            liveData: {
              Revenue: `UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M`,
              profit: `UGX ${(realTimeData.financial.profit / 1000000).toFixed(1)}M`,
              margin: `${realTimeData.financial.profitMargin}%`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'operational_efficiency',
            name: 'Operational Efficiency',
            description: 'Live performance metrics for Uganda operations',
            icon: '‚ö°',
            metrics: ['Productivity', 'Quality', 'Delivery Time', 'Customer Satisfaction'],
            frequency: 'Real-time',
            lastGenerated: realTimeData.inventory.lastUpdated || 'Loading...',
            liveData: {
              satisfaction: `${realTimeData.sales.customerMetrics.customerSatisfaction || '4.8'}/5.0`,
              delivery: `${realTimeData.inventory.supplierMetrics.averageDeliveryTime || '2.3'}h avg`,
              quality: `${realTimeData.inventory.supplierMetrics.qualityScore || '94.2'}%`,
              status: dataLoading ? 'updating' : 'live'
            }
          }
        ]
      },
      sales: {
        name: 'Sales Reports',
        icon: 'üíº',
        color: 'bg-green-50 border-green-200 text-green-800',
        reports: [
          {
            id: 'sales_performance',
            name: 'Live Sales Performance Report',
            description: 'Real-time sales analysis for Uganda market with live updates',
            icon: 'üìà',
            metrics: ['Total Sales', 'Growth Rate', 'Top Products', 'Regional Performance'],
            frequency: 'Live Updates',
            lastGenerated: realTimeData.sales.lastUpdated || 'Loading...',
            liveData: {
              totalSales: `UGX ${(realTimeData.sales.totalSales / 1000000).toFixed(1)}M`,
              todaySales: `UGX ${(realTimeData.sales.todaySales / 1000000).toFixed(1)}M today`,
              topProduct: realTimeData.sales.topProducts[0]?.name || 'Loading...',
              bestRegion: Object.entries(realTimeData.sales.regionalPerformance).sort((a, b) => parseFloat(b[1].growth) - parseFloat(a[1].growth))[0]?.[0] || 'kampala',
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'customer_analysis',
            name: 'Real-time Customer Analytics',
            description: 'Live customer behavior and preferences in Uganda',
            icon: 'üë•',
            metrics: ['New Customers', 'Retention Rate', 'Lifetime Value', 'Demographics'],
            frequency: 'Live Tracking',
            lastGenerated: realTimeData.sales.lastUpdated || 'Loading...',
            liveData: {
              totalCustomers: realTimeData.sales.customerMetrics.totalCustomers?.toLocaleString() || 'Loading...',
              newToday: realTimeData.sales.customerMetrics.newCustomers?.toLocaleString() || 'Loading...',
              satisfaction: `${realTimeData.sales.customerMetrics.customerSatisfaction || '4.8'}/5.0`,
              avgOrder: `UGX ${(realTimeData.sales.customerMetrics.averageOrderValue / 1000).toFixed(0)}K`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'regional_performance',
            name: 'Regional Sales Dashboard',
            description: 'Live regional performance across Uganda locations',
            icon: 'üá∫üá¨',
            metrics: ['Kampala', 'Entebbe', 'Jinja', 'Mbale'],
            frequency: 'Real-time',
            lastGenerated: realTimeData.sales.lastUpdated || 'Loading...',
            liveData: {
              kampala: `UGX ${(realTimeData.sales.regionalPerformance.kampala?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.kampala?.growth}%)`,
              entebbe: `UGX ${(realTimeData.sales.regionalPerformance.entebbe?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.entebbe?.growth}%)`,
              jinja: `UGX ${(realTimeData.sales.regionalPerformance.jinja?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.jinja?.growth}%)`,
              mbale: `UGX ${(realTimeData.sales.regionalPerformance.mbale?.sales / 1000000).toFixed(1)}M (+${realTimeData.sales.regionalPerformance.mbale?.growth}%)`,
              status: dataLoading ? 'updating' : 'live'
            }
          }
        ]
      },
      inventory: {
        name: 'Inventory Reports',
        icon: 'üì¶',
        color: 'bg-purple-50 border-purple-200 text-purple-800',
        reports: [
          {
            id: 'stock_levels',
            name: 'Live Stock Management Dashboard',
            description: 'Real-time inventory status across Uganda stores',
            icon: 'üìã',
            metrics: ['Stock Levels', 'Turnover Rate', 'Low Stock Alerts', 'Movement'],
            frequency: 'Real-time Monitoring',
            lastGenerated: realTimeData.inventory.lastUpdated || 'Loading...',
            liveData: {
              totalProducts: realTimeData.inventory.totalProducts?.toLocaleString() || 'Loading...',
              lowStock: `${realTimeData.inventory.lowStockItems || 0} items`,
              outOfStock: `${realTimeData.inventory.outOfStock || 0} items`,
              stockValue: `UGX ${(realTimeData.inventory.stockValue / 1000000).toFixed(1)}M`,
              turnover: `${realTimeData.inventory.turnoverRate || '12.5'} times/year`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'supplier_performance',
            name: 'Live Supplier Analytics',
            description: 'Real-time supplier reliability and quality metrics',
            icon: 'ü§ù',
            metrics: ['Delivery Time', 'Quality Score', 'Order Accuracy', 'Reliability'],
            frequency: 'Continuous Monitoring',
            lastGenerated: realTimeData.inventory.lastUpdated || 'Loading...',
            liveData: {
              totalSuppliers: realTimeData.inventory.supplierMetrics.totalSuppliers || 'Loading...',
              avgDelivery: `${realTimeData.inventory.supplierMetrics.averageDeliveryTime || '2.3'} hours`,
              qualityScore: `${realTimeData.inventory.supplierMetrics.qualityScore || '94.2'}%`,
              onTimeRate: `${realTimeData.inventory.supplierMetrics.onTimeDelivery || '96.8'}%`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'product_movement',
            name: 'Product Movement Tracker',
            description: 'Live tracking of product sales and inventory movement',
            icon: 'üîÑ',
            metrics: ['Top Moving', 'Slow Moving', 'Dead Stock', 'Trends'],
            frequency: 'Real-time',
            lastGenerated: realTimeData.inventory.lastUpdated || 'Loading...',
            liveData: {
              topMover: realTimeData.inventory.topMovingProducts[0]?.name || 'Loading...',
              topMovement: `${realTimeData.inventory.topMovingProducts[0]?.movement || 0} units/day`,
              alerts: `${realTimeData.inventory.lowStockItems + realTimeData.inventory.outOfStock} total alerts`,
              status: dataLoading ? 'updating' : 'live'
            }
          }
        ]
      },
      financial: {
        name: 'Financial Reports',
        icon: 'üí≥',
        color: 'bg-yellow-50 border-yellow-200 text-yellow-800',
        reports: [
          {
            id: 'revenue_analysis',
            name: 'Live Revenue Dashboard',
            description: 'Real-time revenue breakdown for Uganda operations',
            icon: 'üíπ',
            metrics: ['Revenue Streams', 'Profit Margins', 'Cost Analysis', 'ROI'],
            frequency: 'Real-time Updates',
            lastGenerated: realTimeData.financial.lastUpdated || 'Loading...',
            liveData: {
              totalRevenue: `UGX ${(realTimeData.financial.totalRevenue / 1000000).toFixed(1)}M`,
              monthlyRevenue: `UGX ${(realTimeData.financial.monthlyRevenue / 1000000).toFixed(1)}M this month`,
              profitMargin: `${realTimeData.financial.profitMargin}%`,
              retail: `UGX ${(realTimeData.financial.revenueStreams.retail / 1000000).toFixed(1)}M (65%)`,
              wholesale: `UGX ${(realTimeData.financial.revenueStreams.wholesale / 1000000).toFixed(1)}M (25%)`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'expense_tracking',
            name: 'Live Expense Monitor',
            description: 'Real-time expense analysis and budget compliance',
            icon: 'üí∏',
            metrics: ['Operating Expenses', 'Budget Variance', 'Cost Centers', 'Savings'],
            frequency: 'Continuous Tracking',
            lastGenerated: realTimeData.financial.lastUpdated || 'Loading...',
            liveData: {
              totalExpenses: `UGX ${(realTimeData.financial.expenses / 1000000).toFixed(1)}M`,
              netProfit: `UGX ${(realTimeData.financial.profit / 1000000).toFixed(1)}M`,
              cashFlow: `UGX ${(realTimeData.financial.cashFlow / 1000000).toFixed(1)}M`,
              efficiency: `${((realTimeData.financial.profit / realTimeData.financial.totalRevenue) * 100).toFixed(1)}% efficiency`,
              status: dataLoading ? 'updating' : 'live'
            }
          },
          {
            id: 'profit_analysis',
            name: 'Profit & Loss Tracker',
            description: 'Real-time P&L analysis with trend indicators',
            icon: 'üìä',
            metrics: ['Gross Profit', 'Net Profit', 'EBITDA', 'Trends'],
            frequency: 'Live Calculations',
            lastGenerated: realTimeData.financial.lastUpdated || 'Loading...',
            liveData: {
              grossProfit: `UGX ${(realTimeData.financial.profit / 1000000).toFixed(1)}M`,
              profitMargin: `${realTimeData.financial.profitMargin}% margin`,
              monthlyTrend: realTimeData.financial.monthlyBreakdown?.length ? '+12.5%' : 'Calculating...',
              status: dataLoading ? 'updating' : 'live'
            }
          }
        ]
      }
    };

    const exportFormats = [
      { id: 'pdf', name: 'PDF Document', icon: 'üìÑ', description: 'Professional formatted document for reports' },
      { id: 'excel', name: 'Excel Spreadsheet', icon: 'üìä', description: 'Editable data format with calculations' },
      { id: 'csv', name: 'CSV Data', icon: 'üìã', description: 'Comma-separated values for analysis' },
      { id: 'word', name: 'Word Document', icon: 'üìù', description: 'Editable text document format' },
      { id: 'email', name: 'Email Report', icon: 'üìß', description: 'Send directly via email to team' },
      { id: 'sms', name: 'SMS Summary', icon: 'üí¨', description: 'Key metrics via SMS message' },
      { id: 'whatsapp', name: 'WhatsApp', icon: 'üì±', description: 'Share report summary via WhatsApp' },
      { id: 'print', name: 'Print Ready', icon: 'üñ®Ô∏è', description: 'Print-optimized format for documents' }
    ];

    return (
      <div className="space-y-6 animate-fadeInUp">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 rounded-2xl p-6 text-white">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center">
                <span className="text-2xl">üìä</span>
              </div>
              <div>
                <h3 className="text-2xl font-bold">Uganda Reports Center</h3>
                <p className="text-blue-100">Generate and export comprehensive business reports</p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-3xl font-bold">üá∫üá¨</div>
              <div className="text-xs text-blue-200">Pearl of Africa</div>
            </div>
          </div>
          
          {/* Quick Stats */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">24</div>
              <div className="text-xs text-blue-200">Available Reports</div>
            </div>
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">156</div>
              <div className="text-xs text-blue-200">Generated This Month</div>
            </div>
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">6</div>
              <div className="text-xs text-blue-200">Export Formats</div>
            </div>
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
              <div className="text-2xl font-bold">95%</div>
              <div className="text-xs text-blue-200">Automation Rate</div>
            </div>
          </div>
        </div>

        {/* Report Categories */}
        <div className="bg-white rounded-2xl p-6 shadow-lg">
          <h4 className="text-lg font-bold text-gray-900 mb-4">Report Categories</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            {Object.entries(reportCategories).map(([key, category]) => (
              <button
                key={key}
                onClick={() => setSelectedReportCategory(key)}
                className={`p-4 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${
                  selectedReportCategory === key 
                    ? `${category.color} shadow-lg scale-105` 
                    : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{category.icon}</div>
                  <div className="font-medium text-sm">{category.name}</div>
                </div>
              </button>
            ))}
          </div>

          {/* Reports Grid with Real-time Controls */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h5 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                <span>{reportCategories[selectedReportCategory].icon}</span>
                <span>{reportCategories[selectedReportCategory].name}</span>
                <div className={`ml-3 px-2 py-1 rounded-full text-xs font-medium ${
                  dataLoading 
                    ? 'bg-orange-100 text-orange-800 animate-pulse' 
                    : 'bg-green-100 text-green-800'
                }`}>
                  {dataLoading ? 'Updating...' : 'Live Data'}
                </div>
              </h5>
              
              <div className="flex items-center space-x-3">
                <div className="text-xs text-gray-500">
                  Auto-refresh: 30s
                </div>
                <button
                  onClick={fetchRealTimeData}
                  disabled={dataLoading}
                  className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm transition-all ${
                    dataLoading 
                      ? 'bg-gray-200 cursor-not-allowed' 
                      : 'bg-blue-600 text-white hover:bg-blue-700 transform hover:scale-105'
                  }`}
                >
                  <FiRefreshCw className={`h-4 w-4 ${dataLoading ? 'animate-spin' : ''}`} />
                  <span>Refresh Data</span>
                </button>
              </div>
            </div>
            
            <div className="grid gap-4">
              {reportCategories[selectedReportCategory].reports.map((report) => (
                <div key={report.id} className="border-2 border-gray-200 rounded-xl p-6 hover:shadow-lg transition-all duration-300 hover:border-blue-300 relative overflow-hidden">
                  {/* Live Data Indicator */}
                  {report.liveData && (
                    <div className="absolute top-4 right-4">
                      <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${
                        report.liveData.status === 'live' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-orange-100 text-orange-800 animate-pulse'
                      }`}>
                        <div className={`w-2 h-2 rounded-full ${
                          report.liveData.status === 'live' 
                            ? 'bg-green-500 animate-pulse' 
                            : 'bg-orange-500'
                        }`}></div>
                        <span>{report.liveData.status === 'live' ? 'LIVE' : 'UPDATING'}</span>
                      </div>
                    </div>
                  )}

                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-start space-x-4 flex-1">
                      <div className="w-12 h-12 bg-gradient-to-br from-blue-100 to-purple-100 rounded-xl flex items-center justify-center text-xl relative">
                        {report.icon}
                        {report.liveData?.status === 'live' && (
                          <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white animate-pulse"></div>
                        )}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <h6 className="text-lg font-semibold text-gray-900">{report.name}</h6>
                          {dataLoading && (
                            <div className="animate-spin h-4 w-4 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 mb-3">{report.description}</p>
                        
                        {/* Live Data Display */}
                        {report.liveData && (
                          <div className="bg-gradient-to-r from-blue-50 to-green-50 p-3 rounded-lg mb-3 border border-blue-200">
                            <div className="text-xs font-medium text-blue-800 mb-2">üî¥ LIVE DATA</div>
                            <div className="grid grid-cols-2 gap-2">
                              {Object.entries(report.liveData).slice(0, 4).map(([key, value]) => {
                                if (key === 'status') return null;
                                return (
                                  <div key={key} className="text-xs">
                                    <span className="text-gray-600 capitalize">{key.replace(/([A-Z])/g, ' $1')}:</span>
                                    <div className="font-semibold text-gray-900">{value}</div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                        )}
                        
                        <div className="flex flex-wrap gap-2 mb-3">
                          {report.metrics.map((metric, index) => (
                            <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                              {metric}
                            </span>
                          ))}
                        </div>
                        
                        <div className="text-xs text-gray-500 flex items-center space-x-3">
                          <div className="flex items-center space-x-1">
                            <FiClock className="h-3 w-3" />
                            <span>Frequency: {report.frequency}</span>
                          </div>
                          <span>‚Ä¢</span>
                          <div className="flex items-center space-x-1">
                            <FiRefreshCw className="h-3 w-3" />
                            <span>Last: {report.lastGenerated}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-2 ml-4">
                      <button
                        onClick={() => handleGenerateReport(report)}
                        disabled={dataLoading}
                        className={`px-4 py-2 rounded-lg transition-all duration-300 text-sm flex items-center space-x-2 transform hover:scale-105 ${
                          dataLoading 
                            ? 'bg-gray-400 cursor-not-allowed' 
                            : 'bg-blue-600 hover:bg-blue-700 text-white'
                        }`}
                      >
                        {dataLoading ? (
                          <>
                            <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                            <span>Loading...</span>
                          </>
                        ) : (
                          <>
                            <FiEye className="h-4 w-4" />
                            <span>Generate</span>
                          </>
                        )}
                      </button>
                      
                      <div className="flex space-x-1">
                        {exportFormats.slice(0, 3).map((format) => (
                          <button
                            key={format.id}
                            onClick={async () => await handleExportReport(report, format.id)}
                            disabled={exportingFormat === format.id || dataLoading}
                            className={`p-2 rounded-lg transition-all text-sm transform hover:scale-105 ${
                              exportingFormat === format.id 
                                ? 'bg-blue-100 text-blue-600 animate-pulse' 
                                : dataLoading
                                  ? 'bg-gray-200 cursor-not-allowed'
                                  : 'bg-gray-100 hover:bg-gray-200'
                            }`}
                            title={exportingFormat === format.id ? 'Exporting...' : format.description}
                          >
                            {exportingFormat === format.id ? (
                              <div className="animate-spin h-4 w-4 border-2 border-blue-600 border-t-transparent rounded-full"></div>
                            ) : (
                              format.icon
                            )}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Export Formats Section */}
        <div className="bg-white rounded-2xl p-6 shadow-lg">
          <h4 className="text-lg font-bold text-gray-900 mb-4">Export & Sharing Options</h4>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {exportFormats.map((format) => (
              <button
                key={format.id}
                onClick={() => setSelectedExportFormat(format.id)}
                className={`p-4 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${
                  selectedExportFormat === format.id 
                    ? 'border-blue-500 bg-blue-50 text-blue-800 shadow-lg scale-105' 
                    : 'border-gray-200 bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="text-center">
                  <div className="text-2xl mb-2">{format.icon}</div>
                  <div className="font-medium text-sm mb-1">{format.name}</div>
                  <div className="text-xs opacity-75">{format.description}</div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Report Access Management (Original Functionality) */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-gray-900">Report Access Management</h3>
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">
                {reportAccess.filter(r => r.status === 'pending').length} Pending Requests
              </span>
              <button 
                onClick={() => openEditModal('permissions', null, 'add')}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
              >
                <FiSettings className="h-4 w-4" />
                <span>Access Settings</span>
              </button>
            </div>
          </div>
          
          <div className="space-y-6">
            {reportAccess.map((request) => (
              <div key={request.id} className="border rounded-lg p-6 hover:shadow-md transition-all duration-300">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h4 className="text-lg font-semibold text-gray-900">{request.user}</h4>
                      <span className="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                        {request.role}
                      </span>
                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                        request.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                        request.status === 'approved' ? 'bg-green-100 text-green-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {request.status.charAt(0).toUpperCase() + request.status.slice(1)}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-3">Request Date: {request.requestDate}</p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h5 className="font-medium text-gray-900 mb-2">Current Access:</h5>
                    <div className="space-y-1">
                      {request.currentAccess.map((access, index) => (
                        <div key={index} className="flex items-center space-x-2 text-sm text-green-600">
                          <FiCheckCircle className="h-3 w-3" />
                          <span>{access}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <h5 className="font-medium text-gray-900 mb-2">Requested Access:</h5>
                    <div className="space-y-1">
                      {request.requestedAccess.map((access, index) => (
                        <div key={index} className="flex items-center space-x-2 text-sm text-blue-600">
                          <FiPlus className="h-3 w-3" />
                          <span>{access}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                
                {request.status === 'pending' && (
                  <div className="flex items-center space-x-3 mt-4">
                    <button 
                      onClick={() => handleReportAccessApproval(request.id, 'approved')}
                      className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center space-x-2"
                    >
                      <FiCheckCircle className="h-4 w-4" />
                      <span>Grant Access</span>
                    </button>
                    <button 
                      onClick={() => handleReportAccessApproval(request.id, 'denied')}
                      className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-all duration-300 flex items-center space-x-2"
                    >
                      <FiXCircle className="h-4 w-4" />
                      <span>Deny Access</span>
                    </button>
                    <button 
                      onClick={() => openEditModal('permissions', request, 'edit')}
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center space-x-2"
                    >
                      <FiEdit className="h-4 w-4" />
                      <span>Edit Access</span>
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Enhanced Report Generation Modal with Live Data */}
        {showReportModal && selectedReport && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="bg-gradient-to-r from-green-600 via-yellow-500 to-orange-500 text-white p-6 rounded-t-2xl">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="text-3xl">{selectedReport.icon}</div>
                    <div>
                      <h3 className="text-xl font-bold">{selectedReport.name}</h3>
                      <p className="text-yellow-100 text-sm">{selectedReport.description}</p>
                      {generatedReportData && (
                        <p className="text-yellow-200 text-xs mt-1">Generated: {generatedReportData.generatedAt}</p>
                      )}
                    </div>
                  </div>
                  <button 
                    onClick={() => {
                      setShowReportModal(false);
                      setGeneratedReportData(null);
                    }}
                    className="p-2 hover:bg-white/20 rounded-full transition-colors"
                  >
                    <FiX className="h-5 w-5" />
                  </button>
                </div>
              </div>
              
              <div className="p-6">
                {generatedReportData ? (
                  // Display Generated Report Data
                  <div className="space-y-6">
                    <div className="flex items-center space-x-2 text-green-600 bg-green-50 p-4 rounded-lg">
                      <FiCheckCircle className="h-5 w-5" />
                      <span className="font-medium">Report Generated Successfully</span>
                    </div>

                    {/* Report Summary Cards */}
                    {generatedReportData.summary && (
                      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                        <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                          <div className="text-blue-600 text-sm font-medium">Total Revenue</div>
                          <div className="text-xl font-bold text-blue-800">{generatedReportData.summary.totalRevenue}</div>
                        </div>
                        <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                          <div className="text-green-600 text-sm font-medium">Customers</div>
                          <div className="text-xl font-bold text-green-800">{generatedReportData.summary.totalCustomers}</div>
                        </div>
                        <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                          <div className="text-purple-600 text-sm font-medium">Orders</div>
                          <div className="text-xl font-bold text-purple-800">{generatedReportData.summary.totalOrders}</div>
                        </div>
                        <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                          <div className="text-orange-600 text-sm font-medium">Growth</div>
                          <div className="text-xl font-bold text-orange-800">{generatedReportData.summary.growthRate}</div>
                        </div>
                      </div>
                    )}

                    {/* Financial Data */}
                    {generatedReportData.revenue && (
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-semibold text-gray-800 mb-3">Financial Overview</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <span className="text-sm text-gray-600">Revenue: </span>
                            <span className="font-semibold">{generatedReportData.revenue}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-600">Net Profit: </span>
                            <span className="font-semibold text-green-600">{generatedReportData.netProfit}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-600">Expenses: </span>
                            <span className="font-semibold">{generatedReportData.expenses}</span>
                          </div>
                          <div>
                            <span className="text-sm text-gray-600">Profit Margin: </span>
                            <span className="font-semibold text-blue-600">{generatedReportData.profitMargin}</span>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Regional Performance */}
                    {generatedReportData.regionalData && (
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-semibold text-gray-800 mb-3">üá∫üá¨ Regional Performance</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {Object.entries(generatedReportData.regionalData).map(([region, data]) => (
                            <div key={region} className="bg-white p-3 rounded border">
                              <div className="font-medium capitalize text-gray-800">{region}</div>
                              <div className="text-sm text-gray-600 mt-1">
                                Revenue: {data.revenue} | Customers: {data.customers} | Orders: {data.orders}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Top Products */}
                    {generatedReportData.topProducts && (
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-semibold text-gray-800 mb-3">üì± Top Performing Products</h4>
                        <div className="space-y-2">
                          {generatedReportData.topProducts.map((product, index) => (
                            <div key={index} className="bg-white p-3 rounded border flex justify-between items-center">
                              <span className="font-medium">{product.name}</span>
                              <div className="text-right text-sm">
                                <div className="font-semibold text-green-600">{product.sales}</div>
                                <div className="text-gray-500">{product.units} units</div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Operational Efficiency */}
                    {generatedReportData.efficiency && (
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <h4 className="font-semibold text-gray-800 mb-3">‚ö° Operational Metrics</h4>
                        <div className="grid grid-cols-2 gap-4">
                          {Object.entries(generatedReportData.efficiency).map(([key, value]) => (
                            <div key={key} className="bg-white p-3 rounded border">
                              <div className="text-sm text-gray-600 capitalize">{key.replace(/([A-Z])/g, ' $1')}</div>
                              <div className="font-semibold">{value}</div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Export Options */}
                    <div className="border-t pt-6">
                      <label className="block text-sm font-medium text-gray-700 mb-3">Export Format</label>
                      <div className="grid grid-cols-3 lg:grid-cols-6 gap-3 mb-4">
                        {exportFormats.map((format) => (
                          <button
                            key={format.id}
                            onClick={() => setSelectedExportFormat(format.id)}
                            disabled={exportingFormat === format.id}
                            className={`p-3 rounded-lg border-2 transition-all duration-300 transform hover:scale-105 ${
                              exportingFormat === format.id
                                ? 'border-orange-500 bg-orange-50 text-orange-800 animate-pulse'
                                : selectedExportFormat === format.id 
                                  ? 'border-green-500 bg-green-50 text-green-800' 
                                  : 'border-gray-200 hover:border-gray-300'
                            }`}
                            title={exportingFormat === format.id ? 'Exporting...' : format.description}
                          >
                            <div className="text-center">
                              <div className="text-lg mb-1">
                                {exportingFormat === format.id ? (
                                  <div className="animate-spin h-5 w-5 border-2 border-orange-600 border-t-transparent rounded-full mx-auto"></div>
                                ) : (
                                  format.icon
                                )}
                              </div>
                              <div className="text-xs font-medium">
                                {exportingFormat === format.id ? 'Exporting...' : format.name}
                              </div>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>

                    <div className="flex space-x-3">
                      <button
                        onClick={async () => {
                          await handleExportReport(selectedReport, selectedExportFormat);
                          toast.success(`üìä ${selectedReport.name} export started!`);
                        }}
                        disabled={exportingFormat}
                        className={`flex-1 py-3 px-4 rounded-lg transition-all transform hover:scale-105 flex items-center justify-center space-x-2 ${
                          exportingFormat
                            ? 'bg-gray-400 cursor-not-allowed'
                            : 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white'
                        }`}
                      >
                        {exportingFormat ? (
                          <>
                            <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                            <span>Exporting...</span>
                          </>
                        ) : (
                          <>
                            <FiDownload className="h-4 w-4" />
                            <span>Export Report</span>
                          </>
                        )}
                      </button>
                      <button
                        onClick={() => {
                          setShowReportModal(false);
                          setGeneratedReportData(null);
                        }}
                        className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                      >
                        Close
                      </button>
                    </div>
                  </div>
                ) : (
                  // Show loading or generation options
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">Generating report...</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const renderOrderVerification = () => {
    // Simple enhanced order data for Uganda context
    const enhancedOrders = pendingOrders.map(order => ({
      ...order,
      deliveryWindow: '8:00 AM - 6:00 PM',
      contactPerson: 'Supplier Contact',
      contactPhone: '+256-700-123456',
      paymentTerms: 'Cash on Delivery',
      vatRate: 18, // Uganda VAT
      tax: order.totalValue * 0.18,
      location: 'Kampala, Uganda',
      currency: 'UGX',
      approvalStatus: order.status === 'pending_verification' ? 'Pending Manager Approval' : order.status
    }));

    const filteredOrders = enhancedOrders.filter(order => {
      const matchesFilter = orderFilter === 'all' || order.status === orderFilter;
      const matchesSupplier = !selectedSupplier || order.supplierName === selectedSupplier;
      const matchesSearch = !searchTerm || 
        order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.supplierName.toLowerCase().includes(searchTerm.toLowerCase());
      return matchesFilter && matchesSupplier && matchesSearch;
    });

    const orderStats = {
      total: enhancedOrders.length,
      pending: enhancedOrders.filter(o => o.status === 'pending_verification').length,
      approved: enhancedOrders.filter(o => o.status === 'approved').length,
      totalValue: enhancedOrders.reduce((sum, o) => sum + o.totalValue, 0)
    };

    const suppliers = [...new Set(enhancedOrders.map(o => o.supplierName))];

    // Print functionality
    const handlePrintOrder = (order) => {
      const printContent = `
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
          <h1 style="text-align: center; color: #2563eb;">üìã Supplier Order Verification</h1>
          <h2 style="text-align: center;">FAREDEAL Uganda</h2>
          <hr style="margin: 20px 0;">
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
            <div>
              <h3>üì¶ Order Information</h3>
              <p><strong>Order Number:</strong> ${order.orderNumber}</p>
              <p><strong>Supplier:</strong> ${order.supplierName}</p>
              <p><strong>Order Date:</strong> ${order.orderDate}</p>
              <p><strong>Expected Delivery:</strong> ${order.expectedDelivery}</p>
              <p><strong>Status:</strong> ${order.approvalStatus}</p>
            </div>
            <div>
              <h3>üí∞ Financial Details</h3>
              <p><strong>Subtotal:</strong> ${formatCurrency(order.totalValue - order.tax)}</p>
              <p><strong>VAT (18%):</strong> ${formatCurrency(order.tax)}</p>
              <p><strong>Total Amount:</strong> ${formatCurrency(order.totalValue)}</p>
              <p><strong>Payment Terms:</strong> ${order.paymentTerms}</p>
            </div>
          </div>
          
          <h3>üìã Order Items</h3>
          <table style="width: 100%; border-collapse: collapse; margin: 10px 0;">
            <thead>
              <tr style="background-color: #f3f4f6;">
                <th style="border: 1px solid #d1d5db; padding: 8px; text-align: left;">Item</th>
                <th style="border: 1px solid #d1d5db; padding: 8px; text-align: center;">Quantity</th>
                <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Unit Price</th>
                <th style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">Total</th>
              </tr>
            </thead>
            <tbody>
              ${order.items.map(item => `
                <tr>
                  <td style="border: 1px solid #d1d5db; padding: 8px;">${item.name}</td>
                  <td style="border: 1px solid #d1d5db; padding: 8px; text-align: center;">${item.quantity}</td>
                  <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${formatCurrency(item.unitPrice)}</td>
                  <td style="border: 1px solid #d1d5db; padding: 8px; text-align: right;">${formatCurrency(item.total)}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          
          <div style="margin-top: 30px;">
            <p><strong>Requested By:</strong> ${order.requestedBy}</p>
            <p><strong>Department:</strong> ${order.department}</p>
            <p><strong>Contact:</strong> ${order.contactPhone}</p>
            <p><strong>Notes:</strong> ${order.notes}</p>
          </div>
          
          <div style="margin-top: 40px; text-align: center;">
            <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
            <p style="font-size: 12px; color: #666;">FAREDEAL Uganda - Manager Portal</p>
          </div>
        </div>
      `;

      const printWindow = window.open('', '_blank');
      printWindow.document.write(`
        <html>
          <head>
            <title>Order ${order.orderNumber} - FAREDEAL</title>
            <style>
              body { margin: 0; padding: 20px; }
              @media print {
                body { margin: 0; }
              }
            </style>
          </head>
          <body>
            ${printContent}
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
      toast.success(`üñ®Ô∏è Order ${order.orderNumber} sent to printer`);
    };

    // Email functionality
    const handleEmailOrder = (order) => {
      const emailSubject = `Supplier Order Verification - ${order.orderNumber}`;
      const emailBody = `
Dear Team,

Please find below the details for supplier order verification:

ORDER INFORMATION:
- Order Number: ${order.orderNumber}
- Supplier: ${order.supplierName}
- Order Date: ${order.orderDate}
- Expected Delivery: ${order.expectedDelivery}
- Total Amount: ${formatCurrency(order.totalValue)}

ITEMS ORDERED:
${order.items.map(item => `- ${item.name} (Qty: ${item.quantity}) - ${formatCurrency(item.total)}`).join('\n')}

CONTACT DETAILS:
- Requested By: ${order.requestedBy}
- Department: ${order.department}
- Contact: ${order.contactPhone}

Notes: ${order.notes}

Best regards,
FAREDEAL Uganda Management Team
      `;

      const mailtoLink = `mailto:?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
      window.open(mailtoLink);
      toast.success(`üìß Email drafted for order ${order.orderNumber}`);
    };

    const SimpleOrderCard = ({ order }) => (
      <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-all duration-300">
        {/* Header */}
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center space-x-3">
            <input
              type="checkbox"
              checked={selectedOrders.includes(order.id)}
              onChange={() => handleOrderSelect(order.id)}
              className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
            />
            <div>
              <h3 className="text-lg font-bold text-gray-900">{order.orderNumber}</h3>
              <p className="text-sm text-gray-600">üè¢ {order.supplierName}</p>
            </div>
          </div>
          
          <span className={`px-3 py-1 text-xs font-bold rounded-full ${
            order.status === 'pending_verification' ? 'bg-yellow-100 text-yellow-800' :
            order.status === 'approved' ? 'bg-green-100 text-green-800' :
            'bg-red-100 text-red-800'
          }`}>
            {order.approvalStatus}
          </span>
        </div>

        {/* Key Info */}
        <div className="grid grid-cols-2 gap-4 mb-4 text-sm">
          <div>
            <span className="text-gray-600">üìÖ Order Date:</span>
            <div className="font-medium">{order.orderDate}</div>
          </div>
          <div>
            <span className="text-gray-600">üöö Expected Delivery:</span>
            <div className="font-medium">{order.expectedDelivery}</div>
          </div>
          <div>
            <span className="text-gray-600">üë§ Requested By:</span>
            <div className="font-medium">{order.requestedBy}</div>
          </div>
          <div>
            <span className="text-gray-600">üè¢ Department:</span>
            <div className="font-medium">{order.department}</div>
          </div>
        </div>

        {/* Amount */}
        <div className="bg-green-50 rounded-lg p-3 mb-4">
          <div className="text-sm text-green-600">Total Order Value</div>
          <div className="text-xl font-bold text-green-800">{formatCurrency(order.totalValue)}</div>
          <div className="text-xs text-green-600">Including 18% VAT: {formatCurrency(order.tax)}</div>
        </div>

        {/* Items Summary */}
        <div className="bg-gray-50 rounded-lg p-3 mb-4">
          <div className="text-sm font-medium text-gray-700 mb-2">üì¶ Items ({order.items.length})</div>
          {order.items.slice(0, 2).map((item, index) => (
            <div key={index} className="flex justify-between text-xs text-gray-600">
              <span>{item.name} √ó {item.quantity}</span>
              <span>{formatCurrency(item.total)}</span>
            </div>
          ))}
          {order.items.length > 2 && (
            <div className="text-xs text-blue-600 mt-1">+{order.items.length - 2} more items...</div>
          )}
        </div>

        {/* Actions */}
        <div className="space-y-3">
          {/* Print and Email Row */}
          <div className="flex space-x-2">
            <button
              onClick={() => handlePrintOrder(order)}
              className="flex-1 bg-gray-600 text-white py-2 px-3 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2"
            >
              <FiPrinter className="h-4 w-4" />
              <span>Print</span>
            </button>
            <button
              onClick={() => handleEmailOrder(order)}
              className="flex-1 bg-blue-600 text-white py-2 px-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
            >
              <FiMail className="h-4 w-4" />
              <span>Email</span>
            </button>
          </div>

          {/* Approval Actions */}
          {order.status === 'pending_verification' && (
            <div className="flex space-x-2">
              <button
                onClick={() => {
                  handleOrderApproval(order.id, 'approved');
                  toast.success(`‚úÖ Order ${order.orderNumber} approved!`);
                }}
                className="flex-1 bg-green-600 text-white py-2 px-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2"
              >
                <FiCheckCircle className="h-4 w-4" />
                <span>Approve</span>
              </button>
              <button
                onClick={() => {
                  handleOrderApproval(order.id, 'rejected');
                  toast.error(`‚ùå Order ${order.orderNumber} rejected`);
                }}
                className="flex-1 bg-red-600 text-white py-2 px-3 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center space-x-2"
              >
                <FiXCircle className="h-4 w-4" />
                <span>Reject</span>
              </button>
            </div>
          )}

          {/* View Details */}
          <button
            onClick={() => setShowOrderDetails(order)}
            className="w-full bg-purple-600 text-white py-2 px-3 rounded-lg hover:bg-purple-700 transition-colors flex items-center justify-center space-x-2"
          >
            <FiEye className="h-4 w-4" />
            <span>View Details</span>
          </button>
        </div>
      </div>
    );

    return (
      <>
        <div className="space-y-6 animate-fadeInUp">
          {/* Simple Header for Uganda */}
          <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold mb-2">üá∫üá¨ Supplier Order Verification</h2>
                <p className="text-green-100">FAREDEAL Uganda - Manager Portal</p>
              </div>
              <div className="text-right">
                <div className="text-3xl font-bold">{orderStats.pending}</div>
                <div className="text-green-200 text-sm">Orders Pending</div>
              </div>
            </div>
          
          <div className="grid grid-cols-3 gap-4 mt-6">
            <div className="bg-white/20 rounded-lg p-4 text-center">
              <div className="text-2xl mb-1">üìã</div>
              <div className="text-lg font-bold">{orderStats.total}</div>
              <div className="text-xs text-white/80">Total Orders</div>
            </div>
            <div className="bg-white/20 rounded-lg p-4 text-center">
              <div className="text-2xl mb-1">‚úÖ</div>
              <div className="text-lg font-bold">{orderStats.approved}</div>
              <div className="text-xs text-white/80">Approved</div>
            </div>
            <div className="bg-white/20 rounded-lg p-4 text-center">
              <div className="text-2xl mb-1">üí∞</div>
              <div className="text-lg font-bold">{formatCurrency(orderStats.totalValue)}</div>
              <div className="text-xs text-white/80">Total Value</div>
            </div>
          </div>
        </div>

        {/* Simple Filters */}
        <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
          <div className="flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4">
            <div className="flex-1">
              <input
                type="text"
                placeholder="üîç Search orders or suppliers..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <select
              value={orderFilter}
              onChange={(e) => setOrderFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Orders</option>
              <option value="pending_verification">üîÑ Pending</option>
              <option value="approved">‚úÖ Approved</option>
              <option value="rejected">‚ùå Rejected</option>
            </select>
            
            <select
              value={selectedSupplier}
              onChange={(e) => setSelectedSupplier(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All Suppliers</option>
              {suppliers.map(supplier => (
                <option key={supplier} value={supplier}>{supplier}</option>
              ))}
            </select>
          </div>

          {/* Bulk Actions for Uganda */}
          {selectedOrders.length > 0 && (
            <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-blue-800">
                  üìã {selectedOrders.length} orders selected
                </span>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleBulkApproval('approve')}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                  >
                    ‚úÖ Approve All
                  </button>
                  <button
                    onClick={() => handleBulkApproval('reject')}
                    className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm"
                  >
                    ‚ùå Reject All
                  </button>
                  <button
                    onClick={() => {
                      selectedOrders.forEach(id => {
                        const order = enhancedOrders.find(o => o.id === id);
                        if (order) handlePrintOrder(order);
                      });
                    }}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm"
                  >
                    üñ®Ô∏è Print All
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Orders Grid */}
        <div className="space-y-6">
          {filteredOrders.length === 0 ? (
            <div className="text-center py-12 bg-white rounded-xl shadow-lg">
              <div className="text-6xl mb-4">üìã</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Orders Found</h3>
              <p className="text-gray-600">No orders match your current filters</p>
            </div>
          ) : (
            <>
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">
                  üì¶ {filteredOrders.length} Orders Found
                </h3>
                <div className="text-sm text-gray-600">
                  Total: <span className="font-bold text-green-600">
                    {formatCurrency(filteredOrders.reduce((sum, o) => sum + o.totalValue, 0))}
                  </span>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredOrders.map(order => (
                  <SimpleOrderCard key={order.id} order={order} />
                ))}
              </div>
            </>
          )}
        </div>

        {/* Simple Modals */}
        {showOrderDetails && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl shadow-2xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
              <div className="bg-gradient-to-r from-blue-600 to-green-600 text-white p-6 rounded-t-2xl">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className="text-xl font-bold">üìã Order Details</h2>
                    <p className="text-blue-200">{showOrderDetails.orderNumber}</p>
                  </div>
                  <button
                    onClick={() => setShowOrderDetails(null)}
                    className="p-2 hover:bg-white/20 rounded-lg transition-colors"
                  >
                    <FiX className="h-5 w-5" />
                  </button>
                </div>
              </div>

              <div className="p-6 space-y-6">
                {/* Order Info */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-bold text-gray-900 mb-3">üìä Order Information</h3>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-600">Supplier:</span> <span className="font-medium">{showOrderDetails.supplierName}</span></div>
                      <div><span className="text-gray-600">Date:</span> <span className="font-medium">{showOrderDetails.orderDate}</span></div>
                      <div><span className="text-gray-600">Delivery:</span> <span className="font-medium">{showOrderDetails.expectedDelivery}</span></div>
                      <div><span className="text-gray-600">Requested By:</span> <span className="font-medium">{showOrderDetails.requestedBy}</span></div>
                    </div>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-900 mb-3">üí∞ Financial</h3>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-600">Subtotal:</span> <span className="font-medium">{formatCurrency(showOrderDetails.totalValue - showOrderDetails.tax)}</span></div>
                      <div><span className="text-gray-600">VAT (18%):</span> <span className="font-medium">{formatCurrency(showOrderDetails.tax)}</span></div>
                      <div><span className="text-gray-600">Total:</span> <span className="font-bold text-green-600">{formatCurrency(showOrderDetails.totalValue)}</span></div>
                      <div><span className="text-gray-600">Payment:</span> <span className="font-medium">{showOrderDetails.paymentTerms}</span></div>
                    </div>
                  </div>
                </div>

                {/* Items */}
                <div>
                  <h3 className="font-bold text-gray-900 mb-3">üì¶ Items</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full border border-gray-200 rounded-lg">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-2 text-left text-sm font-medium text-gray-500">Item</th>
                          <th className="px-4 py-2 text-center text-sm font-medium text-gray-500">Qty</th>
                          <th className="px-4 py-2 text-right text-sm font-medium text-gray-500">Price</th>
                          <th className="px-4 py-2 text-right text-sm font-medium text-gray-500">Total</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {showOrderDetails.items.map((item, index) => (
                          <tr key={index}>
                            <td className="px-4 py-2 text-sm text-gray-900">{item.name}</td>
                            <td className="px-4 py-2 text-sm text-gray-900 text-center">{item.quantity}</td>
                            <td className="px-4 py-2 text-sm text-gray-900 text-right">{formatCurrency(item.unitPrice)}</td>
                            <td className="px-4 py-2 text-sm font-medium text-gray-900 text-right">{formatCurrency(item.total)}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex justify-end space-x-3 pt-4 border-t">
                  <button
                    onClick={() => handlePrintOrder(showOrderDetails)}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors flex items-center space-x-2"
                  >
                    <FiPrinter className="h-4 w-4" />
                    <span>Print</span>
                  </button>
                  <button
                    onClick={() => handleEmailOrder(showOrderDetails)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2"
                  >
                    <FiMail className="h-4 w-4" />
                    <span>Email</span>
                  </button>
                  <button
                    onClick={() => setShowOrderDetails(null)}
                    className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        </div>
      </>
    );
  };

  const renderInventoryAccess = () => (
    <div className="space-y-6 animate-fadeInUp">
      {/* Enhanced Inventory Overview */}
      <div className="bg-white rounded-xl shadow-xl overflow-hidden">
        <div className="p-6 border-b bg-gradient-to-r from-green-500 to-emerald-600 text-white">
          <h2 className="text-2xl font-bold mb-2">üè™ Manager Inventory Control</h2>
          <p className="text-green-100">Complete inventory management with advanced analytics and control features</p>
        </div>

        {/* Manager Stats Dashboard */}
        <div className="p-6 bg-gray-50 border-b">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[
              { title: 'Total Products', value: inventoryStats.totalProducts, icon: FiPackage, color: 'from-blue-500 to-blue-600', change: '+5.2%' },
              { title: 'Low Stock Items', value: inventoryStats.lowStockItems, icon: FiAlertTriangle, color: 'from-yellow-500 to-yellow-600', change: '-12%' },
              { title: 'Out of Stock', value: inventoryStats.outOfStockItems, icon: FiXCircle, color: 'from-red-500 to-red-600', change: '-8%' },
              { title: 'Total Value', value: formatCurrency(inventoryStats.totalValue), icon: FiDollarSign, color: 'from-green-500 to-green-600', change: '+15%' }
            ].map((metric, index) => (
              <div key={index} className="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-gray-600 text-sm font-medium">{metric.title}</p>
                    <p className="text-2xl font-bold text-gray-900 mt-1">{metric.value}</p>
                    <p className="text-green-600 text-sm font-medium mt-1 flex items-center">
                      <FiTrendingUp className="h-3 w-3 mr-1" />
                      {metric.change}
                    </p>
                  </div>
                  <div className={`p-3 rounded-lg bg-gradient-to-r ${metric.color}`}>
                    <metric.icon className="h-6 w-6 text-white" />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Full Inventory Interface for Manager */}
        <ProductInventoryInterface />
      </div>

      {/* Manager Quick Actions */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-900 mb-6">üìä Manager Inventory Actions</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {[
            { title: 'Advanced Analytics', icon: FiBarChart, color: 'bg-indigo-600 hover:bg-indigo-700', action: () => toast.info('üìä Advanced analytics coming soon') },
            { title: 'Bulk Operations', icon: FiPackage, color: 'bg-blue-600 hover:bg-blue-700', action: () => toast.info('üîÑ Bulk operations available in products section') },
            { title: 'Auto Reorder Setup', icon: FiZap, color: 'bg-purple-600 hover:bg-purple-700', action: () => toast.info('‚ö° Auto-reorder configuration coming soon') },
            { title: 'Supplier Reports', icon: FiDownload, color: 'bg-green-600 hover:bg-green-700', action: () => toast.info('üìà Generating supplier performance report...') }
          ].map((action, index) => (
            <button
              key={index}
              onClick={action.action}
              className={`${action.color} text-white p-4 rounded-lg transition-all duration-300 transform hover:scale-105 flex flex-col items-center space-y-2`}
            >
              <action.icon className="h-6 w-6" />
              <span className="text-sm font-medium">{action.title}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Performance Insights */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-900 mb-6">Top Performing Categories</h3>
          <div className="space-y-4">
            {inventoryStats.topCategories.map((category, index) => (
              <div key={index} className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center">
                    <span className="text-sm font-bold text-white">{index + 1}</span>
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">{category.name}</p>
                    <p className="text-sm text-gray-600">{category.percentage}% of total value</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-bold text-gray-900">{formatCurrency(category.value)}</p>
                  <div className="w-24 bg-gray-200 rounded-full h-2 mt-1">
                    <div
                      className="bg-gradient-to-r from-green-400 to-green-600 h-2 rounded-full"
                      style={{ width: `${category.percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-900 mb-6">Recent Manager Activities</h3>
          <div className="space-y-4">
            {inventoryStats.recentActivities.map((activity, index) => (
              <div key={index} className="flex items-center space-x-4">
                <div className={`p-2 rounded-full ${
                  activity.type === 'stock_in' ? 'bg-green-100 text-green-600' :
                  activity.type === 'stock_out' ? 'bg-blue-100 text-blue-600' :
                  activity.type === 'low_stock' ? 'bg-yellow-100 text-yellow-600' :
                  'bg-purple-100 text-purple-600'
                }`}>
                  {activity.type === 'stock_in' ? 'üì•' :
                   activity.type === 'stock_out' ? 'üì§' :
                   activity.type === 'low_stock' ? '‚ö†Ô∏è' : 'üÜï'}
                </div>
                <div className="flex-1">
                  <p className="text-gray-900 font-medium">{activity.message}</p>
                  <p className="text-sm text-gray-500">{activity.time}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  
  // Component render function

  // Creative Header Component with Unique Icon Containers
  const renderCustomHeader = () => (
    <div className="bg-gradient-to-r from-green-500 via-yellow-500 to-orange-500 shadow-xl relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-2 left-1/4 text-2xl animate-bounce">‚òÄÔ∏è</div>
        <div className="absolute top-4 right-1/3 text-lg animate-pulse">üåü</div>
        <div className="absolute bottom-3 left-1/2 text-xl animate-spin-slow">‚ú®</div>
      </div>
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="flex items-center justify-between h-16">
          {/* Left side - Enhanced Logo/Brand */}
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-3 group cursor-pointer">
              {/* Animated Uganda Flag Container */}
              <div className="relative p-2 bg-white/10 rounded-full border-2 border-white/20 backdrop-blur-sm group-hover:bg-white/20 transition-all duration-300">
                <div className="text-2xl animate-bounce group-hover:animate-spin">üá∫üá¨</div>
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
              </div>
              
              {/* Brand Text with Creative Styling */}
              <div className="text-white font-bold text-xl group-hover:scale-105 transition-transform duration-300">
                <span className="bg-gradient-to-r from-white to-yellow-200 bg-clip-text text-transparent">
                  FAREDEAL
                </span>
                <div className="text-xs text-yellow-200 font-normal">Pearl of Africa</div>
              </div>
            </div>
          </div>

          {/* Right side - Creative Icon Containers */}
          <div className="flex items-center space-x-4">
            {/* Main Navigation Dropdown Button - Uganda Style (Always Visible) */}
            <button
              onClick={() => setShowMainDropdown(!showMainDropdown)}
              className="relative group"
              title="Main Navigation - Uganda Portal"
            >
              <div className="relative p-3 bg-gradient-to-br from-yellow-400/20 via-red-500/20 to-black/20 backdrop-blur-sm rounded-2xl border-2 border-yellow-400/30 hover:border-yellow-400/50 transition-all duration-500 transform hover:scale-110 shadow-lg">
                {/* Uganda flag gradient background */}
                <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/20 via-red-500/20 to-black/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                {/* Navigation Grid Icon with Uganda colors */}
                <div className="relative z-10 w-5 h-5 grid grid-cols-2 gap-1">
                  <div className="w-2 h-2 bg-yellow-300 rounded-sm transform group-hover:rotate-45 transition-all duration-300"></div>
                  <div className="w-2 h-2 bg-red-400 rounded-sm transform group-hover:-rotate-45 transition-all duration-300"></div>
                  <div className="w-2 h-2 bg-white rounded-sm transform group-hover:rotate-45 transition-all duration-300"></div>
                  <div className="w-2 h-2 bg-yellow-300 rounded-sm transform group-hover:-rotate-45 transition-all duration-300"></div>
                </div>
                
                {/* Uganda flag indicator */}
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-gradient-to-r from-yellow-400 via-red-500 to-black rounded-full border-2 border-white shadow-sm">
                  <span className="absolute inset-0 flex items-center justify-center text-xs">üá∫üá¨</span>
                </div>
                
                {/* Glowing ring effect */}
                <div className="absolute inset-0 rounded-2xl border-2 border-yellow-400/50 opacity-0 group-hover:opacity-100 animate-pulse"></div>
              </div>
            </button>

            {/* Mobile Menu Button - Uganda Style (Mobile Only) */}
            {isMobile && (
              <button
                onClick={() => setShowMobileDropdown(!showMobileDropdown)}
                className="relative group md:hidden"
                title="Mobile Menu - Uganda"
              >
                <div className="relative p-3 bg-gradient-to-br from-yellow-400/20 via-red-500/20 to-black/20 backdrop-blur-sm rounded-2xl border-2 border-yellow-400/30 hover:border-yellow-400/50 transition-all duration-500 transform hover:scale-110 shadow-lg">
                  {/* Uganda flag gradient background */}
                  <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/20 via-red-500/20 to-black/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  
                  {/* Hamburger Menu with Uganda colors */}
                  <div className="relative z-10 w-5 h-5 flex flex-col justify-center space-y-1">
                    <div className="w-full h-0.5 bg-yellow-300 rounded transform group-hover:rotate-45 group-hover:translate-y-1.5 transition-all duration-300"></div>
                    <div className="w-full h-0.5 bg-red-400 rounded group-hover:opacity-0 transition-all duration-300"></div>
                    <div className="w-full h-0.5 bg-white rounded transform group-hover:-rotate-45 group-hover:-translate-y-1.5 transition-all duration-300"></div>
                  </div>
                  
                  {/* Uganda flag indicator */}
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-gradient-to-r from-yellow-400 via-red-500 to-black rounded-full border-2 border-white shadow-sm">
                    <span className="absolute inset-0 flex items-center justify-center text-xs">üá∫üá¨</span>
                  </div>
                  
                  {/* Glowing ring effect */}
                  <div className="absolute inset-0 rounded-2xl border-2 border-yellow-400/50 opacity-0 group-hover:opacity-100 animate-pulse"></div>
                </div>
              </button>
            )}

            {/* Hexagonal Notification Bell Container */}
            <button
              onClick={handleNotificationClick}
              className="relative group"
              title="Notifications"
            >
              <div className="relative p-3 bg-white/15 backdrop-blur-sm rounded-2xl border-2 border-white/20 hover:bg-white/25 transition-all duration-500 transform hover:scale-110 hover:rotate-3 shadow-lg">
                {/* Hexagonal background effect */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-400/30 to-purple-600/30 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                <FiBell className="h-5 w-5 text-white relative z-10 group-hover:animate-bounce" />
                
                {/* Enhanced notification badge */}
                {notificationCount > 0 && (
                  <div className="absolute -top-2 -right-2 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold border-2 border-white shadow-lg">
                    <span className="animate-pulse">{notificationCount}</span>
                  </div>
                )}
                
                {/* Glowing ring effect */}
                <div className="absolute inset-0 rounded-2xl border-2 border-blue-400/50 opacity-0 group-hover:opacity-100 animate-ping"></div>
              </div>
            </button>

            {/* Diamond-shaped Settings Container */}
            <button
              onClick={handleSettingsClick}
              className="relative group"
              title="Advanced Settings"
            >
              <div className="relative p-3 bg-white/15 backdrop-blur-sm transform rotate-45 rounded-lg border-2 border-white/20 hover:bg-white/25 transition-all duration-500 group-hover:scale-110 shadow-lg">
                {/* Inner diamond content */}
                <div className="transform -rotate-45">
                  <FiSettings className="h-5 w-5 text-white group-hover:rotate-180 transition-transform duration-700" />
                </div>
                
                {/* Rotating border effect */}
                <div className="absolute inset-0 border-2 border-gradient-to-r from-purple-400 to-pink-400 rounded-lg opacity-0 group-hover:opacity-100 animate-spin-slow"></div>
              </div>
              
              {/* Floating sparkles */}
              <div className="absolute -top-1 -left-1 w-2 h-2 bg-yellow-400 rounded-full opacity-0 group-hover:opacity-100 animate-ping"></div>
              <div className="absolute -bottom-1 -right-1 w-2 h-2 bg-pink-400 rounded-full opacity-0 group-hover:opacity-100 animate-ping" style={{ animationDelay: '0.5s' }}></div>
            </button>

            {/* Morphing Profile Container */}
            <button
              onClick={handleProfileClick}
              className="relative group"
            >
              <div className="flex items-center space-x-3 bg-white/15 backdrop-blur-sm hover:bg-white/25 rounded-full pr-4 pl-2 py-2 transition-all duration-500 transform hover:scale-105 border-2 border-white/20 shadow-lg group-hover:shadow-2xl">
                {/* Animated avatar container */}
                <div className="relative">
                  <div className="w-10 h-10 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white font-bold text-sm group-hover:scale-110 transition-all duration-300 shadow-lg border-2 border-white/30">
                    <span className="text-lg group-hover:animate-bounce">{managerProfile.avatar}</span>
                  </div>
                  
                  {/* Orbiting status indicator */}
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white animate-pulse shadow-md">
                    <div className="w-full h-full bg-green-500 rounded-full animate-ping"></div>
                  </div>
                  
                  {/* Rotating halo effect */}
                  <div className="absolute inset-0 rounded-full border-2 border-yellow-400/50 opacity-0 group-hover:opacity-100 animate-spin"></div>
                </div>
                
                {/* Profile info with enhanced styling */}
                <div className="text-left text-white">
                  <div className="text-sm font-bold group-hover:text-yellow-200 transition-colors">
                    {managerProfile.name}
                  </div>
                  <div className="flex items-center space-x-2 text-xs">
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse shadow-sm"></div>
                      <span className="text-green-200 font-medium">
                        {managerProfile.status}
                      </span>
                    </div>
                    <span className="text-white/70">‚Ä¢</span>
                    <span className="text-orange-200 flex items-center space-x-1">
                      <span>üìç</span>
                      <span>{managerProfile.location.split(',')[0]}</span>
                    </span>
                  </div>
                </div>
                
                {/* Chevron indicator */}
                <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 ml-2">
                  <FiChevronDown className="h-4 w-4 text-white/70 group-hover:animate-bounce" />
                </div>
              </div>
            </button>

            {/* Quick Action Floating Button */}
            <button
              onClick={() => {
                toast.success('üöÄ Quick actions menu opened!');
                // Could open a quick actions modal
              }}
              className="relative group"
              title="Quick Actions"
            >
              <div className="relative p-3 bg-gradient-to-br from-purple-500/80 to-pink-500/80 backdrop-blur-sm rounded-full border-2 border-white/30 hover:from-purple-600/90 hover:to-pink-600/90 transition-all duration-500 transform hover:scale-110 shadow-lg group-hover:shadow-2xl">
                <FiZap className="h-5 w-5 text-white group-hover:animate-pulse" />
                
                {/* Electric effect */}
                <div className="absolute inset-0 rounded-full bg-gradient-to-r from-yellow-400/50 to-orange-400/50 opacity-0 group-hover:opacity-100 animate-ping"></div>
                
                {/* Lightning bolts */}
                <div className="absolute -top-1 -right-1 text-xs text-yellow-300 opacity-0 group-hover:opacity-100 animate-bounce">‚ö°</div>
              </div>
            </button>
          </div>
        </div>
      </div>
      
      {/* Bottom accent line */}
      <div className="h-1 bg-gradient-to-r from-transparent via-white/30 to-transparent"></div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      <style dangerouslySetInnerHTML={{
        __html: `
          @keyframes fadeInUp {
            from {
              opacity: 0;
              transform: translateY(30px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }
          .animate-fadeInUp {
            animation: fadeInUp 0.8s ease-out;
          }
          
          @keyframes slideInRight {
            from {
              opacity: 0;
              transform: translateX(50px);
            }
            to {
              opacity: 1;
              transform: translateX(0);
            }
          }
          
          @keyframes spin-slow {
            from {
              transform: rotate(0deg);
            }
            to {
              transform: rotate(360deg);
            }
          }
          .animate-spin-slow {
            animation: spin-slow 3s linear infinite;
          }
          
          /* Custom scrollbar styles */
          .scrollbar-hide {
            -ms-overflow-style: none;
            scrollbar-width: none;
          }
          .scrollbar-hide::-webkit-scrollbar {
            display: none;
          }
          
          /* Smooth scroll for mobile navigation */
          .mobile-nav-scroll {
            scroll-behavior: smooth;
            scroll-snap-type: x mandatory;
          }
          .mobile-nav-scroll > * {
            scroll-snap-align: start;
          }
          
          /* Gradient background animation */
          @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
          }
          
          .animated-gradient {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
          }
          
          /* Pulse animation for notifications */
          @keyframes notification-pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.8; }
            100% { transform: scale(1); opacity: 1; }
          }
          
          .notification-pulse {
            animation: notification-pulse 2s infinite;
          }
          
          /* Mobile touch improvements */
          @media (max-width: 640px) {
            .touch-target {
              min-height: 44px;
              min-width: 44px;
            }
          }
          
          /* Uganda flag animation */
          @keyframes ugandaFlag {
            0% { transform: scale(1) rotate(0deg); }
            25% { transform: scale(1.1) rotate(5deg); }
            50% { transform: scale(1) rotate(0deg); }
            75% { transform: scale(1.1) rotate(-5deg); }
            100% { transform: scale(1) rotate(0deg); }
          }
          
          .uganda-flag-animation {
            animation: ugandaFlag 3s ease-in-out infinite;
          }
          
          /* Enhanced header animations */
          @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
          }
          
          @keyframes glow {
            0%, 100% { box-shadow: 0 0 5px rgba(255, 255, 255, 0.3); }
            50% { box-shadow: 0 0 20px rgba(255, 255, 255, 0.6), 0 0 30px rgba(255, 255, 255, 0.4); }
          }
          
          @keyframes morphBorder {
            0% { border-radius: 12px; }
            25% { border-radius: 50% 12px 50% 12px; }
            50% { border-radius: 12px 50% 12px 50%; }
            75% { border-radius: 50% 12px 50% 12px; }
            100% { border-radius: 12px; }
          }
          
          .animate-float {
            animation: float 3s ease-in-out infinite;
          }
          
          .animate-glow {
            animation: glow 2s ease-in-out infinite;
          }
          
          .animate-morph-border {
            animation: morphBorder 4s ease-in-out infinite;
          }
          
          /* Hexagon effect */
          .hexagon {
            clip-path: polygon(30% 0%, 70% 0%, 100% 50%, 70% 100%, 30% 100%, 0% 50%);
          }
          
          /* Diamond rotation effect */
          .diamond-container {
            perspective: 1000px;
          }
          
          .diamond-inner {
            transform-style: preserve-3d;
            transition: transform 0.6s;
          }
          
          .diamond-container:hover .diamond-inner {
            transform: rotateY(180deg);
          }
          
          /* Glassmorphism effect */
          .glass-morphism {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
          }
          
          /* Neon glow effect */
          .neon-glow {
            text-shadow: 0 0 5px currentColor, 0 0 10px currentColor, 0 0 15px currentColor;
          }
          
          /* Profile container morphing */
          @keyframes profileMorph {
            0% { border-radius: 25px; }
            50% { border-radius: 15px 25px 15px 25px; }
            100% { border-radius: 25px; }
          }
          
          .profile-morph:hover {
            animation: profileMorph 1s ease-in-out;
          }
        `
      }} />
      
      {/* Custom Header matching the image design */}
      {renderCustomHeader()}

      {/* Enhanced Navigation Component */}
      <Suspense fallback={
        <div className="h-20 bg-white animate-pulse border-b border-gray-200"></div>
      }>
        <ManagerNavigation
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          isMobile={isMobile}
        />
      </Suspense>

      {/* Enhanced Mobile-Friendly Navigation */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto">
          {/* Desktop Navigation */}
          <nav className="hidden sm:flex px-4 sm:px-6 lg:px-8">
            <div className="flex space-x-2 lg:space-x-6 overflow-x-auto scrollbar-hide">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center space-x-2 py-3 px-3 lg:px-4 border-b-3 font-medium text-xs lg:text-sm transition-all duration-300 whitespace-nowrap group ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600 bg-blue-50'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <tab.icon className={`h-4 w-4 lg:h-5 lg:w-5 transition-transform duration-300 ${
                    activeTab === tab.id ? 'scale-110' : 'group-hover:scale-105'
                  }`} />
                  <span className="hidden lg:inline">{tab.label}</span>
                  <span className="lg:hidden">{tab.label.split(' ')[0]}</span>
                  {activeTab === tab.id && (
                    <div className="hidden lg:block w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                  )}
                </button>
              ))}
            </div>
          </nav>

          {/* Mobile Navigation - Enhanced Horizontal Scroll */}
          <nav className="sm:hidden px-3 py-3">
            <div className="flex space-x-3 overflow-x-auto scrollbar-hide mobile-nav-scroll pb-2">
              {tabs.map((tab, index) => (
                <button
                  key={tab.id}
                  onClick={() => {
                    setActiveTab(tab.id);
                    // Haptic feedback simulation
                    if (navigator.vibrate) {
                      navigator.vibrate(50);
                    }
                    toast.success("üì± Switched to " + tab.label);
                  }}
                  className={
                    "flex flex-col items-center justify-center p-4 rounded-2xl min-w-[90px] transition-all duration-500 transform touch-target " + 
                    (activeTab === tab.id
                      ? 'bg-gradient-to-br from-blue-500 via-purple-500 to-green-500 text-white shadow-xl scale-110 -translate-y-1'
                      : 'bg-white text-gray-600 hover:bg-gray-50 shadow-md hover:shadow-lg hover:scale-105')
                  }
                  style={{
                    animationDelay: (index * 50) + "ms",
                  }}
                >
                  <div className={"relative " + (activeTab === tab.id ? 'animate-bounce' : '')}>
                    <tab.icon className={
                      "h-6 w-6 mb-2 transition-all duration-300 " + 
                      (activeTab === tab.id ? 'text-white' : 'text-gray-600')
                    } />
                    {activeTab === tab.id && (
                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
                    )}
                  </div>
                  
                  <span className={
                    "text-xs font-bold text-center leading-tight " + 
                    (activeTab === tab.id ? 'text-white' : 'text-gray-700')
                  }>
                    {tab.label.split(' ')[0]}
                  </span>
                  
                  {tab.label.includes(' ') && (
                    <span className={
                      "text-xs text-center leading-tight " + 
                      (activeTab === tab.id ? 'text-blue-100' : 'text-gray-500')
                    }>
                      {tab.label.split(' ').slice(1).join(' ')}
                    </span>
                  )}
                  
                  {activeTab === tab.id && (
                    <div className="w-2 h-2 bg-yellow-400 rounded-full mt-1 animate-pulse shadow-lg"></div>
                  )}
                </button>
              ))}
            </div>
            
            {/* Mobile Navigation Indicator */}
            <div className="flex justify-center mt-2">
              <div className="flex space-x-1">
                {tabs.map((tab, index) => (
                  <div
                    key={tab.id}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      activeTab === tab.id 
                        ? 'bg-gradient-to-r from-blue-500 to-purple-500 w-6' 
                        : 'bg-gray-300'
                    }`}
                  />
                ))}
              </div>
            </div>
          </nav>

          {/* Enhanced Mobile Stats Bar */}
          <div className="sm:hidden bg-gradient-to-r from-green-50 via-blue-50 to-purple-50 px-3 py-3 border-t border-gray-100">
            <div className="grid grid-cols-3 gap-3">
              <button 
                onClick={() => {
                  setActiveTab('analytics');
                  toast.info('üìä Viewing today\'s revenue analytics');
                }}
                className="bg-white rounded-xl p-3 shadow-sm hover:shadow-md transition-all duration-300 transform hover:scale-105 touch-target"
              >
                <div className="flex items-center justify-center space-x-2">
                  <span className="text-lg">ÔøΩ</span>
                  <div className="text-left">
                    <div className="text-xs text-gray-600 font-medium">Today</div>
                    <div className="text-sm font-bold text-green-600">UGX 2.4M</div>
                  </div>
                </div>
              </button>
              
              <button 
                onClick={() => {
                  setActiveTab('orders');
                  toast.info('üì¶ Viewing order management');
                }}
                className="bg-white rounded-xl p-3 shadow-sm hover:shadow-md transition-all duration-300 transform hover:scale-105 touch-target"
              >
                <div className="flex items-center justify-center space-x-2">
                  <span className="text-lg">üì¶</span>
                  <div className="text-left">
                    <div className="text-xs text-gray-600 font-medium">Orders</div>
                    <div className="text-sm font-bold text-blue-600">12</div>
                  </div>
                </div>
              </button>
              
              <button 
                onClick={() => {
                  setActiveTab('team');
                  toast.info('üë• Viewing team dashboard');
                }}
                className="bg-white rounded-xl p-3 shadow-sm hover:shadow-md transition-all duration-300 transform hover:scale-105 touch-target"
              >
                <div className="flex items-center justify-center space-x-2">
                  <span className="text-lg">üë•</span>
                  <div className="text-left">
                    <div className="text-xs text-gray-600 font-medium">Online</div>
                    <div className="text-sm font-bold text-purple-600">8</div>
                  </div>
                </div>
              </button>
            </div>
            
            {/* Quick Action Bar */}
            <div className="mt-3 flex justify-center space-x-2">
              <button 
                onClick={() => toast.success('üîÑ Data refreshed!')}
                className="flex items-center space-x-1 bg-blue-500 text-white px-3 py-2 rounded-full text-xs font-medium hover:bg-blue-600 transition-colors touch-target"
              >
                <FiRefreshCw className="h-3 w-3" />
                <span>Refresh</span>
              </button>
              <button 
                onClick={() => toast.info('üìß Notifications center opened')}
                className="flex items-center space-x-1 bg-purple-500 text-white px-3 py-2 rounded-full text-xs font-medium hover:bg-purple-600 transition-colors touch-target"
              >
                <FiBell className="h-3 w-3" />
                <span>Alerts</span>
              </button>
              <button 
                onClick={() => toast.success('üìä Report generated!')}
                className="flex items-center space-x-1 bg-green-500 text-white px-3 py-2 rounded-full text-xs font-medium hover:bg-green-600 transition-colors touch-target"
              >
                <FiDownload className="h-3 w-3" />
                <span>Export</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Navigation Dropdown - Creative Uganda Design (Always Available) */}
      {showMainDropdown && (
        <div className="fixed inset-0 z-50" onClick={() => setShowMainDropdown(false)}>
          <div className="absolute top-20 right-4 w-80 max-w-full">
            <div 
              className="main-dropdown-container bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl border-2 border-yellow-400/30 overflow-hidden transform transition-all duration-400 animate-slideDown"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Uganda Header */}
              <div className="bg-gradient-to-r from-yellow-400 via-red-500 to-black text-white p-4 relative overflow-hidden">
                {/* Uganda Flag Pattern Background */}
                <div className="absolute inset-0 opacity-20">
                  <div className="absolute top-0 left-0 right-0 h-1/3 bg-black"></div>
                  <div className="absolute top-1/3 left-0 right-0 h-1/3 bg-yellow-400"></div>
                  <div className="absolute bottom-0 left-0 right-0 h-1/3 bg-red-500"></div>
                </div>
                
                <div className="relative z-10 flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center border-2 border-white/30">
                      <span className="text-xl animate-bounce">üá∫üá¨</span>
                    </div>
                    <div>
                      <h3 className="font-bold text-lg">FAREDEAL Navigation</h3>
                      <p className="text-yellow-200 text-xs font-medium">Pearl of Africa Portal</p>
                    </div>
                  </div>
                  
                  <button 
                    onClick={() => setShowMainDropdown(false)}
                    className="p-2 hover:bg-white/20 rounded-full transition-colors"
                  >
                    <FiX className="h-5 w-5" />
                  </button>
                </div>
              </div>

              {/* Navigation Grid */}
              <div className="p-4 grid grid-cols-2 gap-3">
                {[
                  { id: 'overview', icon: 'üìä', label: 'Dashboard', desc: 'Business overview', color: 'bg-blue-50 border-blue-200 text-blue-800', gradient: 'from-blue-400 to-blue-600' },
                  { id: 'portal-control', icon: 'üöÄ', label: 'Portal Control', desc: 'AI-powered portal management', color: 'bg-cyan-50 border-cyan-200 text-cyan-800', gradient: 'from-cyan-400 to-blue-600' },
                  { id: 'analytics', icon: 'üìà', label: 'Analytics', desc: 'Data insights', color: 'bg-green-50 border-green-200 text-green-800', gradient: 'from-green-400 to-green-600' },
                  { id: 'team', icon: 'üë•', label: 'Team', desc: 'Staff management', color: 'bg-purple-50 border-purple-200 text-purple-800', gradient: 'from-purple-400 to-purple-600' },
                  { id: 'suppliers', icon: 'ü§ù', label: 'Suppliers', desc: 'Verify partners', color: 'bg-orange-50 border-orange-200 text-orange-800', gradient: 'from-orange-400 to-orange-600' },
                  { id: 'orders', icon: 'üì¶', label: 'Orders', desc: 'Order management', color: 'bg-cyan-50 border-cyan-200 text-cyan-800', gradient: 'from-cyan-400 to-cyan-600' },
                  { id: 'inventory', icon: 'üìã', label: 'Inventory', desc: 'Stock control', color: 'bg-indigo-50 border-indigo-200 text-indigo-800', gradient: 'from-indigo-400 to-indigo-600' },
                  { id: 'reports', icon: 'üìÑ', label: 'Reports', desc: 'Access control', color: 'bg-pink-50 border-pink-200 text-pink-800', gradient: 'from-pink-400 to-pink-600' },
                  { id: 'alerts', icon: 'üîî', label: 'Alerts', desc: 'Notifications', color: 'bg-red-50 border-red-200 text-red-800', gradient: 'from-red-400 to-red-600' }
                ].map((item, index) => (
                  <button
                    key={item.id}
                    onClick={() => {
                      setActiveTab(item.id);
                      setShowMainDropdown(false);
                      toast.success(`üá∫üá¨ Switched to ${item.label} - ${item.desc}`);
                    }}
                    className={`relative p-4 rounded-2xl border-2 transition-all duration-300 transform hover:scale-105 hover:shadow-xl group ${
                      activeTab === item.id 
                        ? `${item.color} shadow-lg scale-105 ring-2 ring-yellow-400` 
                        : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                    }`}
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    {/* Background Gradient Effect */}
                    <div className={`absolute inset-0 bg-gradient-to-br ${item.gradient} opacity-0 group-hover:opacity-10 rounded-2xl transition-opacity duration-300`}></div>
                    
                    <div className="relative z-10 text-center">
                      <div className={`w-12 h-12 mx-auto rounded-full flex items-center justify-center text-xl mb-2 transition-all duration-300 ${
                        activeTab === item.id ? 'bg-white/50 scale-110' : 'bg-gray-200 group-hover:bg-white group-hover:scale-110'
                      }`}>
                        {item.icon}
                      </div>
                      <h4 className="font-bold text-sm mb-1">{item.label}</h4>
                      <p className="text-xs opacity-75 leading-tight">{item.desc}</p>
                      
                      {/* Active Indicator */}
                      {activeTab === item.id && (
                        <div className="absolute -top-1 -right-1 w-6 h-6 bg-gradient-to-r from-yellow-400 to-red-500 rounded-full flex items-center justify-center">
                          <FiCheck className="h-3 w-3 text-white" />
                        </div>
                      )}
                    </div>
                  </button>
                ))}
              </div>

              {/* Quick Actions Footer */}
              <div className="p-4 bg-gradient-to-r from-yellow-400/10 via-red-500/10 to-black/10 border-t border-gray-200">
                <div className="grid grid-cols-3 gap-2">
                  <button
                    onClick={() => {
                      setShowNotifications(!showNotifications);
                      setShowMainDropdown(false);
                    }}
                    className="p-2 bg-yellow-100 rounded-xl text-center border border-yellow-200 hover:bg-yellow-200 transition-colors relative group"
                  >
                    <div className="text-lg">üîî</div>
                    <div className="text-xs font-medium text-yellow-800 mt-1">Alerts</div>
                    {notificationCount > 0 && (
                      <div className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center font-bold animate-pulse">
                        {notificationCount}
                      </div>
                    )}
                  </button>
                  
                  <button
                    onClick={() => {
                      toast.success('üåç Exploring Uganda business opportunities');
                      setShowMainDropdown(false);
                    }}
                    className="p-2 bg-red-100 rounded-xl text-center border border-red-200 hover:bg-red-200 transition-colors"
                  >
                    <div className="text-lg">üåç</div>
                    <div className="text-xs font-medium text-red-800 mt-1">Explore</div>
                  </button>
                  
                  <button
                    onClick={() => {
                      toast.info('‚öôÔ∏è Opening Uganda portal settings');
                      setShowMainDropdown(false);
                    }}
                    className="p-2 bg-black/10 rounded-xl text-center border border-gray-300 hover:bg-black/20 transition-colors"
                  >
                    <div className="text-lg">‚öôÔ∏è</div>
                    <div className="text-xs font-medium text-gray-800 mt-1">Settings</div>
                  </button>
                </div>
                
                {/* Uganda Pride Message */}
                <div className="mt-3 text-center">
                  <p className="text-xs text-gray-600">
                    üá∫üá¨ <span className="font-semibold uganda-text">Proudly serving Uganda</span> üá∫üá¨
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Mobile Dropdown for Uganda */}
      {isMobile && showMobileDropdown && (
        <div className="fixed inset-0 z-50" onClick={() => setShowMobileDropdown(false)}>
          <div className="absolute top-0 left-0 right-0 bg-gradient-to-br from-yellow-400 via-red-500 to-black shadow-2xl border-b-4 border-yellow-400">
            <div 
              className="mobile-dropdown-container bg-white/95 backdrop-blur-sm m-4 rounded-3xl shadow-2xl overflow-hidden transform transition-all duration-300 animate-slideDown"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Uganda Header */}
              <div className="bg-gradient-to-r from-yellow-400 via-red-500 to-black text-white p-6 relative overflow-hidden">
                {/* Uganda Flag Pattern Background */}
                <div className="absolute inset-0 opacity-20">
                  <div className="absolute top-0 left-0 right-0 h-1/3 bg-black"></div>
                  <div className="absolute top-1/3 left-0 right-0 h-1/3 bg-yellow-400"></div>
                  <div className="absolute bottom-0 left-0 right-0 h-1/3 bg-red-500"></div>
                </div>
                
                <div className="relative z-10 flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center border-2 border-white/30">
                      <span className="text-2xl animate-bounce">üá∫üá¨</span>
                    </div>
                    <div>
                      <h3 className="font-bold text-xl">FAREDEAL</h3>
                      <p className="text-yellow-200 text-sm font-medium">Pearl of Africa</p>
                    </div>
                  </div>
                  
                  <button 
                    onClick={() => setShowMobileDropdown(false)}
                    className="p-2 hover:bg-white/20 rounded-full transition-colors"
                  >
                    <FiX className="h-6 w-6" />
                  </button>
                </div>

                {/* Manager Info */}
                <div className="mt-4 p-4 bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center text-lg font-bold border-2 border-white">
                      üë©‚Äçüíº
                    </div>
                    <div>
                      <h4 className="font-bold text-lg">Nakiyonga Catherine</h4>
                      <div className="flex items-center space-x-2 text-sm">
                        <div className="flex items-center space-x-1">
                          <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                          <span className="text-green-200">Online</span>
                        </div>
                        <span className="text-white/60">‚Ä¢</span>
                        <div className="flex items-center space-x-1">
                          <span>üìç</span>
                          <span className="text-yellow-200">Kampala</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="mt-4 grid grid-cols-2 gap-3">
                  <div className="bg-white/10 backdrop-blur-sm rounded-xl p-3 border border-white/20">
                    <div className="text-center">
                      <div className="text-2xl font-bold">‚ö°</div>
                      <div className="text-xs text-yellow-200 mt-1">Quick Actions</div>
                    </div>
                  </div>
                  <div className="bg-white/10 backdrop-blur-sm rounded-xl p-3 border border-white/20">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-yellow-300">{notificationCount}</div>
                      <div className="text-xs text-yellow-200 mt-1">New Updates</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Navigation Menu */}
              <div className="p-4 space-y-2">
                {[
                  { id: 'overview', icon: 'üìä', label: 'Dashboard', desc: 'Business overview', color: 'bg-blue-50 border-blue-200 text-blue-800' },
                  { id: 'portal-control', icon: 'üöÄ', label: 'Portal Control', desc: 'AI portal management', color: 'bg-cyan-50 border-cyan-200 text-cyan-800' },
                  { id: 'analytics', icon: 'üìà', label: 'Analytics', desc: 'Data insights', color: 'bg-green-50 border-green-200 text-green-800' },
                  { id: 'team', icon: 'üë•', label: 'Team', desc: 'Staff management', color: 'bg-purple-50 border-purple-200 text-purple-800' },
                  { id: 'suppliers', icon: 'ü§ù', label: 'Suppliers', desc: 'Verify partners', color: 'bg-orange-50 border-orange-200 text-orange-800' },
                  { id: 'orders', icon: 'üì¶', label: 'Orders', desc: 'Order management', color: 'bg-cyan-50 border-cyan-200 text-cyan-800' },
                  { id: 'inventory', icon: 'üìã', label: 'Inventory', desc: 'Stock control', color: 'bg-indigo-50 border-indigo-200 text-indigo-800' },
                  { id: 'reports', icon: 'üìÑ', label: 'Reports', desc: 'Access control', color: 'bg-pink-50 border-pink-200 text-pink-800' },
                  { id: 'alerts', icon: 'üîî', label: 'Alerts', desc: 'Notifications', color: 'bg-red-50 border-red-200 text-red-800' }
                ].map((item, index) => (
                  <button
                    key={item.id}
                    onClick={() => {
                      setActiveTab(item.id);
                      setShowMobileDropdown(false);
                      toast.success(`üì± Switched to ${item.label} - ${item.desc}`);
                    }}
                    className={`w-full p-4 rounded-2xl border-2 transition-all duration-300 transform hover:scale-105 hover:shadow-lg ${
                      activeTab === item.id 
                        ? `${item.color} shadow-lg scale-105` 
                        : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                    }`}
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    <div className="flex items-center space-x-4">
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center text-xl ${
                        activeTab === item.id ? 'bg-white/50' : 'bg-gray-200'
                      }`}>
                        {item.icon}
                      </div>
                      <div className="flex-1 text-left">
                        <h4 className="font-bold text-lg">{item.label}</h4>
                        <p className="text-sm opacity-75">{item.desc}</p>
                      </div>
                      {activeTab === item.id && (
                        <div className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-current rounded-full animate-pulse"></div>
                          <FiChevronRight className="h-5 w-5" />
                        </div>
                      )}
                    </div>
                  </button>
                ))}
              </div>

              {/* Uganda-themed Footer */}
              <div className="p-4 bg-gradient-to-r from-yellow-400/10 via-red-500/10 to-black/10 border-t border-gray-200">
                <div className="grid grid-cols-3 gap-2">
                  <button
                    onClick={() => {
                      toast.success('üåç Exploring Uganda business opportunities');
                      setShowMobileDropdown(false);
                    }}
                    className="p-3 bg-yellow-100 rounded-xl text-center border border-yellow-200 hover:bg-yellow-200 transition-colors"
                  >
                    <div className="text-lg">üåç</div>
                    <div className="text-xs font-medium text-yellow-800 mt-1">Explore</div>
                  </button>
                  
                  <button
                    onClick={() => {
                      setShowNotifications(!showNotifications);
                      setShowMobileDropdown(false);
                    }}
                    className="p-3 bg-red-100 rounded-xl text-center border border-red-200 hover:bg-red-200 transition-colors relative"
                  >
                    <div className="text-lg">üîî</div>
                    <div className="text-xs font-medium text-red-800 mt-1">Alerts</div>
                    {notificationCount > 0 && (
                      <div className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold">
                        {notificationCount}
                      </div>
                    )}
                  </button>
                  
                  <button
                    onClick={() => {
                      toast.info('‚öôÔ∏è Opening Uganda portal settings');
                      setShowMobileDropdown(false);
                    }}
                    className="p-3 bg-black/10 rounded-xl text-center border border-gray-300 hover:bg-black/20 transition-colors"
                  >
                    <div className="text-lg">‚öôÔ∏è</div>
                    <div className="text-xs font-medium text-gray-800 mt-1">Settings</div>
                  </button>
                </div>
                
                {/* Uganda Pride Message */}
                <div className="mt-3 text-center">
                  <p className="text-xs text-gray-600">
                    üá∫üá¨ <span className="font-semibold">Proudly serving Uganda</span> üá∫üá¨
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    "For God and My Country"
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Enhanced Notifications Dropdown */}
      {showNotifications && (
        <div className="fixed inset-0 z-50" onClick={() => setShowNotifications(false)}>
          <div className="absolute top-20 right-4 w-96 max-w-full">
            <div 
              className="bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden transform transition-all duration-300 animate-slideDown"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 text-white p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center">
                      <FiBell className="h-5 w-5 animate-bounce" />
                    </div>
                    <div>
                      <h3 className="font-bold text-lg">Notifications</h3>
                      <p className="text-blue-100 text-sm">
                        {getFilteredNotifications().length} updates ‚Ä¢ {notificationCount} unread
                      </p>
                    </div>
                  </div>
                  <button 
                    onClick={() => setShowNotifications(false)}
                    className="p-2 hover:bg-white/20 rounded-lg transition-colors"
                  >
                    <FiX className="h-4 w-4" />
                  </button>
                </div>
                
                {/* Filter Buttons */}
                <div className="flex space-x-2 mt-4">
                  {[
                    { key: 'all', label: 'All', icon: 'üìã' },
                    { key: 'unread', label: 'Unread', icon: 'üî¥' },
                    { key: 'urgent', label: 'Urgent', icon: '‚ö°' },
                    { key: 'recent', label: 'Recent', icon: 'üïê' }
                  ].map(filter => (
                    <button
                      key={filter.key}
                      onClick={() => setNotificationFilter(filter.key)}
                      className={`px-3 py-1 rounded-full text-xs font-medium transition-all ${
                        notificationFilter === filter.key
                          ? 'bg-white text-purple-600 shadow-lg'
                          : 'bg-white/20 text-white hover:bg-white/30'
                      }`}
                    >
                      <span className="mr-1">{filter.icon}</span>
                      {filter.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Notifications List */}
              <div className="max-h-96 overflow-y-auto">
                {getFilteredNotifications().length === 0 ? (
                  <div className="p-6 text-center text-gray-500">
                    <FiBell className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                    <p className="text-lg font-medium">No notifications</p>
                    <p className="text-sm">You're all caught up! üéâ</p>
                  </div>
                ) : (
                  getFilteredNotifications().map((notification, index) => (
                    <div
                      key={notification.id}
                      className={`border-b border-gray-100 p-4 hover:bg-gray-50 transition-all cursor-pointer group ${
                        notification.unread ? 'bg-blue-50/50' : ''
                      }`}
                      onClick={() => handleNotificationAction(notification)}
                    >
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          <div className={`w-10 h-10 rounded-full flex items-center justify-center text-lg ${
                            notification.priority === 'high' ? 'bg-red-100 ring-2 ring-red-500 animate-pulse' :
                            notification.priority === 'medium' ? 'bg-yellow-100' : 'bg-gray-100'
                          }`}>
                            {notification.icon}
                          </div>
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center justify-between mb-1">
                            <h4 className={`text-sm font-medium truncate ${
                              notification.unread ? 'text-gray-900' : 'text-gray-700'
                            }`}>
                              {notification.title}
                            </h4>
                            <div className="flex items-center space-x-1">
                              {notification.unread && (
                                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                              )}
                              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${notification.color}`}>
                                {notification.type.toUpperCase()}
                              </span>
                            </div>
                          </div>
                          
                          <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                            {notification.message}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2 text-xs text-gray-500">
                              <span>{notification.time}</span>
                              <span>‚Ä¢</span>
                              <span className="bg-gray-100 px-2 py-1 rounded-full">{notification.ugandaContext}</span>
                            </div>
                            
                            <div className="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  markNotificationAsRead(notification.id);
                                }}
                                className="p-1 hover:bg-gray-200 rounded text-gray-400 hover:text-gray-600"
                                title="Mark as read"
                              >
                                <FiCheck className="h-3 w-3" />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  deleteNotification(notification.id);
                                }}
                                className="p-1 hover:bg-red-100 rounded text-gray-400 hover:text-red-600"
                                title="Delete"
                              >
                                <FiX className="h-3 w-3" />
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>

              {/* Footer */}
              {getFilteredNotifications().length > 0 && (
                <div className="p-4 bg-gray-50 border-t border-gray-100">
                  <div className="flex justify-between items-center">
                    <button 
                      onClick={markAllAsRead}
                      className="text-sm text-blue-600 hover:text-blue-800 font-medium flex items-center space-x-1"
                    >
                      <FiCheck className="h-4 w-4" />
                      <span>Mark all as read</span>
                    </button>
                    
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => {
                          addNewNotification('info', 'Test Notification', 'This is a test notification from Uganda', 'system');
                        }}
                        className="text-sm text-gray-600 hover:text-gray-800 font-medium flex items-center space-x-1"
                      >
                        <FiPlus className="h-4 w-4" />
                        <span>Test</span>
                      </button>
                      
                      <button 
                        onClick={() => {
                          toast.info('üìã Opening full notification center');
                          setShowNotifications(false);
                        }}
                        className="text-sm text-gray-600 hover:text-gray-800 font-medium flex items-center space-x-1"
                      >
                        <FiExternalLink className="h-4 w-4" />
                        <span>View all</span>
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Suspense fallback={
          <div className="space-y-6">
            {[1, 2, 3].map(i => (
              <div key={i} className="h-64 bg-white rounded-2xl animate-pulse shadow-lg"></div>
            ))}
          </div>
        }>
          {/* Enhanced Overview Dashboard with Uganda Context */}
          {activeTab === 'overview' && (
            <UgandaOverviewDashboard
              businessMetrics={businessMetrics}
              currentTime={currentTime}
              managerProfile={managerProfile}
              revenueData={revenueData}
              realTimeActivity={realTimeActivity}
              topProducts={topProducts}
              performanceIndicators={performanceIndicators}
              strategicGoals={strategicGoals}
              formatCurrency={formatCurrency}
              timeRange={timeRange}
              setTimeRange={setTimeRange}
              setActiveTab={setActiveTab}
              setShowInventoryModal={setShowInventoryModal}
              openEditModal={openEditModal}
            />
          )}

          {/* üöÄ Real-Time Portal Control Dashboard */}
          {activeTab === 'portal-control' && (
            <div className="space-y-6">
              {/* Portal Control Header */}
              <div className="bg-gradient-to-r from-cyan-500 to-blue-600 text-white p-6 rounded-xl shadow-lg">
                <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                  <div className="flex items-center space-x-3 mb-4 md:mb-0">
                    <div className="p-2 bg-white/20 rounded-lg">
                      <FiNavigation className="w-6 h-6" />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold">Portal Control Center</h2>
                      <p className="text-cyan-100">Monitor and control all FAREDEAL portals in real-time</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${portalControlSystem.isConnected ? 'bg-green-400' : 'bg-red-400'} animate-pulse`}></div>
                      <span className="text-sm">
                        {portalControlSystem.isConnected ? 'Connected' : 'Disconnected'}
                      </span>
                    </div>
                    <button
                      onClick={() => initializePortalControl()}
                      className="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg transition-colors duration-200 flex items-center space-x-2"
                    >
                      <FiRefreshCw className="w-4 h-4" />
                      <span>Refresh</span>
                    </button>
                  </div>
                </div>
              </div>

              {/* Portal Status Overview */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {Object.entries(portalControlSystem.activePortals).map(([portalName, portal]) => (
                  <div key={portalName} className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow duration-200">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-2">
                        <div className={`w-3 h-3 rounded-full ${portal.status === 'online' ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                        <h3 className="font-semibold text-gray-900 capitalize">{portalName} Portal</h3>
                      </div>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                        portal.status === 'online' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-600'
                      }`}>
                        {portal.status}
                      </span>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Active Users:</span>
                        <span className="font-medium">{portal.activeUsers}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">Last Activity:</span>
                        <span className="font-medium text-xs">
                          {portal.lastActivity ? new Date(portal.lastActivity).toLocaleTimeString('en-UG') : 'Never'}
                        </span>
                      </div>
                    </div>
                    
                    <div className="mt-4 flex space-x-2">
                      <button
                        onClick={() => sendPortalCommand(availableCommands[0], portalName, { message: 'System maintenance in 10 minutes' })}
                        className="flex-1 px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors duration-200"
                      >
                        Message
                      </button>
                      <button
                        onClick={() => {
                          const command = availableCommands.find(cmd => cmd.id === 'update_portal_config');
                          sendPortalCommand(command, portalName, { theme: 'updated' });
                        }}
                        className="flex-1 px-3 py-1 text-xs bg-gray-50 text-gray-600 rounded-lg hover:bg-gray-100 transition-colors duration-200"
                      >
                        Config
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {/* Portal Control Commands */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiSettings className="w-5 h-5" />
                  <span>Portal Control Commands</span>
                  <span className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
                    {availableCommands.length} commands available
                  </span>
                </h3>
                
                {/* Command Categories */}
                <div className="mb-6">
                  <div className="flex flex-wrap gap-2 mb-4">
                    {['all', 'communication', 'security', 'performance', 'ai', 'backup', 'analytics'].map((category) => (
                      <button
                        key={category}
                        className={`px-3 py-1 text-sm rounded-full transition-colors duration-200 ${
                          category === 'all'
                            ? 'bg-cyan-100 text-cyan-800 border border-cyan-200'
                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                        }`}
                      >
                        {category === 'all' && 'üéØ All'}
                        {category === 'communication' && 'üí¨ Communication'}
                        {category === 'security' && 'üõ°Ô∏è Security'}
                        {category === 'performance' && '‚ö° Performance'}
                        {category === 'ai' && 'ü§ñ AI'}
                        {category === 'backup' && 'üíæ Backup'}
                        {category === 'analytics' && 'üìä Analytics'}
                      </button>
                    ))}
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {availableCommands.map((command) => (
                    <div key={command.id} className={`border-2 rounded-lg p-4 hover:shadow-md transition-all duration-200 ${
                      command.category === 'security' ? 'border-red-200 bg-red-50' :
                      command.category === 'ai' ? 'border-purple-200 bg-purple-50' :
                      command.category === 'performance' ? 'border-yellow-200 bg-yellow-50' :
                      command.category === 'communication' ? 'border-blue-200 bg-blue-50' :
                      command.category === 'backup' ? 'border-indigo-200 bg-indigo-50' :
                      command.category === 'analytics' ? 'border-green-200 bg-green-50' :
                      'border-gray-200 bg-gray-50'
                    }`}>
                      <div className="flex items-start space-x-3 mb-3">
                        <span className="text-2xl flex-shrink-0">{command.icon}</span>
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 text-sm">{command.name}</h4>
                          <p className="text-xs text-gray-600 mt-1">{command.description}</p>
                          <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full mt-2 ${
                            command.category === 'security' ? 'bg-red-100 text-red-800' :
                            command.category === 'ai' ? 'bg-purple-100 text-purple-800' :
                            command.category === 'performance' ? 'bg-yellow-100 text-yellow-800' :
                            command.category === 'communication' ? 'bg-blue-100 text-blue-800' :
                            command.category === 'backup' ? 'bg-indigo-100 text-indigo-800' :
                            command.category === 'analytics' ? 'bg-green-100 text-green-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {command.category}
                          </span>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <div className="flex space-x-2">
                          <button
                            onClick={() => {
                              // Handle special commands
                              if (command.id === 'broadcast_message') {
                                const message = prompt('Enter message to broadcast to all portals:');
                                if (message) {
                                  sendPortalCommand(command, 'all', { message });
                                }
                              } else if (command.id === 'push_notification') {
                                const notification = prompt('Enter notification text:');
                                if (notification) {
                                  sendPortalCommand(command, 'all', { notification });
                                }
                              } else if (command.id === 'video_conference') {
                                startEmergencyConference();
                              } else if (command.id === 'auto_pilot_toggle') {
                                toggleAutoPilot();
                              } else if (command.id === 'disaster_recovery') {
                                testDisasterRecovery();
                              } else {
                                sendPortalCommand(command, 'all', {});
                              }
                            }}
                            className={`flex-1 px-3 py-2 text-sm rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2 ${
                              command.category === 'security' ? 'bg-red-600 text-white hover:bg-red-700' :
                              command.category === 'ai' ? 'bg-purple-600 text-white hover:bg-purple-700' :
                              command.category === 'performance' ? 'bg-yellow-600 text-white hover:bg-yellow-700' :
                              command.category === 'communication' ? 'bg-blue-600 text-white hover:bg-blue-700' :
                              command.category === 'backup' ? 'bg-indigo-600 text-white hover:bg-indigo-700' :
                              command.category === 'analytics' ? 'bg-green-600 text-white hover:bg-green-700' :
                              'bg-cyan-600 text-white hover:bg-cyan-700'
                            }`}
                          >
                            <FiPlay className="w-3 h-3" />
                            <span>Execute</span>
                          </button>
                        </div>
                        
                        <select 
                          className="w-full px-2 py-1 text-xs border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                          onChange={(e) => {
                            if (e.target.value !== 'all') {
                              sendPortalCommand(command, e.target.value, {});
                            }
                          }}
                        >
                          <option value="all">üéØ All Portals</option>
                          <option value="employee">üë• Employee Portal</option>
                          <option value="customer">üõí Customer Portal</option>
                          <option value="supplier">üè≠ Supplier Portal</option>
                        </select>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Quick Command Shortcuts */}
                <div className="mt-6 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-lg p-4 border border-cyan-200">
                  <h4 className="font-medium text-cyan-900 mb-3 flex items-center space-x-2">
                    <FiZap className="w-4 h-4" />
                    <span>Quick Actions</span>
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={() => {
                        const commands = ['ai_optimization', 'load_balancing', 'security_scan', 'backup_snapshot'];
                        commands.forEach((cmdId, index) => {
                          setTimeout(() => {
                            const command = availableCommands.find(cmd => cmd.id === cmdId);
                            if (command) sendPortalCommand(command, 'all', {});
                          }, index * 1000);
                        });
                        toast.info('üöÄ Running comprehensive system optimization...');
                      }}
                      className="px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-lg hover:from-cyan-600 hover:to-blue-600 transition-all duration-200 flex items-center space-x-2 text-sm"
                    >
                      <FiZap className="w-4 h-4" />
                      <span>Full System Optimization</span>
                    </button>
                    
                    <button
                      onClick={() => {
                        const emergencyCommands = ['security_scan', 'health_check', 'backup_snapshot'];
                        emergencyCommands.forEach((cmdId, index) => {
                          setTimeout(() => {
                            const command = availableCommands.find(cmd => cmd.id === cmdId);
                            if (command) sendPortalCommand(command, 'all', {});
                          }, index * 500);
                        });
                        toast.warning('üö® Running emergency diagnostics...');
                      }}
                      className="px-4 py-2 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-lg hover:from-orange-600 hover:to-red-600 transition-all duration-200 flex items-center space-x-2 text-sm"
                    >
                      <FiAlertTriangle className="w-4 h-4" />
                      <span>Emergency Diagnostics</span>
                    </button>
                    
                    <button
                      onClick={() => {
                        generatePredictiveAnalytics();
                        setTimeout(() => {
                          const command = availableCommands.find(cmd => cmd.id === 'ai_optimization');
                          if (command) sendPortalCommand(command, 'all', {});
                        }, 2000);
                      }}
                      className="px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all duration-200 flex items-center space-x-2 text-sm"
                    >
                      <FiZap className="w-4 h-4" />
                      <span>AI Analysis & Optimization</span>
                    </button>
                  </div>
                </div>
              </div>

              {/* Real-Time Portal Activity */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Recent Portal Activities */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                    <FiClock className="w-5 h-5" />
                    <span>Recent Portal Activities</span>
                  </h3>
                  
                  <div className="space-y-3 max-h-64 overflow-y-auto">
                    {portalActivities.slice(0, 10).map((activity) => (
                      <div key={activity.id} className="flex items-start space-x-3 p-3 bg-gray-50 rounded-lg">
                        <div className={`w-2 h-2 rounded-full mt-2 ${
                          activity.portal === 'manager' ? 'bg-blue-500' :
                          activity.portal === 'employee' ? 'bg-green-500' :
                          activity.portal === 'customer' ? 'bg-purple-500' : 'bg-orange-500'
                        }`}></div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-900 capitalize">
                              {activity.portal} Portal
                            </span>
                            <span className="text-xs text-gray-500">
                              {activity.timestamp.toLocaleTimeString('en-UG')}
                            </span>
                          </div>
                          <p className="text-sm text-gray-600">{activity.user}: {activity.action}</p>
                          <p className="text-xs text-gray-500">{activity.device} ‚Ä¢ {activity.location}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Portal Performance Metrics */}
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                    <FiBarChart className="w-5 h-5" />
                    <span>Portal Performance</span>
                  </h3>
                  
                  <div className="space-y-4">
                    {Object.entries(portalMetrics).map(([portalName, metrics]) => (
                      <div key={portalName} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-medium text-gray-900 capitalize">{portalName} Portal</h4>
                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                            metrics.performance === 'excellent' ? 'bg-green-100 text-green-800' :
                            metrics.performance === 'good' ? 'bg-blue-100 text-blue-800' :
                            metrics.performance === 'average' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-gray-100 text-gray-600'
                          }`}>
                            {metrics.performance === 'not_active' ? 'Inactive' : metrics.performance}
                          </span>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div>
                            <span className="text-gray-600">Sessions Today:</span>
                            <span className="ml-2 font-medium">{metrics.sessionsToday}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Avg. Session:</span>
                            <span className="ml-2 font-medium">{metrics.averageSessionTime}</span>
                          </div>
                          {portalName === 'employee' && (
                            <>
                              <div>
                                <span className="text-gray-600">Transactions:</span>
                                <span className="ml-2 font-medium">{metrics.transactionsProcessed}</span>
                              </div>
                              <div>
                                <span className="text-gray-600">Customers:</span>
                                <span className="ml-2 font-medium">{metrics.customersServed}</span>
                              </div>
                            </>
                          )}
                          {portalName === 'customer' && (
                            <>
                              <div>
                                <span className="text-gray-600">Orders:</span>
                                <span className="ml-2 font-medium">{metrics.ordersPlaced}</span>
                              </div>
                              <div>
                                <span className="text-gray-600">Pages:</span>
                                <span className="ml-2 font-medium">{metrics.pagesViewed}</span>
                              </div>
                            </>
                          )}
                          {portalName === 'supplier' && (
                            <>
                              <div>
                                <span className="text-gray-600">Orders Proc.:</span>
                                <span className="ml-2 font-medium">{metrics.ordersProcessed}</span>
                              </div>
                              <div>
                                <span className="text-gray-600">Inventory:</span>
                                <span className="ml-2 font-medium">{metrics.inventoryUpdates}</span>
                              </div>
                            </>
                          )}
                          {portalName === 'manager' && (
                            <>
                              <div>
                                <span className="text-gray-600">Actions:</span>
                                <span className="ml-2 font-medium">{metrics.actionsPerformed}</span>
                              </div>
                              <div>
                                <span className="text-gray-600">Reports:</span>
                                <span className="ml-2 font-medium">{metrics.reportsGenerated}</span>
                              </div>
                            </>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* üöÄ Advanced Portal Analytics Dashboard */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiPieChart className="w-5 h-5" />
                  <span>Advanced Portal Analytics</span>
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                    portalAutoPilot.isEnabled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'
                  }`}>
                    {portalAutoPilot.isEnabled ? 'ü§ñ AI Active' : 'üë§ Manual'}
                  </span>
                </h3>
                
                {/* Real-time Analytics Tabs */}
                <div className="border-b border-gray-200 mb-4">
                  <nav className="-mb-px flex space-x-8">
                    {['heatmap', 'predictions', 'security', 'performance'].map((tab) => (
                      <button
                        key={tab}
                        className={`py-2 px-1 border-b-2 font-medium text-sm capitalize ${
                          tab === 'heatmap' 
                            ? 'border-cyan-500 text-cyan-600' 
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {tab === 'heatmap' && 'üî•'} {tab === 'predictions' && 'üîÆ'} 
                        {tab === 'security' && 'üõ°Ô∏è'} {tab === 'performance' && '‚ö°'} {tab}
                      </button>
                    ))}
                  </nav>
                </div>

                {/* Analytics Content */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* User Activity Heatmap */}
                  <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg p-4 border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-3 flex items-center space-x-2">
                      <span>üî•</span>
                      <span>Real-Time Activity Heatmap</span>
                    </h4>
                    <div className="grid grid-cols-4 gap-2">
                      {['manager', 'employee', 'customer', 'supplier'].map((portal) => (
                        <div key={portal} className="text-center">
                          <div className={`w-12 h-12 mx-auto rounded-full flex items-center justify-center text-xs font-bold ${
                            portalControlSystem.activePortals[portal]?.status === 'online'
                              ? 'bg-gradient-to-br from-red-400 to-orange-500 text-white animate-pulse'
                              : 'bg-gray-200 text-gray-500'
                          }`}>
                            {portalControlSystem.activePortals[portal]?.activeUsers || 0}
                          </div>
                          <p className="text-xs mt-1 text-blue-700 capitalize">{portal}</p>
                        </div>
                      ))}
                    </div>
                    <div className="mt-4 text-xs text-blue-600">
                      <p>üî¥ High Activity ‚Ä¢ üü° Medium Activity ‚Ä¢ ‚ö™ Inactive</p>
                    </div>
                  </div>

                  {/* Predictive Insights */}
                  <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-4 border border-purple-200">
                    <h4 className="font-medium text-purple-900 mb-3 flex items-center space-x-2">
                      <span>üîÆ</span>
                      <span>AI Predictions</span>
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-purple-700">Next Peak Usage:</span>
                        <span className="font-bold text-purple-900">2:30 PM (87% confidence)</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-purple-700">Expected Users:</span>
                        <span className="font-bold text-purple-900">450+ users</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-purple-700">Bottleneck Risk:</span>
                        <span className="font-bold text-green-600">Low (12%)</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-purple-700">Recommended Action:</span>
                        <span className="font-bold text-blue-600">Scale up at 2:00 PM</span>
                      </div>
                    </div>
                  </div>

                  {/* Security Status */}
                  <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-4 border border-green-200">
                    <h4 className="font-medium text-green-900 mb-3 flex items-center space-x-2">
                      <span>üõ°Ô∏è</span>
                      <span>Security Overview</span>
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-green-700">Security Score:</span>
                        <span className="font-bold text-green-900">{portalSecurity.threatDetection.securityScore}/100</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-green-700">Active Threats:</span>
                        <span className="font-bold text-red-600">{portalSecurity.threatDetection.activeThreats}</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-green-700">Blocked Today:</span>
                        <span className="font-bold text-green-600">{portalSecurity.threatDetection.blockedAttempts}</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-green-700">2FA Coverage:</span>
                        <span className="font-bold text-blue-600">94% users</span>
                      </div>
                    </div>
                  </div>

                  {/* Performance Metrics */}
                  <div className="bg-gradient-to-br from-orange-50 to-yellow-50 rounded-lg p-4 border border-orange-200">
                    <h4 className="font-medium text-orange-900 mb-3 flex items-center space-x-2">
                      <span>‚ö°</span>
                      <span>Performance Insights</span>
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-orange-700">Avg Response Time:</span>
                        <span className="font-bold text-orange-900">
                          {Math.round(Object.values(portalPerformance.realTimeMetrics.responseTime).reduce((a, b) => a + b, 0) / 4)}ms
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-orange-700">System Load:</span>
                        <span className="font-bold text-green-600">{portalPerformance.optimizations.cpuUtilization}%</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-orange-700">Cache Hit Rate:</span>
                        <span className="font-bold text-blue-600">{portalPerformance.optimizations.cacheHitRatio}%</span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-orange-700">Memory Usage:</span>
                        <span className="font-bold text-orange-600">{portalPerformance.optimizations.memoryUsage}%</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Quick Analytics Actions */}
                <div className="mt-6 flex flex-wrap gap-2">
                  <button
                    onClick={() => generatePredictiveAnalytics()}
                    className="px-3 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors duration-200 flex items-center space-x-2 text-sm"
                  >
                    <FiTrendingUp className="w-4 h-4" />
                    <span>Generate Predictions</span>
                  </button>
                  
                  <button
                    onClick={() => runSecurityScan()}
                    className="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors duration-200 flex items-center space-x-2 text-sm"
                  >
                    <FiShield className="w-4 h-4" />
                    <span>Security Scan</span>
                  </button>
                  
                  <button
                    onClick={() => optimizeLoadBalancing()}
                    className="px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 flex items-center space-x-2 text-sm"
                  >
                    <FiZap className="w-4 h-4" />
                    <span>Optimize Performance</span>
                  </button>
                  
                  <button
                    onClick={() => optimizeGeographicRouting()}
                    className="px-3 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors duration-200 flex items-center space-x-2 text-sm"
                  >
                    <FiNavigation className="w-4 h-4" />
                    <span>Geographic Routing</span>
                  </button>
                </div>
              </div>

              {/* ü§ñ AI Auto-Pilot Control Panel */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                    <FiCpu className="w-5 h-5" />
                    <span>AI Auto-Pilot System</span>
                  </h3>
                  <button
                    onClick={toggleAutoPilot}
                    className={`px-4 py-2 rounded-lg transition-all duration-300 flex items-center space-x-2 ${
                      portalAutoPilot.isEnabled
                        ? 'bg-green-500 text-white hover:bg-green-600'
                        : 'bg-gray-500 text-white hover:bg-gray-600'
                    }`}
                  >
                    <span className="text-lg">{portalAutoPilot.isEnabled ? 'ü§ñ' : 'üë§'}</span>
                    <span>{portalAutoPilot.isEnabled ? 'Auto-Pilot ON' : 'Manual Control'}</span>
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* AI Intelligence Status */}
                  <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-2">üß† AI Intelligence</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span className="text-blue-700">Model Accuracy:</span>
                        <span className="font-bold text-blue-900">{portalAutoPilot.learningModel.accuracy}%</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-blue-700">Training Data:</span>
                        <span className="font-bold text-blue-900">{portalAutoPilot.learningModel.trainingData.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-blue-700">Last Training:</span>
                        <span className="font-bold text-blue-900 text-xs">
                          {portalAutoPilot.learningModel.lastTraining.toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Automated Features */}
                  <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                    <h4 className="font-medium text-green-900 mb-2">‚öôÔ∏è Auto Features</h4>
                    <div className="space-y-1 text-sm">
                      {Object.entries(portalAutoPilot.intelligence).map(([feature, config]) => (
                        <div key={feature} className="flex justify-between items-center">
                          <span className="text-green-700 capitalize text-xs">
                            {feature.replace(/([A-Z])/g, ' $1').trim()}:
                          </span>
                          <span className={`text-xs font-bold ${config.enabled ? 'text-green-600' : 'text-gray-500'}`}>
                            {config.enabled ? '‚úÖ' : '‚ùå'}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Recent AI Decisions */}
                  <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
                    <h4 className="font-medium text-purple-900 mb-2">üß† Recent AI Actions</h4>
                    <div className="space-y-1 text-xs">
                      <div className="text-purple-700">‚Ä¢ Optimized load distribution</div>
                      <div className="text-purple-700">‚Ä¢ Scaled customer portal +2 instances</div>
                      <div className="text-purple-700">‚Ä¢ Updated cache configuration</div>
                      <div className="text-purple-700">‚Ä¢ Applied security patches</div>
                      <div className="text-purple-700">‚Ä¢ Cleaned up log files</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* üìä Advanced System Monitoring */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiMonitor className="w-5 h-5" />
                  <span>Advanced System Monitoring</span>
                </h3>
                
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* Geographic Distribution */}
                  <div className="bg-gradient-to-br from-cyan-50 to-blue-50 rounded-lg p-4 border border-cyan-200">
                    <h4 className="font-medium text-cyan-900 mb-3 flex items-center space-x-2">
                      <span>üåç</span>
                      <span>Uganda Regional Distribution</span>
                    </h4>
                    <div className="space-y-2">
                      {Object.entries(portalAnalytics.geographicDistribution).map(([region, data]) => (
                        <div key={region} className="flex justify-between items-center">
                          <span className="text-cyan-700 capitalize text-sm">{region}:</span>
                          <div className="flex items-center space-x-2">
                            <span className="text-xs font-bold text-cyan-900">{data.users} users</span>
                            <span className={`w-2 h-2 rounded-full ${
                              data.performance === 'excellent' ? 'bg-green-500' :
                              data.performance === 'good' ? 'bg-blue-500' :
                              data.performance === 'average' ? 'bg-yellow-500' : 'bg-red-500'
                            }`}></span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Backup & Recovery Status */}
                  <div className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-lg p-4 border border-indigo-200">
                    <h4 className="font-medium text-indigo-900 mb-3 flex items-center space-x-2">
                      <span>üíæ</span>
                      <span>Backup & Recovery</span>
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-indigo-700">Last Backup:</span>
                        <span className="font-bold text-indigo-900 text-xs">
                          {portalBackupSystem.backupStatus.lastBackup.toLocaleTimeString()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-indigo-700">Total Backups:</span>
                        <span className="font-bold text-indigo-900">{portalBackupSystem.backupStatus.totalBackups}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-indigo-700">Storage Used:</span>
                        <span className="font-bold text-indigo-900">{portalBackupSystem.backupStatus.storageUsed}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-indigo-700">Recovery Time:</span>
                        <span className="font-bold text-green-600">{portalBackupSystem.disasterRecovery.recoveryTime}</span>
                      </div>
                    </div>
                  </div>

                  {/* Communication Hub Status */}
                  <div className="bg-gradient-to-br from-emerald-50 to-green-50 rounded-lg p-4 border border-emerald-200">
                    <h4 className="font-medium text-emerald-900 mb-3 flex items-center space-x-2">
                      <span>üí¨</span>
                      <span>Communication Hub</span>
                    </h4>
                    <div className="space-y-2 text-sm">
                      {Object.entries(portalCommunication.chatRooms).map(([room, data]) => (
                        <div key={room} className="flex justify-between items-center">
                          <span className="text-emerald-700 capitalize text-xs">{room}:</span>
                          <div className="flex items-center space-x-1">
                            <span className="text-xs font-bold text-emerald-900">{data.participants}</span>
                            <span className={`w-2 h-2 rounded-full ${
                              data.status === 'active' ? 'bg-green-500 animate-pulse' : 'bg-gray-400'
                            }`}></span>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="mt-3 pt-2 border-t border-emerald-200">
                      <div className="flex justify-between text-xs">
                        <span className="text-emerald-700">Video Calls:</span>
                        <span className="font-bold text-emerald-900">{portalCommunication.videoCallSessions.length} active</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <FiShield className="w-5 h-5" />
                  <span>System Health & Quick Actions</span>
                </h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiCheckCircle className="w-5 h-5 text-green-600" />
                      <span className="font-medium text-green-900">System Health</span>
                    </div>
                    <p className="text-2xl font-bold text-green-600">{portalControlSystem.controlledMetrics.systemHealth}</p>
                  </div>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiUsers className="w-5 h-5 text-blue-600" />
                      <span className="font-medium text-blue-900">Active Users</span>
                    </div>
                    <p className="text-2xl font-bold text-blue-600">{portalControlSystem.controlledMetrics.totalActiveUsers}</p>
                  </div>
                  
                  <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiCreditCard className="w-5 h-5 text-purple-600" />
                      <span className="font-medium text-purple-900">Transactions</span>
                    </div>
                    <p className="text-2xl font-bold text-purple-600">{portalControlSystem.controlledMetrics.totalTransactions}</p>
                  </div>
                  
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2 mb-2">
                      <FiDollarSign className="w-5 h-5 text-orange-600" />
                      <span className="font-medium text-orange-900">Real-time Revenue</span>
                    </div>
                    <p className="text-lg font-bold text-orange-600">
                      UGX {(portalControlSystem.controlledMetrics.realTimeRevenue / 1000).toFixed(0)}k
                    </p>
                  </div>
                </div>
                
                <div className="mt-6 flex flex-wrap gap-2">
                  <button
                    onClick={() => broadcastMessage('System maintenance scheduled for tonight at 11 PM EAT', 'high')}
                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiSend className="w-4 h-4" />
                    <span>Broadcast Maintenance Alert</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      const command = availableCommands.find(cmd => cmd.id === 'sync_data');
                      sendPortalCommand(command, 'all', {});
                    }}
                    className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiRefreshCw className="w-4 h-4" />
                    <span>Sync All Data</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      toast.info('üìä Generating system health report...');
                      setTimeout(() => {
                        generatePortalAnalytics('all', '24h');
                        toast.success('‚úÖ System health report generated and saved to reports section');
                      }, 2000);
                    }}
                    className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiFileText className="w-4 h-4" />
                    <span>Generate Health Report</span>
                  </button>

                  <button
                    onClick={() => {
                      const alertTitle = prompt('Enter emergency alert title:');
                      if (alertTitle) {
                        const alertMessage = prompt('Enter emergency alert message:');
                        if (alertMessage) {
                          broadcastEmergencyAlert({ title: alertTitle, message: alertMessage });
                        }
                      }
                    }}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiAlertTriangle className="w-4 h-4" />
                    <span>Emergency Alert</span>
                  </button>

                  <button
                    onClick={() => {
                      const customNotification = {
                        title: 'FAREDEAL Update',
                        message: 'New features available! Check your portal for the latest updates.',
                        priority: 'normal',
                        category: 'update'
                      };
                      sendPortalNotification('all', customNotification);
                    }}
                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiBell className="w-4 h-4" />
                    <span>Send Update Notification</span>
                  </button>

                  <button
                    onClick={() => {
                      toast.info('üìà Generating real-time analytics...');
                      setTimeout(() => {
                        ['employee', 'customer', 'supplier'].forEach(portal => {
                          generatePortalAnalytics(portal, '1h');
                        });
                        toast.success('‚úÖ Real-time analytics generated for all portals');
                      }, 3000);
                    }}
                    className="px-4 py-2 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition-colors duration-200 flex items-center space-x-2"
                  >
                    <FiTrendingUp className="w-4 h-4" />
                    <span>Generate Analytics</span>
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Other Tab Content - Enhanced */}
          {activeTab === 'analytics' && renderAnalytics()}
          {activeTab === 'team' && renderTeamManagement()}
          {activeTab === 'suppliers' && renderSupplierVerification()}
          {activeTab === 'orders' && renderOrderVerification()}
          {activeTab === 'inventory' && renderInventoryAccess()}
          {activeTab === 'reports' && renderReportAccess()}
          {activeTab === 'alerts' && renderAlerts()}
        </Suspense>
      </div>

      {/* Edit Modal */}
      {renderEditModal()}

      {/* Inventory Management Modal */}
      <InventoryManagement 
        isOpen={showInventoryModal} 
        onClose={() => setShowInventoryModal(false)} 
      />

      {/* Enhanced Notification Styles */}
      <style jsx="true">{`
        @keyframes slideDown {
          from {
            transform: translateY(-20px);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        
        @keyframes slideInFromTop {
          from {
            transform: translateY(-100%);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        
        @keyframes fadeInScale {
          from {
            transform: scale(0.95);
            opacity: 0;
          }
          to {
            transform: scale(1);
            opacity: 1;
          }
        }
        
        .animate-slideDown {
          animation: slideDown 0.3s ease-out;
        }
        
        .animate-slideInFromTop {
          animation: slideInFromTop 0.4s ease-out;
        }
        
        .animate-fadeInScale {
          animation: fadeInScale 0.2s ease-out;
        }
        
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        
        .touch-target {
          min-height: 44px;
          min-width: 44px;
        }

        /* Mobile dropdown specific animations */
        @media (max-width: 768px) {
          .mobile-dropdown-container {
            animation: slideInFromTop 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          }
          
          .mobile-dropdown-container .grid > * {
            animation: fadeInScale 0.3s ease-out forwards;
            opacity: 0;
          }
          
          .mobile-dropdown-container .grid > *:nth-child(1) { animation-delay: 0.1s; }
          .mobile-dropdown-container .grid > *:nth-child(2) { animation-delay: 0.2s; }
          .mobile-dropdown-container .grid > *:nth-child(3) { animation-delay: 0.3s; }
          .mobile-dropdown-container .grid > *:nth-child(4) { animation-delay: 0.4s; }
          .mobile-dropdown-container .grid > *:nth-child(5) { animation-delay: 0.5s; }
          .mobile-dropdown-container .grid > *:nth-child(6) { animation-delay: 0.6s; }
          .mobile-dropdown-container .grid > *:nth-child(7) { animation-delay: 0.7s; }
          .mobile-dropdown-container .grid > *:nth-child(8) { animation-delay: 0.8s; }
        }

        /* Main dropdown animations for all screen sizes */
        .main-dropdown-container {
          animation: slideDown 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .main-dropdown-container .grid > * {
          animation: fadeInScale 0.3s ease-out forwards;
          opacity: 0;
        }
        
        .main-dropdown-container .grid > *:nth-child(1) { animation-delay: 0.1s; }
        .main-dropdown-container .grid > *:nth-child(2) { animation-delay: 0.15s; }
        .main-dropdown-container .grid > *:nth-child(3) { animation-delay: 0.2s; }
        .main-dropdown-container .grid > *:nth-child(4) { animation-delay: 0.25s; }
        .main-dropdown-container .grid > *:nth-child(5) { animation-delay: 0.3s; }
        .main-dropdown-container .grid > *:nth-child(6) { animation-delay: 0.35s; }
        .main-dropdown-container .grid > *:nth-child(7) { animation-delay: 0.4s; }
        .main-dropdown-container .grid > *:nth-child(8) { animation-delay: 0.45s; }

        /* Uganda flag colors for mobile elements */
        .uganda-gradient {
          background: linear-gradient(45deg, #FCDC00 0%, #D90000 50%, #000000 100%);
        }
        
        .uganda-text {
          background: linear-gradient(45deg, #FCDC00, #D90000, #000000);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
      `}</style>

      {/* Enhanced Supplier Management Modal */}
      <SupplierManagement 
        isOpen={showSupplierManagementModal} 
        onClose={() => setShowSupplierManagementModal(false)} 
      />
    </div>
  );
};

export default ManagerPortal;




